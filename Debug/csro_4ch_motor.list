
csro_4ch_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a00  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000350  08008b10  08008b10  00018b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e60  08008e60  00020104  2**0
                  CONTENTS
  4 .ARM          00000000  08008e60  08008e60  00020104  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008e60  08008e60  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e60  08008e60  00018e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e64  08008e64  00018e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08008e68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002f58  20000104  08008f6c  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  2000305c  08008f6c  0002305c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023086  00000000  00000000  0002012d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b51  00000000  00000000  000431b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001648  00000000  00000000  00047d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001440  00000000  00000000  00049350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b939  00000000  00000000  0004a790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c68f  00000000  00000000  000660c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000953cd  00000000  00000000  00082758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00117b25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ba4  00000000  00000000  00117b78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000104 	.word	0x20000104
 800012c:	00000000 	.word	0x00000000
 8000130:	08008af8 	.word	0x08008af8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000108 	.word	0x20000108
 800014c:	08008af8 	.word	0x08008af8

08000150 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000156:	4b18      	ldr	r3, [pc, #96]	; (80001b8 <MX_DMA_Init+0x68>)
 8000158:	695b      	ldr	r3, [r3, #20]
 800015a:	4a17      	ldr	r2, [pc, #92]	; (80001b8 <MX_DMA_Init+0x68>)
 800015c:	f043 0301 	orr.w	r3, r3, #1
 8000160:	6153      	str	r3, [r2, #20]
 8000162:	4b15      	ldr	r3, [pc, #84]	; (80001b8 <MX_DMA_Init+0x68>)
 8000164:	695b      	ldr	r3, [r3, #20]
 8000166:	f003 0301 	and.w	r3, r3, #1
 800016a:	607b      	str	r3, [r7, #4]
 800016c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800016e:	2200      	movs	r2, #0
 8000170:	2105      	movs	r1, #5
 8000172:	200e      	movs	r0, #14
 8000174:	f000 fee9 	bl	8000f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000178:	200e      	movs	r0, #14
 800017a:	f000 ff02 	bl	8000f82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 800017e:	2200      	movs	r2, #0
 8000180:	2105      	movs	r1, #5
 8000182:	200f      	movs	r0, #15
 8000184:	f000 fee1 	bl	8000f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000188:	200f      	movs	r0, #15
 800018a:	f000 fefa 	bl	8000f82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800018e:	2200      	movs	r2, #0
 8000190:	2105      	movs	r1, #5
 8000192:	2010      	movs	r0, #16
 8000194:	f000 fed9 	bl	8000f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000198:	2010      	movs	r0, #16
 800019a:	f000 fef2 	bl	8000f82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800019e:	2200      	movs	r2, #0
 80001a0:	2105      	movs	r1, #5
 80001a2:	2011      	movs	r0, #17
 80001a4:	f000 fed1 	bl	8000f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80001a8:	2011      	movs	r0, #17
 80001aa:	f000 feea 	bl	8000f82 <HAL_NVIC_EnableIRQ>

}
 80001ae:	bf00      	nop
 80001b0:	3708      	adds	r7, #8
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	40021000 	.word	0x40021000

080001bc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80001bc:	b580      	push	{r7, lr}
 80001be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  fnd_com_modbus_rtu_init();
 80001c0:	f000 fc5e 	bl	8000a80 <fnd_com_modbus_rtu_init>
  ee_init();
 80001c4:	f000 fccc 	bl	8000b60 <ee_init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(StartTask01, NULL, &Task01_attributes);
 80001c8:	4a10      	ldr	r2, [pc, #64]	; (800020c <MX_FREERTOS_Init+0x50>)
 80001ca:	2100      	movs	r1, #0
 80001cc:	4810      	ldr	r0, [pc, #64]	; (8000210 <MX_FREERTOS_Init+0x54>)
 80001ce:	f003 f8cb 	bl	8003368 <osThreadNew>
 80001d2:	4603      	mov	r3, r0
 80001d4:	4a0f      	ldr	r2, [pc, #60]	; (8000214 <MX_FREERTOS_Init+0x58>)
 80001d6:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(StartTask02, NULL, &Task02_attributes);
 80001d8:	4a0f      	ldr	r2, [pc, #60]	; (8000218 <MX_FREERTOS_Init+0x5c>)
 80001da:	2100      	movs	r1, #0
 80001dc:	480f      	ldr	r0, [pc, #60]	; (800021c <MX_FREERTOS_Init+0x60>)
 80001de:	f003 f8c3 	bl	8003368 <osThreadNew>
 80001e2:	4603      	mov	r3, r0
 80001e4:	4a0e      	ldr	r2, [pc, #56]	; (8000220 <MX_FREERTOS_Init+0x64>)
 80001e6:	6013      	str	r3, [r2, #0]

  /* creation of Task03 */
  Task03Handle = osThreadNew(StartTask03, NULL, &Task03_attributes);
 80001e8:	4a0e      	ldr	r2, [pc, #56]	; (8000224 <MX_FREERTOS_Init+0x68>)
 80001ea:	2100      	movs	r1, #0
 80001ec:	480e      	ldr	r0, [pc, #56]	; (8000228 <MX_FREERTOS_Init+0x6c>)
 80001ee:	f003 f8bb 	bl	8003368 <osThreadNew>
 80001f2:	4603      	mov	r3, r0
 80001f4:	4a0d      	ldr	r2, [pc, #52]	; (800022c <MX_FREERTOS_Init+0x70>)
 80001f6:	6013      	str	r3, [r2, #0]

  /* creation of Task04 */
  Task04Handle = osThreadNew(StartTask04, NULL, &Task04_attributes);
 80001f8:	4a0d      	ldr	r2, [pc, #52]	; (8000230 <MX_FREERTOS_Init+0x74>)
 80001fa:	2100      	movs	r1, #0
 80001fc:	480d      	ldr	r0, [pc, #52]	; (8000234 <MX_FREERTOS_Init+0x78>)
 80001fe:	f003 f8b3 	bl	8003368 <osThreadNew>
 8000202:	4603      	mov	r3, r0
 8000204:	4a0c      	ldr	r2, [pc, #48]	; (8000238 <MX_FREERTOS_Init+0x7c>)
 8000206:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000208:	bf00      	nop
 800020a:	bd80      	pop	{r7, pc}
 800020c:	08008b58 	.word	0x08008b58
 8000210:	0800023d 	.word	0x0800023d
 8000214:	200022f4 	.word	0x200022f4
 8000218:	08008b7c 	.word	0x08008b7c
 800021c:	0800024b 	.word	0x0800024b
 8000220:	200022ec 	.word	0x200022ec
 8000224:	08008ba0 	.word	0x08008ba0
 8000228:	08000259 	.word	0x08000259
 800022c:	200022f8 	.word	0x200022f8
 8000230:	08008bc4 	.word	0x08008bc4
 8000234:	08000281 	.word	0x08000281
 8000238:	200022f0 	.word	0x200022f0

0800023c <StartTask01>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask01 */
void StartTask01(void *argument)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */
  for (;;)
  {
    fnd_com_modbus_rtu_slave1_wait();
 8000244:	f000 fc78 	bl	8000b38 <fnd_com_modbus_rtu_slave1_wait>
 8000248:	e7fc      	b.n	8000244 <StartTask01+0x8>

0800024a <StartTask02>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800024a:	b580      	push	{r7, lr}
 800024c:	b082      	sub	sp, #8
 800024e:	af00      	add	r7, sp, #0
 8000250:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for (;;)
  {
    fnd_com_modbus_rtu_slave2_wait();
 8000252:	f000 fc7b 	bl	8000b4c <fnd_com_modbus_rtu_slave2_wait>
 8000256:	e7fc      	b.n	8000252 <StartTask02+0x8>

08000258 <StartTask03>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  key_com_motor_ctrl_initialize();
 8000260:	f007 fdf8 	bl	8007e54 <key_com_motor_ctrl_initialize>
  /* Infinite loop */
  for (;;)
  {
    osDelay(10);
 8000264:	200a      	movs	r0, #10
 8000266:	f003 f929 	bl	80034bc <osDelay>
    fnd_input_update_value();
 800026a:	f000 fcc3 	bl	8000bf4 <fnd_input_update_value>
    key_com_motor_ctrl_step();
 800026e:	f007 fb5d 	bl	800792c <key_com_motor_ctrl_step>
    fnd_output_update_value(relay);
 8000272:	4802      	ldr	r0, [pc, #8]	; (800027c <StartTask03+0x24>)
 8000274:	f000 fd12 	bl	8000c9c <fnd_output_update_value>
    osDelay(10);
 8000278:	e7f4      	b.n	8000264 <StartTask03+0xc>
 800027a:	bf00      	nop
 800027c:	20003030 	.word	0x20003030

08000280 <StartTask04>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for (;;)
  {
    osDelay(200);
 8000288:	20c8      	movs	r0, #200	; 0xc8
 800028a:	f003 f917 	bl	80034bc <osDelay>
    HAL_GPIO_TogglePin(LED_01_GPIO_Port, LED_01_Pin);
 800028e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000292:	4802      	ldr	r0, [pc, #8]	; (800029c <StartTask04+0x1c>)
 8000294:	f001 fad5 	bl	8001842 <HAL_GPIO_TogglePin>
    osDelay(200);
 8000298:	e7f6      	b.n	8000288 <StartTask04+0x8>
 800029a:	bf00      	nop
 800029c:	40010c00 	.word	0x40010c00

080002a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b08a      	sub	sp, #40	; 0x28
 80002a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a6:	f107 0314 	add.w	r3, r7, #20
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]
 80002b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002b4:	4b59      	ldr	r3, [pc, #356]	; (800041c <MX_GPIO_Init+0x17c>)
 80002b6:	699b      	ldr	r3, [r3, #24]
 80002b8:	4a58      	ldr	r2, [pc, #352]	; (800041c <MX_GPIO_Init+0x17c>)
 80002ba:	f043 0310 	orr.w	r3, r3, #16
 80002be:	6193      	str	r3, [r2, #24]
 80002c0:	4b56      	ldr	r3, [pc, #344]	; (800041c <MX_GPIO_Init+0x17c>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	f003 0310 	and.w	r3, r3, #16
 80002c8:	613b      	str	r3, [r7, #16]
 80002ca:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002cc:	4b53      	ldr	r3, [pc, #332]	; (800041c <MX_GPIO_Init+0x17c>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	4a52      	ldr	r2, [pc, #328]	; (800041c <MX_GPIO_Init+0x17c>)
 80002d2:	f043 0320 	orr.w	r3, r3, #32
 80002d6:	6193      	str	r3, [r2, #24]
 80002d8:	4b50      	ldr	r3, [pc, #320]	; (800041c <MX_GPIO_Init+0x17c>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	f003 0320 	and.w	r3, r3, #32
 80002e0:	60fb      	str	r3, [r7, #12]
 80002e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e4:	4b4d      	ldr	r3, [pc, #308]	; (800041c <MX_GPIO_Init+0x17c>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a4c      	ldr	r2, [pc, #304]	; (800041c <MX_GPIO_Init+0x17c>)
 80002ea:	f043 0304 	orr.w	r3, r3, #4
 80002ee:	6193      	str	r3, [r2, #24]
 80002f0:	4b4a      	ldr	r3, [pc, #296]	; (800041c <MX_GPIO_Init+0x17c>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	f003 0304 	and.w	r3, r3, #4
 80002f8:	60bb      	str	r3, [r7, #8]
 80002fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002fc:	4b47      	ldr	r3, [pc, #284]	; (800041c <MX_GPIO_Init+0x17c>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a46      	ldr	r2, [pc, #280]	; (800041c <MX_GPIO_Init+0x17c>)
 8000302:	f043 0308 	orr.w	r3, r3, #8
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b44      	ldr	r3, [pc, #272]	; (800041c <MX_GPIO_Init+0x17c>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f003 0308 	and.w	r3, r3, #8
 8000310:	607b      	str	r3, [r7, #4]
 8000312:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RS485_EN2_Pin|RLY_08_Pin|RLY_07_Pin|RLY_06_Pin
 8000314:	2200      	movs	r2, #0
 8000316:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800031a:	4841      	ldr	r0, [pc, #260]	; (8000420 <MX_GPIO_Init+0x180>)
 800031c:	f001 fa79 	bl	8001812 <HAL_GPIO_WritePin>
                          |RLY_05_Pin|RS485_EN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RLY_04_Pin|RLY_03_Pin|RLY_02_Pin|RLY_01_Pin
 8000320:	2200      	movs	r2, #0
 8000322:	f244 4107 	movw	r1, #17415	; 0x4407
 8000326:	483f      	ldr	r0, [pc, #252]	; (8000424 <MX_GPIO_Init+0x184>)
 8000328:	f001 fa73 	bl	8001812 <HAL_GPIO_WritePin>
                          |LED_01_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = BTN_02_Pin|BTN_01_Pin|KEY_04_Pin;
 800032c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000332:	2300      	movs	r3, #0
 8000334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000336:	2300      	movs	r3, #0
 8000338:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800033a:	f107 0314 	add.w	r3, r7, #20
 800033e:	4619      	mov	r1, r3
 8000340:	4839      	ldr	r0, [pc, #228]	; (8000428 <MX_GPIO_Init+0x188>)
 8000342:	f001 f8cb 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = KEY_03_Pin|KEY_02_Pin;
 8000346:	2303      	movs	r3, #3
 8000348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800034a:	2300      	movs	r3, #0
 800034c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034e:	2300      	movs	r3, #0
 8000350:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000352:	f107 0314 	add.w	r3, r7, #20
 8000356:	4619      	mov	r1, r3
 8000358:	4834      	ldr	r0, [pc, #208]	; (800042c <MX_GPIO_Init+0x18c>)
 800035a:	f001 f8bf 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = KEY_01_Pin|BTN_12_Pin|BTN_11_Pin|BTN_10_Pin;
 800035e:	f649 0301 	movw	r3, #38913	; 0x9801
 8000362:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000364:	2300      	movs	r3, #0
 8000366:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000368:	2300      	movs	r3, #0
 800036a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800036c:	f107 0314 	add.w	r3, r7, #20
 8000370:	4619      	mov	r1, r3
 8000372:	482b      	ldr	r0, [pc, #172]	; (8000420 <MX_GPIO_Init+0x180>)
 8000374:	f001 f8b2 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = RS485_EN2_Pin|RLY_08_Pin|RLY_07_Pin|RLY_06_Pin
 8000378:	f44f 73f9 	mov.w	r3, #498	; 0x1f2
 800037c:	617b      	str	r3, [r7, #20]
                          |RLY_05_Pin|RS485_EN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800037e:	2301      	movs	r3, #1
 8000380:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000382:	2300      	movs	r3, #0
 8000384:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000386:	2302      	movs	r3, #2
 8000388:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800038a:	f107 0314 	add.w	r3, r7, #20
 800038e:	4619      	mov	r1, r3
 8000390:	4823      	ldr	r0, [pc, #140]	; (8000420 <MX_GPIO_Init+0x180>)
 8000392:	f001 f8a3 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = RLY_04_Pin|RLY_03_Pin|RLY_02_Pin|RLY_01_Pin
 8000396:	f244 4307 	movw	r3, #17415	; 0x4407
 800039a:	617b      	str	r3, [r7, #20]
                          |LED_01_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800039c:	2301      	movs	r3, #1
 800039e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a0:	2300      	movs	r3, #0
 80003a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a4:	2302      	movs	r3, #2
 80003a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003a8:	f107 0314 	add.w	r3, r7, #20
 80003ac:	4619      	mov	r1, r3
 80003ae:	481d      	ldr	r0, [pc, #116]	; (8000424 <MX_GPIO_Init+0x184>)
 80003b0:	f001 f894 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RF_SIG_Pin;
 80003b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003ba:	4b1d      	ldr	r3, [pc, #116]	; (8000430 <MX_GPIO_Init+0x190>)
 80003bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003be:	2300      	movs	r3, #0
 80003c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_SIG_GPIO_Port, &GPIO_InitStruct);
 80003c2:	f107 0314 	add.w	r3, r7, #20
 80003c6:	4619      	mov	r1, r3
 80003c8:	4816      	ldr	r0, [pc, #88]	; (8000424 <MX_GPIO_Init+0x184>)
 80003ca:	f001 f887 	bl	80014dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BTN_09_Pin|BTN_08_Pin|BTN_07_Pin|BTN_06_Pin
 80003ce:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 80003d2:	617b      	str	r3, [r7, #20]
                          |BTN_05_Pin|BTN_04_Pin|BTN_03_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003d4:	2300      	movs	r3, #0
 80003d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d8:	2300      	movs	r3, #0
 80003da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003dc:	f107 0314 	add.w	r3, r7, #20
 80003e0:	4619      	mov	r1, r3
 80003e2:	4810      	ldr	r0, [pc, #64]	; (8000424 <MX_GPIO_Init+0x184>)
 80003e4:	f001 f87a 	bl	80014dc <HAL_GPIO_Init>

  /*Configure peripheral I/O remapping */
  __HAL_AFIO_REMAP_PD01_ENABLE();
 80003e8:	4b12      	ldr	r3, [pc, #72]	; (8000434 <MX_GPIO_Init+0x194>)
 80003ea:	685b      	ldr	r3, [r3, #4]
 80003ec:	627b      	str	r3, [r7, #36]	; 0x24
 80003ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003f0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80003f4:	627b      	str	r3, [r7, #36]	; 0x24
 80003f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80003fc:	627b      	str	r3, [r7, #36]	; 0x24
 80003fe:	4a0d      	ldr	r2, [pc, #52]	; (8000434 <MX_GPIO_Init+0x194>)
 8000400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000402:	6053      	str	r3, [r2, #4]

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000404:	2200      	movs	r2, #0
 8000406:	2105      	movs	r1, #5
 8000408:	2028      	movs	r0, #40	; 0x28
 800040a:	f000 fd9e 	bl	8000f4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800040e:	2028      	movs	r0, #40	; 0x28
 8000410:	f000 fdb7 	bl	8000f82 <HAL_NVIC_EnableIRQ>

}
 8000414:	bf00      	nop
 8000416:	3728      	adds	r7, #40	; 0x28
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}
 800041c:	40021000 	.word	0x40021000
 8000420:	40010800 	.word	0x40010800
 8000424:	40010c00 	.word	0x40010c00
 8000428:	40011000 	.word	0x40011000
 800042c:	40011400 	.word	0x40011400
 8000430:	10110000 	.word	0x10110000
 8000434:	40010000 	.word	0x40010000

08000438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800043c:	f000 fc9e 	bl	8000d7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000440:	f000 f80f 	bl	8000462 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000444:	f7ff ff2c 	bl	80002a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000448:	f7ff fe82 	bl	8000150 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800044c:	f000 f960 	bl	8000710 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000450:	f000 f988 	bl	8000764 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000454:	f002 ff22 	bl	800329c <osKernelInitialize>
  MX_FREERTOS_Init();
 8000458:	f7ff feb0 	bl	80001bc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800045c:	f002 ff50 	bl	8003300 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000460:	e7fe      	b.n	8000460 <main+0x28>

08000462 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000462:	b580      	push	{r7, lr}
 8000464:	b090      	sub	sp, #64	; 0x40
 8000466:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000468:	f107 0318 	add.w	r3, r7, #24
 800046c:	2228      	movs	r2, #40	; 0x28
 800046e:	2100      	movs	r1, #0
 8000470:	4618      	mov	r0, r3
 8000472:	f008 fa77 	bl	8008964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	2200      	movs	r2, #0
 800047a:	601a      	str	r2, [r3, #0]
 800047c:	605a      	str	r2, [r3, #4]
 800047e:	609a      	str	r2, [r3, #8]
 8000480:	60da      	str	r2, [r3, #12]
 8000482:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000484:	2302      	movs	r3, #2
 8000486:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000488:	2301      	movs	r3, #1
 800048a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800048c:	2310      	movs	r3, #16
 800048e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000490:	2302      	movs	r3, #2
 8000492:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000494:	2300      	movs	r3, #0
 8000496:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000498:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800049c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800049e:	f107 0318 	add.w	r3, r7, #24
 80004a2:	4618      	mov	r0, r3
 80004a4:	f001 fa08 	bl	80018b8 <HAL_RCC_OscConfig>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d001      	beq.n	80004b2 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80004ae:	f000 f82b 	bl	8000508 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b2:	230f      	movs	r3, #15
 80004b4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004b6:	2302      	movs	r3, #2
 80004b8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ba:	2300      	movs	r3, #0
 80004bc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004c4:	2300      	movs	r3, #0
 80004c6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	2102      	movs	r1, #2
 80004cc:	4618      	mov	r0, r3
 80004ce:	f001 fc73 	bl	8001db8 <HAL_RCC_ClockConfig>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80004d8:	f000 f816 	bl	8000508 <Error_Handler>
  }
}
 80004dc:	bf00      	nop
 80004de:	3740      	adds	r7, #64	; 0x40
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}

080004e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a04      	ldr	r2, [pc, #16]	; (8000504 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004f2:	4293      	cmp	r3, r2
 80004f4:	d101      	bne.n	80004fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004f6:	f000 fc57 	bl	8000da8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	40000800 	.word	0x40000800

08000508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800050c:	b672      	cpsid	i
}
 800050e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000510:	e7fe      	b.n	8000510 <Error_Handler+0x8>
	...

08000514 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800051a:	4b18      	ldr	r3, [pc, #96]	; (800057c <HAL_MspInit+0x68>)
 800051c:	699b      	ldr	r3, [r3, #24]
 800051e:	4a17      	ldr	r2, [pc, #92]	; (800057c <HAL_MspInit+0x68>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	6193      	str	r3, [r2, #24]
 8000526:	4b15      	ldr	r3, [pc, #84]	; (800057c <HAL_MspInit+0x68>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000532:	4b12      	ldr	r3, [pc, #72]	; (800057c <HAL_MspInit+0x68>)
 8000534:	69db      	ldr	r3, [r3, #28]
 8000536:	4a11      	ldr	r2, [pc, #68]	; (800057c <HAL_MspInit+0x68>)
 8000538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053c:	61d3      	str	r3, [r2, #28]
 800053e:	4b0f      	ldr	r3, [pc, #60]	; (800057c <HAL_MspInit+0x68>)
 8000540:	69db      	ldr	r3, [r3, #28]
 8000542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000546:	607b      	str	r3, [r7, #4]
 8000548:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800054a:	2200      	movs	r2, #0
 800054c:	210f      	movs	r1, #15
 800054e:	f06f 0001 	mvn.w	r0, #1
 8000552:	f000 fcfa 	bl	8000f4a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000556:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <HAL_MspInit+0x6c>)
 8000558:	685b      	ldr	r3, [r3, #4]
 800055a:	60fb      	str	r3, [r7, #12]
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800056a:	60fb      	str	r3, [r7, #12]
 800056c:	4a04      	ldr	r2, [pc, #16]	; (8000580 <HAL_MspInit+0x6c>)
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000572:	bf00      	nop
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40021000 	.word	0x40021000
 8000580:	40010000 	.word	0x40010000

08000584 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08c      	sub	sp, #48	; 0x30
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800058c:	2300      	movs	r3, #0
 800058e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000590:	2300      	movs	r3, #0
 8000592:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000594:	2200      	movs	r2, #0
 8000596:	6879      	ldr	r1, [r7, #4]
 8000598:	201e      	movs	r0, #30
 800059a:	f000 fcd6 	bl	8000f4a <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800059e:	201e      	movs	r0, #30
 80005a0:	f000 fcef 	bl	8000f82 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80005a4:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <HAL_InitTick+0xa0>)
 80005a6:	69db      	ldr	r3, [r3, #28]
 80005a8:	4a1e      	ldr	r2, [pc, #120]	; (8000624 <HAL_InitTick+0xa0>)
 80005aa:	f043 0304 	orr.w	r3, r3, #4
 80005ae:	61d3      	str	r3, [r2, #28]
 80005b0:	4b1c      	ldr	r3, [pc, #112]	; (8000624 <HAL_InitTick+0xa0>)
 80005b2:	69db      	ldr	r3, [r3, #28]
 80005b4:	f003 0304 	and.w	r3, r3, #4
 80005b8:	60fb      	str	r3, [r7, #12]
 80005ba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005bc:	f107 0210 	add.w	r2, r7, #16
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	4611      	mov	r1, r2
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 fd72 	bl	80020b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80005cc:	f001 fd48 	bl	8002060 <HAL_RCC_GetPCLK1Freq>
 80005d0:	4603      	mov	r3, r0
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005d8:	4a13      	ldr	r2, [pc, #76]	; (8000628 <HAL_InitTick+0xa4>)
 80005da:	fba2 2303 	umull	r2, r3, r2, r3
 80005de:	0c9b      	lsrs	r3, r3, #18
 80005e0:	3b01      	subs	r3, #1
 80005e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80005e4:	4b11      	ldr	r3, [pc, #68]	; (800062c <HAL_InitTick+0xa8>)
 80005e6:	4a12      	ldr	r2, [pc, #72]	; (8000630 <HAL_InitTick+0xac>)
 80005e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80005ea:	4b10      	ldr	r3, [pc, #64]	; (800062c <HAL_InitTick+0xa8>)
 80005ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005f0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80005f2:	4a0e      	ldr	r2, [pc, #56]	; (800062c <HAL_InitTick+0xa8>)
 80005f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005f6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80005f8:	4b0c      	ldr	r3, [pc, #48]	; (800062c <HAL_InitTick+0xa8>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005fe:	4b0b      	ldr	r3, [pc, #44]	; (800062c <HAL_InitTick+0xa8>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000604:	4809      	ldr	r0, [pc, #36]	; (800062c <HAL_InitTick+0xa8>)
 8000606:	f001 fda1 	bl	800214c <HAL_TIM_Base_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d104      	bne.n	800061a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000610:	4806      	ldr	r0, [pc, #24]	; (800062c <HAL_InitTick+0xa8>)
 8000612:	f001 fdf3 	bl	80021fc <HAL_TIM_Base_Start_IT>
 8000616:	4603      	mov	r3, r0
 8000618:	e000      	b.n	800061c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800061a:	2301      	movs	r3, #1
}
 800061c:	4618      	mov	r0, r3
 800061e:	3730      	adds	r7, #48	; 0x30
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40021000 	.word	0x40021000
 8000628:	431bde83 	.word	0x431bde83
 800062c:	200022fc 	.word	0x200022fc
 8000630:	40000800 	.word	0x40000800

08000634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000638:	e7fe      	b.n	8000638 <NMI_Handler+0x4>

0800063a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800063a:	b480      	push	{r7}
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800063e:	e7fe      	b.n	800063e <HardFault_Handler+0x4>

08000640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000644:	e7fe      	b.n	8000644 <MemManage_Handler+0x4>

08000646 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000646:	b480      	push	{r7}
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800064a:	e7fe      	b.n	800064a <BusFault_Handler+0x4>

0800064c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000650:	e7fe      	b.n	8000650 <UsageFault_Handler+0x4>

08000652 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr
	...

08000660 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000664:	4802      	ldr	r0, [pc, #8]	; (8000670 <DMA1_Channel4_IRQHandler+0x10>)
 8000666:	f000 fe05 	bl	8001274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20002388 	.word	0x20002388

08000674 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000678:	4802      	ldr	r0, [pc, #8]	; (8000684 <DMA1_Channel5_IRQHandler+0x10>)
 800067a:	f000 fdfb 	bl	8001274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	200023cc 	.word	0x200023cc

08000688 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800068c:	4802      	ldr	r0, [pc, #8]	; (8000698 <DMA1_Channel6_IRQHandler+0x10>)
 800068e:	f000 fdf1 	bl	8001274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20002344 	.word	0x20002344

0800069c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80006a0:	4802      	ldr	r0, [pc, #8]	; (80006ac <DMA1_Channel7_IRQHandler+0x10>)
 80006a2:	f000 fde7 	bl	8001274 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20002410 	.word	0x20002410

080006b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80006b4:	4802      	ldr	r0, [pc, #8]	; (80006c0 <TIM4_IRQHandler+0x10>)
 80006b6:	f001 fdf3 	bl	80022a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	200022fc 	.word	0x200022fc

080006c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  fnd_com_modbus_rtu_uart_idle_irq(&huart1);
 80006c8:	4803      	ldr	r0, [pc, #12]	; (80006d8 <USART1_IRQHandler+0x14>)
 80006ca:	f000 f9f3 	bl	8000ab4 <fnd_com_modbus_rtu_uart_idle_irq>
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80006ce:	4802      	ldr	r0, [pc, #8]	; (80006d8 <USART1_IRQHandler+0x14>)
 80006d0:	f002 f8cc 	bl	800286c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80006d4:	bf00      	nop
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20002454 	.word	0x20002454

080006dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  fnd_com_modbus_rtu_uart_idle_irq(&huart2);
 80006e0:	4803      	ldr	r0, [pc, #12]	; (80006f0 <USART2_IRQHandler+0x14>)
 80006e2:	f000 f9e7 	bl	8000ab4 <fnd_com_modbus_rtu_uart_idle_irq>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80006e6:	4802      	ldr	r0, [pc, #8]	; (80006f0 <USART2_IRQHandler+0x14>)
 80006e8:	f002 f8c0 	bl	800286c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20002498 	.word	0x20002498

080006f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80006f8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80006fc:	f001 f8ba 	bl	8001874 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}

08000704 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	bc80      	pop	{r7}
 800070e:	4770      	bx	lr

08000710 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000714:	4b11      	ldr	r3, [pc, #68]	; (800075c <MX_USART1_UART_Init+0x4c>)
 8000716:	4a12      	ldr	r2, [pc, #72]	; (8000760 <MX_USART1_UART_Init+0x50>)
 8000718:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <MX_USART1_UART_Init+0x4c>)
 800071c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000720:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b0e      	ldr	r3, [pc, #56]	; (800075c <MX_USART1_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <MX_USART1_UART_Init+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <MX_USART1_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <MX_USART1_UART_Init+0x4c>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <MX_USART1_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <MX_USART1_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000746:	4805      	ldr	r0, [pc, #20]	; (800075c <MX_USART1_UART_Init+0x4c>)
 8000748:	f001 ff4a 	bl	80025e0 <HAL_UART_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000752:	f7ff fed9 	bl	8000508 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20002454 	.word	0x20002454
 8000760:	40013800 	.word	0x40013800

08000764 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 800076a:	4a12      	ldr	r2, [pc, #72]	; (80007b4 <MX_USART2_UART_Init+0x50>)
 800076c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800076e:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000770:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000774:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 800078a:	220c      	movs	r2, #12
 800078c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_USART2_UART_Init+0x4c>)
 800079c:	f001 ff20 	bl	80025e0 <HAL_UART_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007a6:	f7ff feaf 	bl	8000508 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20002498 	.word	0x20002498
 80007b4:	40004400 	.word	0x40004400

080007b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	; 0x28
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c0:	f107 0318 	add.w	r3, r7, #24
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a8c      	ldr	r2, [pc, #560]	; (8000a04 <HAL_UART_MspInit+0x24c>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	f040 8087 	bne.w	80008e8 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007da:	4b8b      	ldr	r3, [pc, #556]	; (8000a08 <HAL_UART_MspInit+0x250>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	4a8a      	ldr	r2, [pc, #552]	; (8000a08 <HAL_UART_MspInit+0x250>)
 80007e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e4:	6193      	str	r3, [r2, #24]
 80007e6:	4b88      	ldr	r3, [pc, #544]	; (8000a08 <HAL_UART_MspInit+0x250>)
 80007e8:	699b      	ldr	r3, [r3, #24]
 80007ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	4b85      	ldr	r3, [pc, #532]	; (8000a08 <HAL_UART_MspInit+0x250>)
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	4a84      	ldr	r2, [pc, #528]	; (8000a08 <HAL_UART_MspInit+0x250>)
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	6193      	str	r3, [r2, #24]
 80007fe:	4b82      	ldr	r3, [pc, #520]	; (8000a08 <HAL_UART_MspInit+0x250>)
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	f003 0304 	and.w	r3, r3, #4
 8000806:	613b      	str	r3, [r7, #16]
 8000808:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = RS485_TX1_Pin;
 800080a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800080e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000810:	2302      	movs	r3, #2
 8000812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000814:	2303      	movs	r3, #3
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RS485_TX1_GPIO_Port, &GPIO_InitStruct);
 8000818:	f107 0318 	add.w	r3, r7, #24
 800081c:	4619      	mov	r1, r3
 800081e:	487b      	ldr	r0, [pc, #492]	; (8000a0c <HAL_UART_MspInit+0x254>)
 8000820:	f000 fe5c 	bl	80014dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RS485_RX1_Pin;
 8000824:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000828:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(RS485_RX1_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 0318 	add.w	r3, r7, #24
 8000836:	4619      	mov	r1, r3
 8000838:	4874      	ldr	r0, [pc, #464]	; (8000a0c <HAL_UART_MspInit+0x254>)
 800083a:	f000 fe4f 	bl	80014dc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800083e:	4b74      	ldr	r3, [pc, #464]	; (8000a10 <HAL_UART_MspInit+0x258>)
 8000840:	4a74      	ldr	r2, [pc, #464]	; (8000a14 <HAL_UART_MspInit+0x25c>)
 8000842:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000844:	4b72      	ldr	r3, [pc, #456]	; (8000a10 <HAL_UART_MspInit+0x258>)
 8000846:	2200      	movs	r2, #0
 8000848:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800084a:	4b71      	ldr	r3, [pc, #452]	; (8000a10 <HAL_UART_MspInit+0x258>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000850:	4b6f      	ldr	r3, [pc, #444]	; (8000a10 <HAL_UART_MspInit+0x258>)
 8000852:	2280      	movs	r2, #128	; 0x80
 8000854:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000856:	4b6e      	ldr	r3, [pc, #440]	; (8000a10 <HAL_UART_MspInit+0x258>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800085c:	4b6c      	ldr	r3, [pc, #432]	; (8000a10 <HAL_UART_MspInit+0x258>)
 800085e:	2200      	movs	r2, #0
 8000860:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000862:	4b6b      	ldr	r3, [pc, #428]	; (8000a10 <HAL_UART_MspInit+0x258>)
 8000864:	2220      	movs	r2, #32
 8000866:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000868:	4b69      	ldr	r3, [pc, #420]	; (8000a10 <HAL_UART_MspInit+0x258>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800086e:	4868      	ldr	r0, [pc, #416]	; (8000a10 <HAL_UART_MspInit+0x258>)
 8000870:	f000 fb96 	bl	8000fa0 <HAL_DMA_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800087a:	f7ff fe45 	bl	8000508 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4a63      	ldr	r2, [pc, #396]	; (8000a10 <HAL_UART_MspInit+0x258>)
 8000882:	639a      	str	r2, [r3, #56]	; 0x38
 8000884:	4a62      	ldr	r2, [pc, #392]	; (8000a10 <HAL_UART_MspInit+0x258>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800088a:	4b63      	ldr	r3, [pc, #396]	; (8000a18 <HAL_UART_MspInit+0x260>)
 800088c:	4a63      	ldr	r2, [pc, #396]	; (8000a1c <HAL_UART_MspInit+0x264>)
 800088e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000890:	4b61      	ldr	r3, [pc, #388]	; (8000a18 <HAL_UART_MspInit+0x260>)
 8000892:	2210      	movs	r2, #16
 8000894:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000896:	4b60      	ldr	r3, [pc, #384]	; (8000a18 <HAL_UART_MspInit+0x260>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800089c:	4b5e      	ldr	r3, [pc, #376]	; (8000a18 <HAL_UART_MspInit+0x260>)
 800089e:	2280      	movs	r2, #128	; 0x80
 80008a0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008a2:	4b5d      	ldr	r3, [pc, #372]	; (8000a18 <HAL_UART_MspInit+0x260>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008a8:	4b5b      	ldr	r3, [pc, #364]	; (8000a18 <HAL_UART_MspInit+0x260>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80008ae:	4b5a      	ldr	r3, [pc, #360]	; (8000a18 <HAL_UART_MspInit+0x260>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008b4:	4b58      	ldr	r3, [pc, #352]	; (8000a18 <HAL_UART_MspInit+0x260>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80008ba:	4857      	ldr	r0, [pc, #348]	; (8000a18 <HAL_UART_MspInit+0x260>)
 80008bc:	f000 fb70 	bl	8000fa0 <HAL_DMA_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80008c6:	f7ff fe1f 	bl	8000508 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4a52      	ldr	r2, [pc, #328]	; (8000a18 <HAL_UART_MspInit+0x260>)
 80008ce:	635a      	str	r2, [r3, #52]	; 0x34
 80008d0:	4a51      	ldr	r2, [pc, #324]	; (8000a18 <HAL_UART_MspInit+0x260>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2105      	movs	r1, #5
 80008da:	2025      	movs	r0, #37	; 0x25
 80008dc:	f000 fb35 	bl	8000f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008e0:	2025      	movs	r0, #37	; 0x25
 80008e2:	f000 fb4e 	bl	8000f82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80008e6:	e089      	b.n	80009fc <HAL_UART_MspInit+0x244>
  else if(uartHandle->Instance==USART2)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a4c      	ldr	r2, [pc, #304]	; (8000a20 <HAL_UART_MspInit+0x268>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	f040 8084 	bne.w	80009fc <HAL_UART_MspInit+0x244>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008f4:	4b44      	ldr	r3, [pc, #272]	; (8000a08 <HAL_UART_MspInit+0x250>)
 80008f6:	69db      	ldr	r3, [r3, #28]
 80008f8:	4a43      	ldr	r2, [pc, #268]	; (8000a08 <HAL_UART_MspInit+0x250>)
 80008fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008fe:	61d3      	str	r3, [r2, #28]
 8000900:	4b41      	ldr	r3, [pc, #260]	; (8000a08 <HAL_UART_MspInit+0x250>)
 8000902:	69db      	ldr	r3, [r3, #28]
 8000904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800090c:	4b3e      	ldr	r3, [pc, #248]	; (8000a08 <HAL_UART_MspInit+0x250>)
 800090e:	699b      	ldr	r3, [r3, #24]
 8000910:	4a3d      	ldr	r2, [pc, #244]	; (8000a08 <HAL_UART_MspInit+0x250>)
 8000912:	f043 0304 	orr.w	r3, r3, #4
 8000916:	6193      	str	r3, [r2, #24]
 8000918:	4b3b      	ldr	r3, [pc, #236]	; (8000a08 <HAL_UART_MspInit+0x250>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	f003 0304 	and.w	r3, r3, #4
 8000920:	60bb      	str	r3, [r7, #8]
 8000922:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RS485_TX2_Pin;
 8000924:	2304      	movs	r3, #4
 8000926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000928:	2302      	movs	r3, #2
 800092a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800092c:	2303      	movs	r3, #3
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RS485_TX2_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 0318 	add.w	r3, r7, #24
 8000934:	4619      	mov	r1, r3
 8000936:	4835      	ldr	r0, [pc, #212]	; (8000a0c <HAL_UART_MspInit+0x254>)
 8000938:	f000 fdd0 	bl	80014dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RS485_RX2_Pin;
 800093c:	2308      	movs	r3, #8
 800093e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000940:	2300      	movs	r3, #0
 8000942:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(RS485_RX2_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 0318 	add.w	r3, r7, #24
 800094c:	4619      	mov	r1, r3
 800094e:	482f      	ldr	r0, [pc, #188]	; (8000a0c <HAL_UART_MspInit+0x254>)
 8000950:	f000 fdc4 	bl	80014dc <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000954:	4b33      	ldr	r3, [pc, #204]	; (8000a24 <HAL_UART_MspInit+0x26c>)
 8000956:	4a34      	ldr	r2, [pc, #208]	; (8000a28 <HAL_UART_MspInit+0x270>)
 8000958:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800095a:	4b32      	ldr	r3, [pc, #200]	; (8000a24 <HAL_UART_MspInit+0x26c>)
 800095c:	2200      	movs	r2, #0
 800095e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000960:	4b30      	ldr	r3, [pc, #192]	; (8000a24 <HAL_UART_MspInit+0x26c>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000966:	4b2f      	ldr	r3, [pc, #188]	; (8000a24 <HAL_UART_MspInit+0x26c>)
 8000968:	2280      	movs	r2, #128	; 0x80
 800096a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800096c:	4b2d      	ldr	r3, [pc, #180]	; (8000a24 <HAL_UART_MspInit+0x26c>)
 800096e:	2200      	movs	r2, #0
 8000970:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000972:	4b2c      	ldr	r3, [pc, #176]	; (8000a24 <HAL_UART_MspInit+0x26c>)
 8000974:	2200      	movs	r2, #0
 8000976:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000978:	4b2a      	ldr	r3, [pc, #168]	; (8000a24 <HAL_UART_MspInit+0x26c>)
 800097a:	2220      	movs	r2, #32
 800097c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800097e:	4b29      	ldr	r3, [pc, #164]	; (8000a24 <HAL_UART_MspInit+0x26c>)
 8000980:	2200      	movs	r2, #0
 8000982:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000984:	4827      	ldr	r0, [pc, #156]	; (8000a24 <HAL_UART_MspInit+0x26c>)
 8000986:	f000 fb0b 	bl	8000fa0 <HAL_DMA_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <HAL_UART_MspInit+0x1dc>
      Error_Handler();
 8000990:	f7ff fdba 	bl	8000508 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4a23      	ldr	r2, [pc, #140]	; (8000a24 <HAL_UART_MspInit+0x26c>)
 8000998:	639a      	str	r2, [r3, #56]	; 0x38
 800099a:	4a22      	ldr	r2, [pc, #136]	; (8000a24 <HAL_UART_MspInit+0x26c>)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6253      	str	r3, [r2, #36]	; 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80009a0:	4b22      	ldr	r3, [pc, #136]	; (8000a2c <HAL_UART_MspInit+0x274>)
 80009a2:	4a23      	ldr	r2, [pc, #140]	; (8000a30 <HAL_UART_MspInit+0x278>)
 80009a4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009a6:	4b21      	ldr	r3, [pc, #132]	; (8000a2c <HAL_UART_MspInit+0x274>)
 80009a8:	2210      	movs	r2, #16
 80009aa:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ac:	4b1f      	ldr	r3, [pc, #124]	; (8000a2c <HAL_UART_MspInit+0x274>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009b2:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <HAL_UART_MspInit+0x274>)
 80009b4:	2280      	movs	r2, #128	; 0x80
 80009b6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009b8:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <HAL_UART_MspInit+0x274>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009be:	4b1b      	ldr	r3, [pc, #108]	; (8000a2c <HAL_UART_MspInit+0x274>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80009c4:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <HAL_UART_MspInit+0x274>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009ca:	4b18      	ldr	r3, [pc, #96]	; (8000a2c <HAL_UART_MspInit+0x274>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80009d0:	4816      	ldr	r0, [pc, #88]	; (8000a2c <HAL_UART_MspInit+0x274>)
 80009d2:	f000 fae5 	bl	8000fa0 <HAL_DMA_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <HAL_UART_MspInit+0x228>
      Error_Handler();
 80009dc:	f7ff fd94 	bl	8000508 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <HAL_UART_MspInit+0x274>)
 80009e4:	635a      	str	r2, [r3, #52]	; 0x34
 80009e6:	4a11      	ldr	r2, [pc, #68]	; (8000a2c <HAL_UART_MspInit+0x274>)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2105      	movs	r1, #5
 80009f0:	2026      	movs	r0, #38	; 0x26
 80009f2:	f000 faaa 	bl	8000f4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009f6:	2026      	movs	r0, #38	; 0x26
 80009f8:	f000 fac3 	bl	8000f82 <HAL_NVIC_EnableIRQ>
}
 80009fc:	bf00      	nop
 80009fe:	3728      	adds	r7, #40	; 0x28
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40013800 	.word	0x40013800
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	40010800 	.word	0x40010800
 8000a10:	200023cc 	.word	0x200023cc
 8000a14:	40020058 	.word	0x40020058
 8000a18:	20002388 	.word	0x20002388
 8000a1c:	40020044 	.word	0x40020044
 8000a20:	40004400 	.word	0x40004400
 8000a24:	20002344 	.word	0x20002344
 8000a28:	4002006c 	.word	0x4002006c
 8000a2c:	20002410 	.word	0x20002410
 8000a30:	40020080 	.word	0x40020080

08000a34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a34:	480c      	ldr	r0, [pc, #48]	; (8000a68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a36:	490d      	ldr	r1, [pc, #52]	; (8000a6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a38:	4a0d      	ldr	r2, [pc, #52]	; (8000a70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a3c:	e002      	b.n	8000a44 <LoopCopyDataInit>

08000a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a42:	3304      	adds	r3, #4

08000a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a48:	d3f9      	bcc.n	8000a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a4c:	4c0a      	ldr	r4, [pc, #40]	; (8000a78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a50:	e001      	b.n	8000a56 <LoopFillZerobss>

08000a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a54:	3204      	adds	r2, #4

08000a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a58:	d3fb      	bcc.n	8000a52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a5a:	f7ff fe53 	bl	8000704 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a5e:	f007 ff4d 	bl	80088fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a62:	f7ff fce9 	bl	8000438 <main>
  bx lr
 8000a66:	4770      	bx	lr
  ldr r0, =_sdata
 8000a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a6c:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8000a70:	08008e68 	.word	0x08008e68
  ldr r2, =_sbss
 8000a74:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8000a78:	2000305c 	.word	0x2000305c

08000a7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a7c:	e7fe      	b.n	8000a7c <ADC1_2_IRQHandler>
	...

08000a80 <fnd_com_modbus_rtu_init>:
};
modbus_regs sys_regs;
modbus_slave slaves[2];

void fnd_com_modbus_rtu_init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
    slave_init(&slaves[0], &port[0], 1, &sys_regs);
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <fnd_com_modbus_rtu_init+0x20>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	4906      	ldr	r1, [pc, #24]	; (8000aa4 <fnd_com_modbus_rtu_init+0x24>)
 8000a8a:	4807      	ldr	r0, [pc, #28]	; (8000aa8 <fnd_com_modbus_rtu_init+0x28>)
 8000a8c:	f006 fe82 	bl	8007794 <slave_init>
    slave_init(&slaves[1], &port[1], 2, &sys_regs);
 8000a90:	4b03      	ldr	r3, [pc, #12]	; (8000aa0 <fnd_com_modbus_rtu_init+0x20>)
 8000a92:	2202      	movs	r2, #2
 8000a94:	4905      	ldr	r1, [pc, #20]	; (8000aac <fnd_com_modbus_rtu_init+0x2c>)
 8000a96:	4806      	ldr	r0, [pc, #24]	; (8000ab0 <fnd_com_modbus_rtu_init+0x30>)
 8000a98:	f006 fe7c 	bl	8007794 <slave_init>
}
 8000a9c:	bf00      	nop
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	2000291c 	.word	0x2000291c
 8000aa4:	20000004 	.word	0x20000004
 8000aa8:	200024dc 	.word	0x200024dc
 8000aac:	20000010 	.word	0x20000010
 8000ab0:	200026fc 	.word	0x200026fc

08000ab4 <fnd_com_modbus_rtu_uart_idle_irq>:
void fnd_com_modbus_rtu_uart_idle_irq(UART_HandleTypeDef *huart)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
    if (huart == slaves[0].uart_port->uart)
 8000abc:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <fnd_com_modbus_rtu_uart_idle_irq+0x38>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d103      	bne.n	8000ad0 <fnd_com_modbus_rtu_uart_idle_irq+0x1c>
    {
        slave_uart_idle(&slaves[0]);
 8000ac8:	4808      	ldr	r0, [pc, #32]	; (8000aec <fnd_com_modbus_rtu_uart_idle_irq+0x38>)
 8000aca:	f006 fe9b 	bl	8007804 <slave_uart_idle>
    }
    else if (huart == slaves[1].uart_port->uart)
    {
        slave_uart_idle(&slaves[1]);
    }
}
 8000ace:	e009      	b.n	8000ae4 <fnd_com_modbus_rtu_uart_idle_irq+0x30>
    else if (huart == slaves[1].uart_port->uart)
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <fnd_com_modbus_rtu_uart_idle_irq+0x38>)
 8000ad2:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	d102      	bne.n	8000ae4 <fnd_com_modbus_rtu_uart_idle_irq+0x30>
        slave_uart_idle(&slaves[1]);
 8000ade:	4804      	ldr	r0, [pc, #16]	; (8000af0 <fnd_com_modbus_rtu_uart_idle_irq+0x3c>)
 8000ae0:	f006 fe90 	bl	8007804 <slave_uart_idle>
}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	200024dc 	.word	0x200024dc
 8000af0:	200026fc 	.word	0x200026fc

08000af4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
    if (huart == slaves[0].uart_port->uart)
 8000afc:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <HAL_UART_TxCpltCallback+0x3c>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	687a      	ldr	r2, [r7, #4]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d104      	bne.n	8000b12 <HAL_UART_TxCpltCallback+0x1e>
    {
        slave_set_tx_rx(&slaves[0], rx);
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4809      	ldr	r0, [pc, #36]	; (8000b30 <HAL_UART_TxCpltCallback+0x3c>)
 8000b0c:	f006 feba 	bl	8007884 <slave_set_tx_rx>
    }
    else if (huart == slaves[1].uart_port->uart)
    {
        slave_set_tx_rx(&slaves[1], rx);
    }
}
 8000b10:	e00a      	b.n	8000b28 <HAL_UART_TxCpltCallback+0x34>
    else if (huart == slaves[1].uart_port->uart)
 8000b12:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <HAL_UART_TxCpltCallback+0x3c>)
 8000b14:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d103      	bne.n	8000b28 <HAL_UART_TxCpltCallback+0x34>
        slave_set_tx_rx(&slaves[1], rx);
 8000b20:	2100      	movs	r1, #0
 8000b22:	4804      	ldr	r0, [pc, #16]	; (8000b34 <HAL_UART_TxCpltCallback+0x40>)
 8000b24:	f006 feae 	bl	8007884 <slave_set_tx_rx>
}
 8000b28:	bf00      	nop
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	200024dc 	.word	0x200024dc
 8000b34:	200026fc 	.word	0x200026fc

08000b38 <fnd_com_modbus_rtu_slave1_wait>:

void fnd_com_modbus_rtu_slave1_wait(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
    slave_wait_request(&slaves[0]);
 8000b3c:	4802      	ldr	r0, [pc, #8]	; (8000b48 <fnd_com_modbus_rtu_slave1_wait+0x10>)
 8000b3e:	f006 feba 	bl	80078b6 <slave_wait_request>
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200024dc 	.word	0x200024dc

08000b4c <fnd_com_modbus_rtu_slave2_wait>:
void fnd_com_modbus_rtu_slave2_wait(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
    slave_wait_request(&slaves[1]);
 8000b50:	4802      	ldr	r0, [pc, #8]	; (8000b5c <fnd_com_modbus_rtu_slave2_wait+0x10>)
 8000b52:	f006 feb0 	bl	80078b6 <slave_wait_request>
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200026fc 	.word	0x200026fc

08000b60 <ee_init>:
#define _EE_PAGE_OR_SECTOR PAGE

uint8_t ee_ram[_EE_USE_RAM_BYTE];

bool ee_init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
    return ee_read(0, _EE_USE_RAM_BYTE, NULL);
 8000b64:	2200      	movs	r2, #0
 8000b66:	2180      	movs	r1, #128	; 0x80
 8000b68:	2000      	movs	r0, #0
 8000b6a:	f000 f803 	bl	8000b74 <ee_read>
 8000b6e:	4603      	mov	r3, r0
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <ee_read>:
    HAL_FLASH_Lock();
    return false;
}

bool ee_read(uint32_t startVirtualAddress, uint32_t len, uint8_t *data)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b087      	sub	sp, #28
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
    if ((startVirtualAddress + len) > _EE_SIZE)
 8000b80:	68fa      	ldr	r2, [r7, #12]
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	4413      	add	r3, r2
 8000b86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b8a:	d901      	bls.n	8000b90 <ee_read+0x1c>
    {
        return false;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	e02a      	b.n	8000be6 <ee_read+0x72>
    }
    for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	e020      	b.n	8000bd8 <ee_read+0x64>
    {
        if (data != NULL)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d00b      	beq.n	8000bb4 <ee_read+0x40>
        {
            *data = (*(__IO uint8_t *)(i + _EE_ADDR_INUSE));
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000ba2:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	701a      	strb	r2, [r3, #0]
            data++;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	607b      	str	r3, [r7, #4]
        }
        if (i < _EE_USE_RAM_BYTE)
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	2b7f      	cmp	r3, #127	; 0x7f
 8000bb8:	d80b      	bhi.n	8000bd2 <ee_read+0x5e>
            ee_ram[i] = (*(__IO uint8_t *)(i + _EE_ADDR_INUSE));
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000bc0:	f503 4370 	add.w	r3, r3, #61440	; 0xf000
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	b2d9      	uxtb	r1, r3
 8000bc8:	4a09      	ldr	r2, [pc, #36]	; (8000bf0 <ee_read+0x7c>)
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	4413      	add	r3, r2
 8000bce:	460a      	mov	r2, r1
 8000bd0:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	68ba      	ldr	r2, [r7, #8]
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	4413      	add	r3, r2
 8000bde:	697a      	ldr	r2, [r7, #20]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d3d8      	bcc.n	8000b96 <ee_read+0x22>
    }
    return true;
 8000be4:	2301      	movs	r3, #1
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	371c      	adds	r7, #28
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr
 8000bf0:	20002f1c 	.word	0x20002f1c

08000bf4 <fnd_input_update_value>:
#include "fnd_input.h"
#include "fnd_com.h"

void fnd_input_update_value(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
    uint8_t btn_values[12];
    fnd_input_gpio_read_btns(btn_values);
 8000bfa:	463b      	mov	r3, r7
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f000 f81f 	bl	8000c40 <fnd_input_gpio_read_btns>

    for (uint8_t i = 0; i < (INPUT_BTN_END - INPUT_BTN_START + 1); i++)
 8000c02:	2300      	movs	r3, #0
 8000c04:	73fb      	strb	r3, [r7, #15]
 8000c06:	e010      	b.n	8000c2a <fnd_input_update_value+0x36>
    {
        sys_regs.inputs[INPUT_BTN_START + i] = btn_values[i];
 8000c08:	7bfb      	ldrb	r3, [r7, #15]
 8000c0a:	f107 0210 	add.w	r2, r7, #16
 8000c0e:	4413      	add	r3, r2
 8000c10:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8000c14:	7bfb      	ldrb	r3, [r7, #15]
 8000c16:	3364      	adds	r3, #100	; 0x64
 8000c18:	b211      	sxth	r1, r2
 8000c1a:	4a08      	ldr	r2, [pc, #32]	; (8000c3c <fnd_input_update_value+0x48>)
 8000c1c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000c20:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < (INPUT_BTN_END - INPUT_BTN_START + 1); i++)
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	3301      	adds	r3, #1
 8000c28:	73fb      	strb	r3, [r7, #15]
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
 8000c2c:	2b0b      	cmp	r3, #11
 8000c2e:	d9eb      	bls.n	8000c08 <fnd_input_update_value+0x14>
    }
 8000c30:	bf00      	nop
 8000c32:	bf00      	nop
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	2000291c 	.word	0x2000291c

08000c40 <fnd_input_gpio_read_btns>:
        values[i] = (HAL_GPIO_ReadPin(key_port[i], key_pin[i]) == GPIO_PIN_SET) ? 1 : 0;
    }
}

void fnd_input_gpio_read_btns(uint8_t *values)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 12; i++)
 8000c48:	2300      	movs	r3, #0
 8000c4a:	73fb      	strb	r3, [r7, #15]
 8000c4c:	e019      	b.n	8000c82 <fnd_input_gpio_read_btns+0x42>
    {
        values[i] = (HAL_GPIO_ReadPin(btn_port[i], btn_pin[i]) == GPIO_PIN_SET) ? 1 : 0;
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
 8000c50:	4a10      	ldr	r2, [pc, #64]	; (8000c94 <fnd_input_gpio_read_btns+0x54>)
 8000c52:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c56:	7bfb      	ldrb	r3, [r7, #15]
 8000c58:	490f      	ldr	r1, [pc, #60]	; (8000c98 <fnd_input_gpio_read_btns+0x58>)
 8000c5a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4610      	mov	r0, r2
 8000c62:	f000 fdbf 	bl	80017e4 <HAL_GPIO_ReadPin>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	bf0c      	ite	eq
 8000c6c:	2301      	moveq	r3, #1
 8000c6e:	2300      	movne	r3, #0
 8000c70:	b2d9      	uxtb	r1, r3
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	687a      	ldr	r2, [r7, #4]
 8000c76:	4413      	add	r3, r2
 8000c78:	460a      	mov	r2, r1
 8000c7a:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < 12; i++)
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	73fb      	strb	r3, [r7, #15]
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	2b0b      	cmp	r3, #11
 8000c86:	d9e2      	bls.n	8000c4e <fnd_input_gpio_read_btns+0xe>
    }
 8000c88:	bf00      	nop
 8000c8a:	bf00      	nop
 8000c8c:	3710      	adds	r7, #16
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	2000001c 	.word	0x2000001c
 8000c98:	2000004c 	.word	0x2000004c

08000c9c <fnd_output_update_value>:
#include "fnd_output.h"
#include "fnd_com.h"

void fnd_output_update_value(int16_t *values)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
    uint8_t relay_out_values[8];
    for (uint8_t i = 0; i < (INPUT_RLY_CTRL_END - INPUT_RLY_CTRL_START + 1); i++)
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	75fb      	strb	r3, [r7, #23]
 8000ca8:	e01d      	b.n	8000ce6 <fnd_output_update_value+0x4a>
    {
        sys_regs.inputs[INPUT_RLY_CTRL_START + i] = values[i];
 8000caa:	7dfb      	ldrb	r3, [r7, #23]
 8000cac:	005b      	lsls	r3, r3, #1
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	441a      	add	r2, r3
 8000cb2:	7dfb      	ldrb	r3, [r7, #23]
 8000cb4:	3396      	adds	r3, #150	; 0x96
 8000cb6:	f9b2 1000 	ldrsh.w	r1, [r2]
 8000cba:	4a1a      	ldr	r2, [pc, #104]	; (8000d24 <fnd_output_update_value+0x88>)
 8000cbc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000cc0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        relay_out_values[i] = (uint8_t)sys_regs.inputs[INPUT_RLY_CTRL_START + i];
 8000cc4:	7dfb      	ldrb	r3, [r7, #23]
 8000cc6:	3396      	adds	r3, #150	; 0x96
 8000cc8:	4a16      	ldr	r2, [pc, #88]	; (8000d24 <fnd_output_update_value+0x88>)
 8000cca:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000cce:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8000cd2:	7dfb      	ldrb	r3, [r7, #23]
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	f107 0118 	add.w	r1, r7, #24
 8000cda:	440b      	add	r3, r1
 8000cdc:	f803 2c0c 	strb.w	r2, [r3, #-12]
    for (uint8_t i = 0; i < (INPUT_RLY_CTRL_END - INPUT_RLY_CTRL_START + 1); i++)
 8000ce0:	7dfb      	ldrb	r3, [r7, #23]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	75fb      	strb	r3, [r7, #23]
 8000ce6:	7dfb      	ldrb	r3, [r7, #23]
 8000ce8:	2b07      	cmp	r3, #7
 8000cea:	d9de      	bls.n	8000caa <fnd_output_update_value+0xe>
    }
    fnd_output_gpio_write_relays(relay_out_values);
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f000 f819 	bl	8000d28 <fnd_output_gpio_write_relays>

    for (uint8_t i = 0; i < (HOLDING_COM_END - HOLDING_COM_START + 1); i++)
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	75bb      	strb	r3, [r7, #22]
 8000cfa:	e00a      	b.n	8000d12 <fnd_output_update_value+0x76>
    {
        sys_regs.holdings[HOLDING_COM_START + i] = 0;
 8000cfc:	7dbb      	ldrb	r3, [r7, #22]
 8000cfe:	336e      	adds	r3, #110	; 0x6e
 8000d00:	4a08      	ldr	r2, [pc, #32]	; (8000d24 <fnd_output_update_value+0x88>)
 8000d02:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000d06:	2100      	movs	r1, #0
 8000d08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < (HOLDING_COM_END - HOLDING_COM_START + 1); i++)
 8000d0c:	7dbb      	ldrb	r3, [r7, #22]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	75bb      	strb	r3, [r7, #22]
 8000d12:	7dbb      	ldrb	r3, [r7, #22]
 8000d14:	2b18      	cmp	r3, #24
 8000d16:	d9f1      	bls.n	8000cfc <fnd_output_update_value+0x60>
    }
 8000d18:	bf00      	nop
 8000d1a:	bf00      	nop
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	2000291c 	.word	0x2000291c

08000d28 <fnd_output_gpio_write_relays>:

GPIO_TypeDef *relay_port[8] = {RLY_01_GPIO_Port, RLY_02_GPIO_Port, RLY_03_GPIO_Port, RLY_04_GPIO_Port, RLY_05_GPIO_Port, RLY_06_GPIO_Port, RLY_07_GPIO_Port, RLY_08_GPIO_Port};
uint16_t relay_pin[8] = {RLY_01_Pin, RLY_02_Pin, RLY_03_Pin, RLY_04_Pin, RLY_05_Pin, RLY_06_Pin, RLY_07_Pin, RLY_08_Pin};

void fnd_output_gpio_write_relays(uint8_t *values)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < 8; i++)
 8000d30:	2300      	movs	r3, #0
 8000d32:	73fb      	strb	r3, [r7, #15]
 8000d34:	e016      	b.n	8000d64 <fnd_output_gpio_write_relays+0x3c>
    {
        HAL_GPIO_WritePin(relay_port[i], relay_pin[i], (values[i] == 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
 8000d38:	4a0e      	ldr	r2, [pc, #56]	; (8000d74 <fnd_output_gpio_write_relays+0x4c>)
 8000d3a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	4a0d      	ldr	r2, [pc, #52]	; (8000d78 <fnd_output_gpio_write_relays+0x50>)
 8000d42:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000d46:	7bfb      	ldrb	r3, [r7, #15]
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	bf14      	ite	ne
 8000d52:	2301      	movne	r3, #1
 8000d54:	2300      	moveq	r3, #0
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	461a      	mov	r2, r3
 8000d5a:	f000 fd5a 	bl	8001812 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 8; i++)
 8000d5e:	7bfb      	ldrb	r3, [r7, #15]
 8000d60:	3301      	adds	r3, #1
 8000d62:	73fb      	strb	r3, [r7, #15]
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
 8000d66:	2b07      	cmp	r3, #7
 8000d68:	d9e5      	bls.n	8000d36 <fnd_output_gpio_write_relays+0xe>
    }
}
 8000d6a:	bf00      	nop
 8000d6c:	bf00      	nop
 8000d6e:	3710      	adds	r7, #16
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20000064 	.word	0x20000064
 8000d78:	20000084 	.word	0x20000084

08000d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <HAL_Init+0x28>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a07      	ldr	r2, [pc, #28]	; (8000da4 <HAL_Init+0x28>)
 8000d86:	f043 0310 	orr.w	r3, r3, #16
 8000d8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d8c:	2003      	movs	r0, #3
 8000d8e:	f000 f8d1 	bl	8000f34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d92:	200f      	movs	r0, #15
 8000d94:	f7ff fbf6 	bl	8000584 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d98:	f7ff fbbc 	bl	8000514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40022000 	.word	0x40022000

08000da8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <HAL_IncTick+0x1c>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <HAL_IncTick+0x20>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4413      	add	r3, r2
 8000db8:	4a03      	ldr	r2, [pc, #12]	; (8000dc8 <HAL_IncTick+0x20>)
 8000dba:	6013      	str	r3, [r2, #0]
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr
 8000dc4:	20000098 	.word	0x20000098
 8000dc8:	20002f9c 	.word	0x20002f9c

08000dcc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd0:	4b02      	ldr	r3, [pc, #8]	; (8000ddc <HAL_GetTick+0x10>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr
 8000ddc:	20002f9c 	.word	0x20002f9c

08000de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df0:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e12:	4a04      	ldr	r2, [pc, #16]	; (8000e24 <__NVIC_SetPriorityGrouping+0x44>)
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	60d3      	str	r3, [r2, #12]
}
 8000e18:	bf00      	nop
 8000e1a:	3714      	adds	r7, #20
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bc80      	pop	{r7}
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <__NVIC_GetPriorityGrouping+0x18>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	0a1b      	lsrs	r3, r3, #8
 8000e32:	f003 0307 	and.w	r3, r3, #7
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bc80      	pop	{r7}
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	db0b      	blt.n	8000e6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	f003 021f 	and.w	r2, r3, #31
 8000e5c:	4906      	ldr	r1, [pc, #24]	; (8000e78 <__NVIC_EnableIRQ+0x34>)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	095b      	lsrs	r3, r3, #5
 8000e64:	2001      	movs	r0, #1
 8000e66:	fa00 f202 	lsl.w	r2, r0, r2
 8000e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr
 8000e78:	e000e100 	.word	0xe000e100

08000e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	6039      	str	r1, [r7, #0]
 8000e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	db0a      	blt.n	8000ea6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	490c      	ldr	r1, [pc, #48]	; (8000ec8 <__NVIC_SetPriority+0x4c>)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	0112      	lsls	r2, r2, #4
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	440b      	add	r3, r1
 8000ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea4:	e00a      	b.n	8000ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4908      	ldr	r1, [pc, #32]	; (8000ecc <__NVIC_SetPriority+0x50>)
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	f003 030f 	and.w	r3, r3, #15
 8000eb2:	3b04      	subs	r3, #4
 8000eb4:	0112      	lsls	r2, r2, #4
 8000eb6:	b2d2      	uxtb	r2, r2
 8000eb8:	440b      	add	r3, r1
 8000eba:	761a      	strb	r2, [r3, #24]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bc80      	pop	{r7}
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	e000e100 	.word	0xe000e100
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b089      	sub	sp, #36	; 0x24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	f1c3 0307 	rsb	r3, r3, #7
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	bf28      	it	cs
 8000eee:	2304      	movcs	r3, #4
 8000ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	2b06      	cmp	r3, #6
 8000ef8:	d902      	bls.n	8000f00 <NVIC_EncodePriority+0x30>
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3b03      	subs	r3, #3
 8000efe:	e000      	b.n	8000f02 <NVIC_EncodePriority+0x32>
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	f04f 32ff 	mov.w	r2, #4294967295
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43da      	mvns	r2, r3
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	401a      	ands	r2, r3
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f18:	f04f 31ff 	mov.w	r1, #4294967295
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f22:	43d9      	mvns	r1, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f28:	4313      	orrs	r3, r2
         );
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3724      	adds	r7, #36	; 0x24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr

08000f34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff ff4f 	bl	8000de0 <__NVIC_SetPriorityGrouping>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b086      	sub	sp, #24
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	4603      	mov	r3, r0
 8000f52:	60b9      	str	r1, [r7, #8]
 8000f54:	607a      	str	r2, [r7, #4]
 8000f56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f5c:	f7ff ff64 	bl	8000e28 <__NVIC_GetPriorityGrouping>
 8000f60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	68b9      	ldr	r1, [r7, #8]
 8000f66:	6978      	ldr	r0, [r7, #20]
 8000f68:	f7ff ffb2 	bl	8000ed0 <NVIC_EncodePriority>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f72:	4611      	mov	r1, r2
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff ff81 	bl	8000e7c <__NVIC_SetPriority>
}
 8000f7a:	bf00      	nop
 8000f7c:	3718      	adds	r7, #24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	4603      	mov	r3, r0
 8000f8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff57 	bl	8000e44 <__NVIC_EnableIRQ>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
	...

08000fa0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d101      	bne.n	8000fb6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e043      	b.n	800103e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4b22      	ldr	r3, [pc, #136]	; (8001048 <HAL_DMA_Init+0xa8>)
 8000fbe:	4413      	add	r3, r2
 8000fc0:	4a22      	ldr	r2, [pc, #136]	; (800104c <HAL_DMA_Init+0xac>)
 8000fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc6:	091b      	lsrs	r3, r3, #4
 8000fc8:	009a      	lsls	r2, r3, #2
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a1f      	ldr	r2, [pc, #124]	; (8001050 <HAL_DMA_Init+0xb0>)
 8000fd2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2202      	movs	r2, #2
 8000fd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000fea:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000fee:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000ff8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001004:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001010:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001018:	68fa      	ldr	r2, [r7, #12]
 800101a:	4313      	orrs	r3, r2
 800101c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2200      	movs	r2, #0
 800102a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2201      	movs	r2, #1
 8001030:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2200      	movs	r2, #0
 8001038:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr
 8001048:	bffdfff8 	.word	0xbffdfff8
 800104c:	cccccccd 	.word	0xcccccccd
 8001050:	40020000 	.word	0x40020000

08001054 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
 8001060:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f893 3020 	ldrb.w	r3, [r3, #32]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d101      	bne.n	8001074 <HAL_DMA_Start_IT+0x20>
 8001070:	2302      	movs	r3, #2
 8001072:	e04a      	b.n	800110a <HAL_DMA_Start_IT+0xb6>
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	2201      	movs	r2, #1
 8001078:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001082:	2b01      	cmp	r3, #1
 8001084:	d13a      	bne.n	80010fc <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	2202      	movs	r2, #2
 800108a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	2200      	movs	r2, #0
 8001092:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f022 0201 	bic.w	r2, r2, #1
 80010a2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	68b9      	ldr	r1, [r7, #8]
 80010aa:	68f8      	ldr	r0, [r7, #12]
 80010ac:	f000 f9e8 	bl	8001480 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d008      	beq.n	80010ca <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f042 020e 	orr.w	r2, r2, #14
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	e00f      	b.n	80010ea <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f022 0204 	bic.w	r2, r2, #4
 80010d8:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f042 020a 	orr.w	r2, r2, #10
 80010e8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f042 0201 	orr.w	r2, r2, #1
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	e005      	b.n	8001108 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001104:	2302      	movs	r3, #2
 8001106:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001108:	7dfb      	ldrb	r3, [r7, #23]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001112:	b480      	push	{r7}
 8001114:	b085      	sub	sp, #20
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800111a:	2300      	movs	r3, #0
 800111c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001124:	2b02      	cmp	r3, #2
 8001126:	d008      	beq.n	800113a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2204      	movs	r2, #4
 800112c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e020      	b.n	800117c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f022 020e 	bic.w	r2, r2, #14
 8001148:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f022 0201 	bic.w	r2, r2, #1
 8001158:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001162:	2101      	movs	r1, #1
 8001164:	fa01 f202 	lsl.w	r2, r1, r2
 8001168:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2201      	movs	r2, #1
 800116e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800117a:	7bfb      	ldrb	r3, [r7, #15]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr
	...

08001188 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001190:	2300      	movs	r3, #0
 8001192:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800119a:	2b02      	cmp	r3, #2
 800119c:	d005      	beq.n	80011aa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2204      	movs	r2, #4
 80011a2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	73fb      	strb	r3, [r7, #15]
 80011a8:	e051      	b.n	800124e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f022 020e 	bic.w	r2, r2, #14
 80011b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f022 0201 	bic.w	r2, r2, #1
 80011c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a22      	ldr	r2, [pc, #136]	; (8001258 <HAL_DMA_Abort_IT+0xd0>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d029      	beq.n	8001228 <HAL_DMA_Abort_IT+0xa0>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a20      	ldr	r2, [pc, #128]	; (800125c <HAL_DMA_Abort_IT+0xd4>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d022      	beq.n	8001224 <HAL_DMA_Abort_IT+0x9c>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a1f      	ldr	r2, [pc, #124]	; (8001260 <HAL_DMA_Abort_IT+0xd8>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d01a      	beq.n	800121e <HAL_DMA_Abort_IT+0x96>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a1d      	ldr	r2, [pc, #116]	; (8001264 <HAL_DMA_Abort_IT+0xdc>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d012      	beq.n	8001218 <HAL_DMA_Abort_IT+0x90>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a1c      	ldr	r2, [pc, #112]	; (8001268 <HAL_DMA_Abort_IT+0xe0>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d00a      	beq.n	8001212 <HAL_DMA_Abort_IT+0x8a>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a1a      	ldr	r2, [pc, #104]	; (800126c <HAL_DMA_Abort_IT+0xe4>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d102      	bne.n	800120c <HAL_DMA_Abort_IT+0x84>
 8001206:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800120a:	e00e      	b.n	800122a <HAL_DMA_Abort_IT+0xa2>
 800120c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001210:	e00b      	b.n	800122a <HAL_DMA_Abort_IT+0xa2>
 8001212:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001216:	e008      	b.n	800122a <HAL_DMA_Abort_IT+0xa2>
 8001218:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800121c:	e005      	b.n	800122a <HAL_DMA_Abort_IT+0xa2>
 800121e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001222:	e002      	b.n	800122a <HAL_DMA_Abort_IT+0xa2>
 8001224:	2310      	movs	r3, #16
 8001226:	e000      	b.n	800122a <HAL_DMA_Abort_IT+0xa2>
 8001228:	2301      	movs	r3, #1
 800122a:	4a11      	ldr	r2, [pc, #68]	; (8001270 <HAL_DMA_Abort_IT+0xe8>)
 800122c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2201      	movs	r2, #1
 8001232:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	4798      	blx	r3
    } 
  }
  return status;
 800124e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40020008 	.word	0x40020008
 800125c:	4002001c 	.word	0x4002001c
 8001260:	40020030 	.word	0x40020030
 8001264:	40020044 	.word	0x40020044
 8001268:	40020058 	.word	0x40020058
 800126c:	4002006c 	.word	0x4002006c
 8001270:	40020000 	.word	0x40020000

08001274 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001290:	2204      	movs	r2, #4
 8001292:	409a      	lsls	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4013      	ands	r3, r2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d04f      	beq.n	800133c <HAL_DMA_IRQHandler+0xc8>
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	f003 0304 	and.w	r3, r3, #4
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d04a      	beq.n	800133c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0320 	and.w	r3, r3, #32
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d107      	bne.n	80012c4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 0204 	bic.w	r2, r2, #4
 80012c2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a66      	ldr	r2, [pc, #408]	; (8001464 <HAL_DMA_IRQHandler+0x1f0>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d029      	beq.n	8001322 <HAL_DMA_IRQHandler+0xae>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a65      	ldr	r2, [pc, #404]	; (8001468 <HAL_DMA_IRQHandler+0x1f4>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d022      	beq.n	800131e <HAL_DMA_IRQHandler+0xaa>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a63      	ldr	r2, [pc, #396]	; (800146c <HAL_DMA_IRQHandler+0x1f8>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d01a      	beq.n	8001318 <HAL_DMA_IRQHandler+0xa4>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a62      	ldr	r2, [pc, #392]	; (8001470 <HAL_DMA_IRQHandler+0x1fc>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d012      	beq.n	8001312 <HAL_DMA_IRQHandler+0x9e>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a60      	ldr	r2, [pc, #384]	; (8001474 <HAL_DMA_IRQHandler+0x200>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d00a      	beq.n	800130c <HAL_DMA_IRQHandler+0x98>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a5f      	ldr	r2, [pc, #380]	; (8001478 <HAL_DMA_IRQHandler+0x204>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d102      	bne.n	8001306 <HAL_DMA_IRQHandler+0x92>
 8001300:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001304:	e00e      	b.n	8001324 <HAL_DMA_IRQHandler+0xb0>
 8001306:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800130a:	e00b      	b.n	8001324 <HAL_DMA_IRQHandler+0xb0>
 800130c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001310:	e008      	b.n	8001324 <HAL_DMA_IRQHandler+0xb0>
 8001312:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001316:	e005      	b.n	8001324 <HAL_DMA_IRQHandler+0xb0>
 8001318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800131c:	e002      	b.n	8001324 <HAL_DMA_IRQHandler+0xb0>
 800131e:	2340      	movs	r3, #64	; 0x40
 8001320:	e000      	b.n	8001324 <HAL_DMA_IRQHandler+0xb0>
 8001322:	2304      	movs	r3, #4
 8001324:	4a55      	ldr	r2, [pc, #340]	; (800147c <HAL_DMA_IRQHandler+0x208>)
 8001326:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800132c:	2b00      	cmp	r3, #0
 800132e:	f000 8094 	beq.w	800145a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800133a:	e08e      	b.n	800145a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	2202      	movs	r2, #2
 8001342:	409a      	lsls	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4013      	ands	r3, r2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d056      	beq.n	80013fa <HAL_DMA_IRQHandler+0x186>
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d051      	beq.n	80013fa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0320 	and.w	r3, r3, #32
 8001360:	2b00      	cmp	r3, #0
 8001362:	d10b      	bne.n	800137c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f022 020a 	bic.w	r2, r2, #10
 8001372:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a38      	ldr	r2, [pc, #224]	; (8001464 <HAL_DMA_IRQHandler+0x1f0>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d029      	beq.n	80013da <HAL_DMA_IRQHandler+0x166>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a37      	ldr	r2, [pc, #220]	; (8001468 <HAL_DMA_IRQHandler+0x1f4>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d022      	beq.n	80013d6 <HAL_DMA_IRQHandler+0x162>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a35      	ldr	r2, [pc, #212]	; (800146c <HAL_DMA_IRQHandler+0x1f8>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d01a      	beq.n	80013d0 <HAL_DMA_IRQHandler+0x15c>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a34      	ldr	r2, [pc, #208]	; (8001470 <HAL_DMA_IRQHandler+0x1fc>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d012      	beq.n	80013ca <HAL_DMA_IRQHandler+0x156>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a32      	ldr	r2, [pc, #200]	; (8001474 <HAL_DMA_IRQHandler+0x200>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d00a      	beq.n	80013c4 <HAL_DMA_IRQHandler+0x150>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a31      	ldr	r2, [pc, #196]	; (8001478 <HAL_DMA_IRQHandler+0x204>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d102      	bne.n	80013be <HAL_DMA_IRQHandler+0x14a>
 80013b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80013bc:	e00e      	b.n	80013dc <HAL_DMA_IRQHandler+0x168>
 80013be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013c2:	e00b      	b.n	80013dc <HAL_DMA_IRQHandler+0x168>
 80013c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013c8:	e008      	b.n	80013dc <HAL_DMA_IRQHandler+0x168>
 80013ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ce:	e005      	b.n	80013dc <HAL_DMA_IRQHandler+0x168>
 80013d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013d4:	e002      	b.n	80013dc <HAL_DMA_IRQHandler+0x168>
 80013d6:	2320      	movs	r3, #32
 80013d8:	e000      	b.n	80013dc <HAL_DMA_IRQHandler+0x168>
 80013da:	2302      	movs	r3, #2
 80013dc:	4a27      	ldr	r2, [pc, #156]	; (800147c <HAL_DMA_IRQHandler+0x208>)
 80013de:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d034      	beq.n	800145a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80013f8:	e02f      	b.n	800145a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	2208      	movs	r2, #8
 8001400:	409a      	lsls	r2, r3
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	4013      	ands	r3, r2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d028      	beq.n	800145c <HAL_DMA_IRQHandler+0x1e8>
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	f003 0308 	and.w	r3, r3, #8
 8001410:	2b00      	cmp	r3, #0
 8001412:	d023      	beq.n	800145c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 020e 	bic.w	r2, r2, #14
 8001422:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800142c:	2101      	movs	r1, #1
 800142e:	fa01 f202 	lsl.w	r2, r1, r2
 8001432:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2201      	movs	r2, #1
 8001438:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2201      	movs	r2, #1
 800143e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	2b00      	cmp	r3, #0
 8001450:	d004      	beq.n	800145c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	4798      	blx	r3
    }
  }
  return;
 800145a:	bf00      	nop
 800145c:	bf00      	nop
}
 800145e:	3710      	adds	r7, #16
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40020008 	.word	0x40020008
 8001468:	4002001c 	.word	0x4002001c
 800146c:	40020030 	.word	0x40020030
 8001470:	40020044 	.word	0x40020044
 8001474:	40020058 	.word	0x40020058
 8001478:	4002006c 	.word	0x4002006c
 800147c:	40020000 	.word	0x40020000

08001480 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
 800148c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001496:	2101      	movs	r1, #1
 8001498:	fa01 f202 	lsl.w	r2, r1, r2
 800149c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b10      	cmp	r3, #16
 80014ac:	d108      	bne.n	80014c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80014be:	e007      	b.n	80014d0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	68ba      	ldr	r2, [r7, #8]
 80014c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	60da      	str	r2, [r3, #12]
}
 80014d0:	bf00      	nop
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
	...

080014dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014dc:	b480      	push	{r7}
 80014de:	b08b      	sub	sp, #44	; 0x2c
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014e6:	2300      	movs	r3, #0
 80014e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014ea:	2300      	movs	r3, #0
 80014ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ee:	e169      	b.n	80017c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014f0:	2201      	movs	r2, #1
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	69fa      	ldr	r2, [r7, #28]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	429a      	cmp	r2, r3
 800150a:	f040 8158 	bne.w	80017be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	4a9a      	ldr	r2, [pc, #616]	; (800177c <HAL_GPIO_Init+0x2a0>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d05e      	beq.n	80015d6 <HAL_GPIO_Init+0xfa>
 8001518:	4a98      	ldr	r2, [pc, #608]	; (800177c <HAL_GPIO_Init+0x2a0>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d875      	bhi.n	800160a <HAL_GPIO_Init+0x12e>
 800151e:	4a98      	ldr	r2, [pc, #608]	; (8001780 <HAL_GPIO_Init+0x2a4>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d058      	beq.n	80015d6 <HAL_GPIO_Init+0xfa>
 8001524:	4a96      	ldr	r2, [pc, #600]	; (8001780 <HAL_GPIO_Init+0x2a4>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d86f      	bhi.n	800160a <HAL_GPIO_Init+0x12e>
 800152a:	4a96      	ldr	r2, [pc, #600]	; (8001784 <HAL_GPIO_Init+0x2a8>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d052      	beq.n	80015d6 <HAL_GPIO_Init+0xfa>
 8001530:	4a94      	ldr	r2, [pc, #592]	; (8001784 <HAL_GPIO_Init+0x2a8>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d869      	bhi.n	800160a <HAL_GPIO_Init+0x12e>
 8001536:	4a94      	ldr	r2, [pc, #592]	; (8001788 <HAL_GPIO_Init+0x2ac>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d04c      	beq.n	80015d6 <HAL_GPIO_Init+0xfa>
 800153c:	4a92      	ldr	r2, [pc, #584]	; (8001788 <HAL_GPIO_Init+0x2ac>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d863      	bhi.n	800160a <HAL_GPIO_Init+0x12e>
 8001542:	4a92      	ldr	r2, [pc, #584]	; (800178c <HAL_GPIO_Init+0x2b0>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d046      	beq.n	80015d6 <HAL_GPIO_Init+0xfa>
 8001548:	4a90      	ldr	r2, [pc, #576]	; (800178c <HAL_GPIO_Init+0x2b0>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d85d      	bhi.n	800160a <HAL_GPIO_Init+0x12e>
 800154e:	2b12      	cmp	r3, #18
 8001550:	d82a      	bhi.n	80015a8 <HAL_GPIO_Init+0xcc>
 8001552:	2b12      	cmp	r3, #18
 8001554:	d859      	bhi.n	800160a <HAL_GPIO_Init+0x12e>
 8001556:	a201      	add	r2, pc, #4	; (adr r2, 800155c <HAL_GPIO_Init+0x80>)
 8001558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800155c:	080015d7 	.word	0x080015d7
 8001560:	080015b1 	.word	0x080015b1
 8001564:	080015c3 	.word	0x080015c3
 8001568:	08001605 	.word	0x08001605
 800156c:	0800160b 	.word	0x0800160b
 8001570:	0800160b 	.word	0x0800160b
 8001574:	0800160b 	.word	0x0800160b
 8001578:	0800160b 	.word	0x0800160b
 800157c:	0800160b 	.word	0x0800160b
 8001580:	0800160b 	.word	0x0800160b
 8001584:	0800160b 	.word	0x0800160b
 8001588:	0800160b 	.word	0x0800160b
 800158c:	0800160b 	.word	0x0800160b
 8001590:	0800160b 	.word	0x0800160b
 8001594:	0800160b 	.word	0x0800160b
 8001598:	0800160b 	.word	0x0800160b
 800159c:	0800160b 	.word	0x0800160b
 80015a0:	080015b9 	.word	0x080015b9
 80015a4:	080015cd 	.word	0x080015cd
 80015a8:	4a79      	ldr	r2, [pc, #484]	; (8001790 <HAL_GPIO_Init+0x2b4>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d013      	beq.n	80015d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015ae:	e02c      	b.n	800160a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	623b      	str	r3, [r7, #32]
          break;
 80015b6:	e029      	b.n	800160c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	3304      	adds	r3, #4
 80015be:	623b      	str	r3, [r7, #32]
          break;
 80015c0:	e024      	b.n	800160c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	3308      	adds	r3, #8
 80015c8:	623b      	str	r3, [r7, #32]
          break;
 80015ca:	e01f      	b.n	800160c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	330c      	adds	r3, #12
 80015d2:	623b      	str	r3, [r7, #32]
          break;
 80015d4:	e01a      	b.n	800160c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d102      	bne.n	80015e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015de:	2304      	movs	r3, #4
 80015e0:	623b      	str	r3, [r7, #32]
          break;
 80015e2:	e013      	b.n	800160c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d105      	bne.n	80015f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015ec:	2308      	movs	r3, #8
 80015ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69fa      	ldr	r2, [r7, #28]
 80015f4:	611a      	str	r2, [r3, #16]
          break;
 80015f6:	e009      	b.n	800160c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015f8:	2308      	movs	r3, #8
 80015fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	69fa      	ldr	r2, [r7, #28]
 8001600:	615a      	str	r2, [r3, #20]
          break;
 8001602:	e003      	b.n	800160c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001604:	2300      	movs	r3, #0
 8001606:	623b      	str	r3, [r7, #32]
          break;
 8001608:	e000      	b.n	800160c <HAL_GPIO_Init+0x130>
          break;
 800160a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	2bff      	cmp	r3, #255	; 0xff
 8001610:	d801      	bhi.n	8001616 <HAL_GPIO_Init+0x13a>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	e001      	b.n	800161a <HAL_GPIO_Init+0x13e>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	3304      	adds	r3, #4
 800161a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	2bff      	cmp	r3, #255	; 0xff
 8001620:	d802      	bhi.n	8001628 <HAL_GPIO_Init+0x14c>
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	e002      	b.n	800162e <HAL_GPIO_Init+0x152>
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	3b08      	subs	r3, #8
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	210f      	movs	r1, #15
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	fa01 f303 	lsl.w	r3, r1, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	401a      	ands	r2, r3
 8001640:	6a39      	ldr	r1, [r7, #32]
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	fa01 f303 	lsl.w	r3, r1, r3
 8001648:	431a      	orrs	r2, r3
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 80b1 	beq.w	80017be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800165c:	4b4d      	ldr	r3, [pc, #308]	; (8001794 <HAL_GPIO_Init+0x2b8>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	4a4c      	ldr	r2, [pc, #304]	; (8001794 <HAL_GPIO_Init+0x2b8>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	6193      	str	r3, [r2, #24]
 8001668:	4b4a      	ldr	r3, [pc, #296]	; (8001794 <HAL_GPIO_Init+0x2b8>)
 800166a:	699b      	ldr	r3, [r3, #24]
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001674:	4a48      	ldr	r2, [pc, #288]	; (8001798 <HAL_GPIO_Init+0x2bc>)
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	089b      	lsrs	r3, r3, #2
 800167a:	3302      	adds	r3, #2
 800167c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001680:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	f003 0303 	and.w	r3, r3, #3
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	220f      	movs	r2, #15
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	4013      	ands	r3, r2
 8001696:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a40      	ldr	r2, [pc, #256]	; (800179c <HAL_GPIO_Init+0x2c0>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d013      	beq.n	80016c8 <HAL_GPIO_Init+0x1ec>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4a3f      	ldr	r2, [pc, #252]	; (80017a0 <HAL_GPIO_Init+0x2c4>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d00d      	beq.n	80016c4 <HAL_GPIO_Init+0x1e8>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a3e      	ldr	r2, [pc, #248]	; (80017a4 <HAL_GPIO_Init+0x2c8>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d007      	beq.n	80016c0 <HAL_GPIO_Init+0x1e4>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4a3d      	ldr	r2, [pc, #244]	; (80017a8 <HAL_GPIO_Init+0x2cc>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d101      	bne.n	80016bc <HAL_GPIO_Init+0x1e0>
 80016b8:	2303      	movs	r3, #3
 80016ba:	e006      	b.n	80016ca <HAL_GPIO_Init+0x1ee>
 80016bc:	2304      	movs	r3, #4
 80016be:	e004      	b.n	80016ca <HAL_GPIO_Init+0x1ee>
 80016c0:	2302      	movs	r3, #2
 80016c2:	e002      	b.n	80016ca <HAL_GPIO_Init+0x1ee>
 80016c4:	2301      	movs	r3, #1
 80016c6:	e000      	b.n	80016ca <HAL_GPIO_Init+0x1ee>
 80016c8:	2300      	movs	r3, #0
 80016ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016cc:	f002 0203 	and.w	r2, r2, #3
 80016d0:	0092      	lsls	r2, r2, #2
 80016d2:	4093      	lsls	r3, r2
 80016d4:	68fa      	ldr	r2, [r7, #12]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016da:	492f      	ldr	r1, [pc, #188]	; (8001798 <HAL_GPIO_Init+0x2bc>)
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	089b      	lsrs	r3, r3, #2
 80016e0:	3302      	adds	r3, #2
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d006      	beq.n	8001702 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80016f4:	4b2d      	ldr	r3, [pc, #180]	; (80017ac <HAL_GPIO_Init+0x2d0>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	492c      	ldr	r1, [pc, #176]	; (80017ac <HAL_GPIO_Init+0x2d0>)
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	600b      	str	r3, [r1, #0]
 8001700:	e006      	b.n	8001710 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001702:	4b2a      	ldr	r3, [pc, #168]	; (80017ac <HAL_GPIO_Init+0x2d0>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	43db      	mvns	r3, r3
 800170a:	4928      	ldr	r1, [pc, #160]	; (80017ac <HAL_GPIO_Init+0x2d0>)
 800170c:	4013      	ands	r3, r2
 800170e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d006      	beq.n	800172a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800171c:	4b23      	ldr	r3, [pc, #140]	; (80017ac <HAL_GPIO_Init+0x2d0>)
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	4922      	ldr	r1, [pc, #136]	; (80017ac <HAL_GPIO_Init+0x2d0>)
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	4313      	orrs	r3, r2
 8001726:	604b      	str	r3, [r1, #4]
 8001728:	e006      	b.n	8001738 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800172a:	4b20      	ldr	r3, [pc, #128]	; (80017ac <HAL_GPIO_Init+0x2d0>)
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	43db      	mvns	r3, r3
 8001732:	491e      	ldr	r1, [pc, #120]	; (80017ac <HAL_GPIO_Init+0x2d0>)
 8001734:	4013      	ands	r3, r2
 8001736:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d006      	beq.n	8001752 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001744:	4b19      	ldr	r3, [pc, #100]	; (80017ac <HAL_GPIO_Init+0x2d0>)
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	4918      	ldr	r1, [pc, #96]	; (80017ac <HAL_GPIO_Init+0x2d0>)
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	4313      	orrs	r3, r2
 800174e:	608b      	str	r3, [r1, #8]
 8001750:	e006      	b.n	8001760 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001752:	4b16      	ldr	r3, [pc, #88]	; (80017ac <HAL_GPIO_Init+0x2d0>)
 8001754:	689a      	ldr	r2, [r3, #8]
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	43db      	mvns	r3, r3
 800175a:	4914      	ldr	r1, [pc, #80]	; (80017ac <HAL_GPIO_Init+0x2d0>)
 800175c:	4013      	ands	r3, r2
 800175e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d021      	beq.n	80017b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800176c:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <HAL_GPIO_Init+0x2d0>)
 800176e:	68da      	ldr	r2, [r3, #12]
 8001770:	490e      	ldr	r1, [pc, #56]	; (80017ac <HAL_GPIO_Init+0x2d0>)
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	4313      	orrs	r3, r2
 8001776:	60cb      	str	r3, [r1, #12]
 8001778:	e021      	b.n	80017be <HAL_GPIO_Init+0x2e2>
 800177a:	bf00      	nop
 800177c:	10320000 	.word	0x10320000
 8001780:	10310000 	.word	0x10310000
 8001784:	10220000 	.word	0x10220000
 8001788:	10210000 	.word	0x10210000
 800178c:	10120000 	.word	0x10120000
 8001790:	10110000 	.word	0x10110000
 8001794:	40021000 	.word	0x40021000
 8001798:	40010000 	.word	0x40010000
 800179c:	40010800 	.word	0x40010800
 80017a0:	40010c00 	.word	0x40010c00
 80017a4:	40011000 	.word	0x40011000
 80017a8:	40011400 	.word	0x40011400
 80017ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017b0:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <HAL_GPIO_Init+0x304>)
 80017b2:	68da      	ldr	r2, [r3, #12]
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	43db      	mvns	r3, r3
 80017b8:	4909      	ldr	r1, [pc, #36]	; (80017e0 <HAL_GPIO_Init+0x304>)
 80017ba:	4013      	ands	r3, r2
 80017bc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	3301      	adds	r3, #1
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	fa22 f303 	lsr.w	r3, r2, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f47f ae8e 	bne.w	80014f0 <HAL_GPIO_Init+0x14>
  }
}
 80017d4:	bf00      	nop
 80017d6:	bf00      	nop
 80017d8:	372c      	adds	r7, #44	; 0x2c
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr
 80017e0:	40010400 	.word	0x40010400

080017e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	460b      	mov	r3, r1
 80017ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689a      	ldr	r2, [r3, #8]
 80017f4:	887b      	ldrh	r3, [r7, #2]
 80017f6:	4013      	ands	r3, r2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d002      	beq.n	8001802 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017fc:	2301      	movs	r3, #1
 80017fe:	73fb      	strb	r3, [r7, #15]
 8001800:	e001      	b.n	8001806 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001802:	2300      	movs	r3, #0
 8001804:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001806:	7bfb      	ldrb	r3, [r7, #15]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr

08001812 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001812:	b480      	push	{r7}
 8001814:	b083      	sub	sp, #12
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	460b      	mov	r3, r1
 800181c:	807b      	strh	r3, [r7, #2]
 800181e:	4613      	mov	r3, r2
 8001820:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001822:	787b      	ldrb	r3, [r7, #1]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001828:	887a      	ldrh	r2, [r7, #2]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800182e:	e003      	b.n	8001838 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001830:	887b      	ldrh	r3, [r7, #2]
 8001832:	041a      	lsls	r2, r3, #16
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	611a      	str	r2, [r3, #16]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr

08001842 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001842:	b480      	push	{r7}
 8001844:	b085      	sub	sp, #20
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	460b      	mov	r3, r1
 800184c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001854:	887a      	ldrh	r2, [r7, #2]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	4013      	ands	r3, r2
 800185a:	041a      	lsls	r2, r3, #16
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	43d9      	mvns	r1, r3
 8001860:	887b      	ldrh	r3, [r7, #2]
 8001862:	400b      	ands	r3, r1
 8001864:	431a      	orrs	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	611a      	str	r2, [r3, #16]
}
 800186a:	bf00      	nop
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr

08001874 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800187e:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001880:	695a      	ldr	r2, [r3, #20]
 8001882:	88fb      	ldrh	r3, [r7, #6]
 8001884:	4013      	ands	r3, r2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d006      	beq.n	8001898 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800188a:	4a05      	ldr	r2, [pc, #20]	; (80018a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800188c:	88fb      	ldrh	r3, [r7, #6]
 800188e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001890:	88fb      	ldrh	r3, [r7, #6]
 8001892:	4618      	mov	r0, r3
 8001894:	f000 f806 	bl	80018a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40010400 	.word	0x40010400

080018a4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	4603      	mov	r3, r0
 80018ac:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr

080018b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e26c      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f000 8087 	beq.w	80019e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018d8:	4b92      	ldr	r3, [pc, #584]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 030c 	and.w	r3, r3, #12
 80018e0:	2b04      	cmp	r3, #4
 80018e2:	d00c      	beq.n	80018fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018e4:	4b8f      	ldr	r3, [pc, #572]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 030c 	and.w	r3, r3, #12
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	d112      	bne.n	8001916 <HAL_RCC_OscConfig+0x5e>
 80018f0:	4b8c      	ldr	r3, [pc, #560]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018fc:	d10b      	bne.n	8001916 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018fe:	4b89      	ldr	r3, [pc, #548]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d06c      	beq.n	80019e4 <HAL_RCC_OscConfig+0x12c>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d168      	bne.n	80019e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e246      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800191e:	d106      	bne.n	800192e <HAL_RCC_OscConfig+0x76>
 8001920:	4b80      	ldr	r3, [pc, #512]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a7f      	ldr	r2, [pc, #508]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001926:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800192a:	6013      	str	r3, [r2, #0]
 800192c:	e02e      	b.n	800198c <HAL_RCC_OscConfig+0xd4>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d10c      	bne.n	8001950 <HAL_RCC_OscConfig+0x98>
 8001936:	4b7b      	ldr	r3, [pc, #492]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a7a      	ldr	r2, [pc, #488]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 800193c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	4b78      	ldr	r3, [pc, #480]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a77      	ldr	r2, [pc, #476]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001948:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	e01d      	b.n	800198c <HAL_RCC_OscConfig+0xd4>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001958:	d10c      	bne.n	8001974 <HAL_RCC_OscConfig+0xbc>
 800195a:	4b72      	ldr	r3, [pc, #456]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a71      	ldr	r2, [pc, #452]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001960:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	4b6f      	ldr	r3, [pc, #444]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a6e      	ldr	r2, [pc, #440]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 800196c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001970:	6013      	str	r3, [r2, #0]
 8001972:	e00b      	b.n	800198c <HAL_RCC_OscConfig+0xd4>
 8001974:	4b6b      	ldr	r3, [pc, #428]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a6a      	ldr	r2, [pc, #424]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 800197a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800197e:	6013      	str	r3, [r2, #0]
 8001980:	4b68      	ldr	r3, [pc, #416]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a67      	ldr	r2, [pc, #412]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001986:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800198a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d013      	beq.n	80019bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001994:	f7ff fa1a 	bl	8000dcc <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800199c:	f7ff fa16 	bl	8000dcc <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b64      	cmp	r3, #100	; 0x64
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e1fa      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ae:	4b5d      	ldr	r3, [pc, #372]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f0      	beq.n	800199c <HAL_RCC_OscConfig+0xe4>
 80019ba:	e014      	b.n	80019e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019bc:	f7ff fa06 	bl	8000dcc <HAL_GetTick>
 80019c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019c2:	e008      	b.n	80019d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c4:	f7ff fa02 	bl	8000dcc <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	2b64      	cmp	r3, #100	; 0x64
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e1e6      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019d6:	4b53      	ldr	r3, [pc, #332]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1f0      	bne.n	80019c4 <HAL_RCC_OscConfig+0x10c>
 80019e2:	e000      	b.n	80019e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d063      	beq.n	8001aba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019f2:	4b4c      	ldr	r3, [pc, #304]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 030c 	and.w	r3, r3, #12
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00b      	beq.n	8001a16 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019fe:	4b49      	ldr	r3, [pc, #292]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 030c 	and.w	r3, r3, #12
 8001a06:	2b08      	cmp	r3, #8
 8001a08:	d11c      	bne.n	8001a44 <HAL_RCC_OscConfig+0x18c>
 8001a0a:	4b46      	ldr	r3, [pc, #280]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d116      	bne.n	8001a44 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a16:	4b43      	ldr	r3, [pc, #268]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d005      	beq.n	8001a2e <HAL_RCC_OscConfig+0x176>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d001      	beq.n	8001a2e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e1ba      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2e:	4b3d      	ldr	r3, [pc, #244]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	4939      	ldr	r1, [pc, #228]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a42:	e03a      	b.n	8001aba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	691b      	ldr	r3, [r3, #16]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d020      	beq.n	8001a8e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a4c:	4b36      	ldr	r3, [pc, #216]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001a4e:	2201      	movs	r2, #1
 8001a50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a52:	f7ff f9bb 	bl	8000dcc <HAL_GetTick>
 8001a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a5a:	f7ff f9b7 	bl	8000dcc <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e19b      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a6c:	4b2d      	ldr	r3, [pc, #180]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0f0      	beq.n	8001a5a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a78:	4b2a      	ldr	r3, [pc, #168]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	4927      	ldr	r1, [pc, #156]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	600b      	str	r3, [r1, #0]
 8001a8c:	e015      	b.n	8001aba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a8e:	4b26      	ldr	r3, [pc, #152]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a94:	f7ff f99a 	bl	8000dcc <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a9c:	f7ff f996 	bl	8000dcc <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e17a      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aae:	4b1d      	ldr	r3, [pc, #116]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1f0      	bne.n	8001a9c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0308 	and.w	r3, r3, #8
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d03a      	beq.n	8001b3c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d019      	beq.n	8001b02 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ace:	4b17      	ldr	r3, [pc, #92]	; (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad4:	f7ff f97a 	bl	8000dcc <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001adc:	f7ff f976 	bl	8000dcc <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e15a      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aee:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d0f0      	beq.n	8001adc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001afa:	2001      	movs	r0, #1
 8001afc:	f000 fb08 	bl	8002110 <RCC_Delay>
 8001b00:	e01c      	b.n	8001b3c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b02:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <HAL_RCC_OscConfig+0x274>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b08:	f7ff f960 	bl	8000dcc <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b0e:	e00f      	b.n	8001b30 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b10:	f7ff f95c 	bl	8000dcc <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d908      	bls.n	8001b30 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e140      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
 8001b22:	bf00      	nop
 8001b24:	40021000 	.word	0x40021000
 8001b28:	42420000 	.word	0x42420000
 8001b2c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b30:	4b9e      	ldr	r3, [pc, #632]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1e9      	bne.n	8001b10 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 80a6 	beq.w	8001c96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b4e:	4b97      	ldr	r3, [pc, #604]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10d      	bne.n	8001b76 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b5a:	4b94      	ldr	r3, [pc, #592]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	4a93      	ldr	r2, [pc, #588]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b64:	61d3      	str	r3, [r2, #28]
 8001b66:	4b91      	ldr	r3, [pc, #580]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b72:	2301      	movs	r3, #1
 8001b74:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b76:	4b8e      	ldr	r3, [pc, #568]	; (8001db0 <HAL_RCC_OscConfig+0x4f8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d118      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b82:	4b8b      	ldr	r3, [pc, #556]	; (8001db0 <HAL_RCC_OscConfig+0x4f8>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a8a      	ldr	r2, [pc, #552]	; (8001db0 <HAL_RCC_OscConfig+0x4f8>)
 8001b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b8e:	f7ff f91d 	bl	8000dcc <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b96:	f7ff f919 	bl	8000dcc <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b64      	cmp	r3, #100	; 0x64
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e0fd      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba8:	4b81      	ldr	r3, [pc, #516]	; (8001db0 <HAL_RCC_OscConfig+0x4f8>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0f0      	beq.n	8001b96 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d106      	bne.n	8001bca <HAL_RCC_OscConfig+0x312>
 8001bbc:	4b7b      	ldr	r3, [pc, #492]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001bbe:	6a1b      	ldr	r3, [r3, #32]
 8001bc0:	4a7a      	ldr	r2, [pc, #488]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001bc2:	f043 0301 	orr.w	r3, r3, #1
 8001bc6:	6213      	str	r3, [r2, #32]
 8001bc8:	e02d      	b.n	8001c26 <HAL_RCC_OscConfig+0x36e>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d10c      	bne.n	8001bec <HAL_RCC_OscConfig+0x334>
 8001bd2:	4b76      	ldr	r3, [pc, #472]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	4a75      	ldr	r2, [pc, #468]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001bd8:	f023 0301 	bic.w	r3, r3, #1
 8001bdc:	6213      	str	r3, [r2, #32]
 8001bde:	4b73      	ldr	r3, [pc, #460]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001be0:	6a1b      	ldr	r3, [r3, #32]
 8001be2:	4a72      	ldr	r2, [pc, #456]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001be4:	f023 0304 	bic.w	r3, r3, #4
 8001be8:	6213      	str	r3, [r2, #32]
 8001bea:	e01c      	b.n	8001c26 <HAL_RCC_OscConfig+0x36e>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	2b05      	cmp	r3, #5
 8001bf2:	d10c      	bne.n	8001c0e <HAL_RCC_OscConfig+0x356>
 8001bf4:	4b6d      	ldr	r3, [pc, #436]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	4a6c      	ldr	r2, [pc, #432]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001bfa:	f043 0304 	orr.w	r3, r3, #4
 8001bfe:	6213      	str	r3, [r2, #32]
 8001c00:	4b6a      	ldr	r3, [pc, #424]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	4a69      	ldr	r2, [pc, #420]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	6213      	str	r3, [r2, #32]
 8001c0c:	e00b      	b.n	8001c26 <HAL_RCC_OscConfig+0x36e>
 8001c0e:	4b67      	ldr	r3, [pc, #412]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	4a66      	ldr	r2, [pc, #408]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c14:	f023 0301 	bic.w	r3, r3, #1
 8001c18:	6213      	str	r3, [r2, #32]
 8001c1a:	4b64      	ldr	r3, [pc, #400]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	4a63      	ldr	r2, [pc, #396]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c20:	f023 0304 	bic.w	r3, r3, #4
 8001c24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d015      	beq.n	8001c5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2e:	f7ff f8cd 	bl	8000dcc <HAL_GetTick>
 8001c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c34:	e00a      	b.n	8001c4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c36:	f7ff f8c9 	bl	8000dcc <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e0ab      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c4c:	4b57      	ldr	r3, [pc, #348]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	f003 0302 	and.w	r3, r3, #2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0ee      	beq.n	8001c36 <HAL_RCC_OscConfig+0x37e>
 8001c58:	e014      	b.n	8001c84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c5a:	f7ff f8b7 	bl	8000dcc <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c60:	e00a      	b.n	8001c78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c62:	f7ff f8b3 	bl	8000dcc <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e095      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c78:	4b4c      	ldr	r3, [pc, #304]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1ee      	bne.n	8001c62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c84:	7dfb      	ldrb	r3, [r7, #23]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d105      	bne.n	8001c96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c8a:	4b48      	ldr	r3, [pc, #288]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	4a47      	ldr	r2, [pc, #284]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001c90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69db      	ldr	r3, [r3, #28]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 8081 	beq.w	8001da2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ca0:	4b42      	ldr	r3, [pc, #264]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 030c 	and.w	r3, r3, #12
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d061      	beq.n	8001d70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d146      	bne.n	8001d42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb4:	4b3f      	ldr	r3, [pc, #252]	; (8001db4 <HAL_RCC_OscConfig+0x4fc>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cba:	f7ff f887 	bl	8000dcc <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc2:	f7ff f883 	bl	8000dcc <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e067      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd4:	4b35      	ldr	r3, [pc, #212]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1f0      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce8:	d108      	bne.n	8001cfc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cea:	4b30      	ldr	r3, [pc, #192]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	492d      	ldr	r1, [pc, #180]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cfc:	4b2b      	ldr	r3, [pc, #172]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a19      	ldr	r1, [r3, #32]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	430b      	orrs	r3, r1
 8001d0e:	4927      	ldr	r1, [pc, #156]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d14:	4b27      	ldr	r3, [pc, #156]	; (8001db4 <HAL_RCC_OscConfig+0x4fc>)
 8001d16:	2201      	movs	r2, #1
 8001d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1a:	f7ff f857 	bl	8000dcc <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d22:	f7ff f853 	bl	8000dcc <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e037      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d34:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d0f0      	beq.n	8001d22 <HAL_RCC_OscConfig+0x46a>
 8001d40:	e02f      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d42:	4b1c      	ldr	r3, [pc, #112]	; (8001db4 <HAL_RCC_OscConfig+0x4fc>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d48:	f7ff f840 	bl	8000dcc <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d50:	f7ff f83c 	bl	8000dcc <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e020      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d62:	4b12      	ldr	r3, [pc, #72]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d1f0      	bne.n	8001d50 <HAL_RCC_OscConfig+0x498>
 8001d6e:	e018      	b.n	8001da2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d101      	bne.n	8001d7c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e013      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <HAL_RCC_OscConfig+0x4f4>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d106      	bne.n	8001d9e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d001      	beq.n	8001da2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40021000 	.word	0x40021000
 8001db0:	40007000 	.word	0x40007000
 8001db4:	42420060 	.word	0x42420060

08001db8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0d0      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dcc:	4b6a      	ldr	r3, [pc, #424]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d910      	bls.n	8001dfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dda:	4b67      	ldr	r3, [pc, #412]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f023 0207 	bic.w	r2, r3, #7
 8001de2:	4965      	ldr	r1, [pc, #404]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dea:	4b63      	ldr	r3, [pc, #396]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d001      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e0b8      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d020      	beq.n	8001e4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e14:	4b59      	ldr	r3, [pc, #356]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	4a58      	ldr	r2, [pc, #352]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d005      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e2c:	4b53      	ldr	r3, [pc, #332]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	4a52      	ldr	r2, [pc, #328]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e38:	4b50      	ldr	r3, [pc, #320]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	494d      	ldr	r1, [pc, #308]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d040      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d107      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5e:	4b47      	ldr	r3, [pc, #284]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d115      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e07f      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d107      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e76:	4b41      	ldr	r3, [pc, #260]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d109      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e073      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e86:	4b3d      	ldr	r3, [pc, #244]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e06b      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e96:	4b39      	ldr	r3, [pc, #228]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f023 0203 	bic.w	r2, r3, #3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	4936      	ldr	r1, [pc, #216]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ea8:	f7fe ff90 	bl	8000dcc <HAL_GetTick>
 8001eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eae:	e00a      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb0:	f7fe ff8c 	bl	8000dcc <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e053      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec6:	4b2d      	ldr	r3, [pc, #180]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 020c 	and.w	r2, r3, #12
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d1eb      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ed8:	4b27      	ldr	r3, [pc, #156]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d210      	bcs.n	8001f08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee6:	4b24      	ldr	r3, [pc, #144]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f023 0207 	bic.w	r2, r3, #7
 8001eee:	4922      	ldr	r1, [pc, #136]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef6:	4b20      	ldr	r3, [pc, #128]	; (8001f78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d001      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e032      	b.n	8001f6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d008      	beq.n	8001f26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f14:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	4916      	ldr	r1, [pc, #88]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d009      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f32:	4b12      	ldr	r3, [pc, #72]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	691b      	ldr	r3, [r3, #16]
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	490e      	ldr	r1, [pc, #56]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f46:	f000 f821 	bl	8001f8c <HAL_RCC_GetSysClockFreq>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	; (8001f7c <HAL_RCC_ClockConfig+0x1c4>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	091b      	lsrs	r3, r3, #4
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	490a      	ldr	r1, [pc, #40]	; (8001f80 <HAL_RCC_ClockConfig+0x1c8>)
 8001f58:	5ccb      	ldrb	r3, [r1, r3]
 8001f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5e:	4a09      	ldr	r2, [pc, #36]	; (8001f84 <HAL_RCC_ClockConfig+0x1cc>)
 8001f60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <HAL_RCC_ClockConfig+0x1d0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7fe fb0c 	bl	8000584 <HAL_InitTick>

  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40022000 	.word	0x40022000
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	08008be8 	.word	0x08008be8
 8001f84:	20000000 	.word	0x20000000
 8001f88:	20000094 	.word	0x20000094

08001f8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f8c:	b490      	push	{r4, r7}
 8001f8e:	b08a      	sub	sp, #40	; 0x28
 8001f90:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001f92:	4b2a      	ldr	r3, [pc, #168]	; (800203c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001f94:	1d3c      	adds	r4, r7, #4
 8001f96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001f9c:	f240 2301 	movw	r3, #513	; 0x201
 8001fa0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61fb      	str	r3, [r7, #28]
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61bb      	str	r3, [r7, #24]
 8001faa:	2300      	movs	r3, #0
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fb6:	4b22      	ldr	r3, [pc, #136]	; (8002040 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	2b04      	cmp	r3, #4
 8001fc4:	d002      	beq.n	8001fcc <HAL_RCC_GetSysClockFreq+0x40>
 8001fc6:	2b08      	cmp	r3, #8
 8001fc8:	d003      	beq.n	8001fd2 <HAL_RCC_GetSysClockFreq+0x46>
 8001fca:	e02d      	b.n	8002028 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fcc:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fce:	623b      	str	r3, [r7, #32]
      break;
 8001fd0:	e02d      	b.n	800202e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	0c9b      	lsrs	r3, r3, #18
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fde:	4413      	add	r3, r2
 8001fe0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001fe4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d013      	beq.n	8002018 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ff0:	4b13      	ldr	r3, [pc, #76]	; (8002040 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	0c5b      	lsrs	r3, r3, #17
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ffe:	4413      	add	r3, r2
 8002000:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002004:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	4a0e      	ldr	r2, [pc, #56]	; (8002044 <HAL_RCC_GetSysClockFreq+0xb8>)
 800200a:	fb02 f203 	mul.w	r2, r2, r3
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	fbb2 f3f3 	udiv	r3, r2, r3
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
 8002016:	e004      	b.n	8002022 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	4a0b      	ldr	r2, [pc, #44]	; (8002048 <HAL_RCC_GetSysClockFreq+0xbc>)
 800201c:	fb02 f303 	mul.w	r3, r2, r3
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	623b      	str	r3, [r7, #32]
      break;
 8002026:	e002      	b.n	800202e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002028:	4b06      	ldr	r3, [pc, #24]	; (8002044 <HAL_RCC_GetSysClockFreq+0xb8>)
 800202a:	623b      	str	r3, [r7, #32]
      break;
 800202c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800202e:	6a3b      	ldr	r3, [r7, #32]
}
 8002030:	4618      	mov	r0, r3
 8002032:	3728      	adds	r7, #40	; 0x28
 8002034:	46bd      	mov	sp, r7
 8002036:	bc90      	pop	{r4, r7}
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	08008b30 	.word	0x08008b30
 8002040:	40021000 	.word	0x40021000
 8002044:	007a1200 	.word	0x007a1200
 8002048:	003d0900 	.word	0x003d0900

0800204c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002050:	4b02      	ldr	r3, [pc, #8]	; (800205c <HAL_RCC_GetHCLKFreq+0x10>)
 8002052:	681b      	ldr	r3, [r3, #0]
}
 8002054:	4618      	mov	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr
 800205c:	20000000 	.word	0x20000000

08002060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002064:	f7ff fff2 	bl	800204c <HAL_RCC_GetHCLKFreq>
 8002068:	4602      	mov	r2, r0
 800206a:	4b05      	ldr	r3, [pc, #20]	; (8002080 <HAL_RCC_GetPCLK1Freq+0x20>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	0a1b      	lsrs	r3, r3, #8
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	4903      	ldr	r1, [pc, #12]	; (8002084 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002076:	5ccb      	ldrb	r3, [r1, r3]
 8002078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800207c:	4618      	mov	r0, r3
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40021000 	.word	0x40021000
 8002084:	08008bf8 	.word	0x08008bf8

08002088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800208c:	f7ff ffde 	bl	800204c <HAL_RCC_GetHCLKFreq>
 8002090:	4602      	mov	r2, r0
 8002092:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	0adb      	lsrs	r3, r3, #11
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	4903      	ldr	r1, [pc, #12]	; (80020ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800209e:	5ccb      	ldrb	r3, [r1, r3]
 80020a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	40021000 	.word	0x40021000
 80020ac:	08008bf8 	.word	0x08008bf8

080020b0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	220f      	movs	r2, #15
 80020be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020c0:	4b11      	ldr	r3, [pc, #68]	; (8002108 <HAL_RCC_GetClockConfig+0x58>)
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 0203 	and.w	r2, r3, #3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80020cc:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <HAL_RCC_GetClockConfig+0x58>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80020d8:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <HAL_RCC_GetClockConfig+0x58>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80020e4:	4b08      	ldr	r3, [pc, #32]	; (8002108 <HAL_RCC_GetClockConfig+0x58>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	08db      	lsrs	r3, r3, #3
 80020ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <HAL_RCC_GetClockConfig+0x5c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0207 	and.w	r2, r3, #7
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr
 8002108:	40021000 	.word	0x40021000
 800210c:	40022000 	.word	0x40022000

08002110 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002118:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <RCC_Delay+0x34>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a0a      	ldr	r2, [pc, #40]	; (8002148 <RCC_Delay+0x38>)
 800211e:	fba2 2303 	umull	r2, r3, r2, r3
 8002122:	0a5b      	lsrs	r3, r3, #9
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	fb02 f303 	mul.w	r3, r2, r3
 800212a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800212c:	bf00      	nop
  }
  while (Delay --);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	1e5a      	subs	r2, r3, #1
 8002132:	60fa      	str	r2, [r7, #12]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1f9      	bne.n	800212c <RCC_Delay+0x1c>
}
 8002138:	bf00      	nop
 800213a:	bf00      	nop
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr
 8002144:	20000000 	.word	0x20000000
 8002148:	10624dd3 	.word	0x10624dd3

0800214c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e041      	b.n	80021e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d106      	bne.n	8002178 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f839 	bl	80021ea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2202      	movs	r2, #2
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3304      	adds	r3, #4
 8002188:	4619      	mov	r1, r3
 800218a:	4610      	mov	r0, r2
 800218c:	f000 f9b4 	bl	80024f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2201      	movs	r2, #1
 80021b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr

080021fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b01      	cmp	r3, #1
 800220e:	d001      	beq.n	8002214 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e03a      	b.n	800228a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2202      	movs	r2, #2
 8002218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 0201 	orr.w	r2, r2, #1
 800222a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a18      	ldr	r2, [pc, #96]	; (8002294 <HAL_TIM_Base_Start_IT+0x98>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d00e      	beq.n	8002254 <HAL_TIM_Base_Start_IT+0x58>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800223e:	d009      	beq.n	8002254 <HAL_TIM_Base_Start_IT+0x58>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a14      	ldr	r2, [pc, #80]	; (8002298 <HAL_TIM_Base_Start_IT+0x9c>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d004      	beq.n	8002254 <HAL_TIM_Base_Start_IT+0x58>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a13      	ldr	r2, [pc, #76]	; (800229c <HAL_TIM_Base_Start_IT+0xa0>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d111      	bne.n	8002278 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2b06      	cmp	r3, #6
 8002264:	d010      	beq.n	8002288 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f042 0201 	orr.w	r2, r2, #1
 8002274:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002276:	e007      	b.n	8002288 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 0201 	orr.w	r2, r2, #1
 8002286:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr
 8002294:	40012c00 	.word	0x40012c00
 8002298:	40000400 	.word	0x40000400
 800229c:	40000800 	.word	0x40000800

080022a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d122      	bne.n	80022fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d11b      	bne.n	80022fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f06f 0202 	mvn.w	r2, #2
 80022cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f8ed 	bl	80024c2 <HAL_TIM_IC_CaptureCallback>
 80022e8:	e005      	b.n	80022f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f8e0 	bl	80024b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 f8ef 	bl	80024d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	2b04      	cmp	r3, #4
 8002308:	d122      	bne.n	8002350 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b04      	cmp	r3, #4
 8002316:	d11b      	bne.n	8002350 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f06f 0204 	mvn.w	r2, #4
 8002320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2202      	movs	r2, #2
 8002326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f8c3 	bl	80024c2 <HAL_TIM_IC_CaptureCallback>
 800233c:	e005      	b.n	800234a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f8b6 	bl	80024b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 f8c5 	bl	80024d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b08      	cmp	r3, #8
 800235c:	d122      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f003 0308 	and.w	r3, r3, #8
 8002368:	2b08      	cmp	r3, #8
 800236a:	d11b      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f06f 0208 	mvn.w	r2, #8
 8002374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2204      	movs	r2, #4
 800237a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f899 	bl	80024c2 <HAL_TIM_IC_CaptureCallback>
 8002390:	e005      	b.n	800239e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f88c 	bl	80024b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f89b 	bl	80024d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	f003 0310 	and.w	r3, r3, #16
 80023ae:	2b10      	cmp	r3, #16
 80023b0:	d122      	bne.n	80023f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f003 0310 	and.w	r3, r3, #16
 80023bc:	2b10      	cmp	r3, #16
 80023be:	d11b      	bne.n	80023f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f06f 0210 	mvn.w	r2, #16
 80023c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2208      	movs	r2, #8
 80023ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f86f 	bl	80024c2 <HAL_TIM_IC_CaptureCallback>
 80023e4:	e005      	b.n	80023f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f862 	bl	80024b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f871 	bl	80024d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b01      	cmp	r3, #1
 8002404:	d10e      	bne.n	8002424 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b01      	cmp	r3, #1
 8002412:	d107      	bne.n	8002424 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f06f 0201 	mvn.w	r2, #1
 800241c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7fe f860 	bl	80004e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800242e:	2b80      	cmp	r3, #128	; 0x80
 8002430:	d10e      	bne.n	8002450 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800243c:	2b80      	cmp	r3, #128	; 0x80
 800243e:	d107      	bne.n	8002450 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f8bf 	bl	80025ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245a:	2b40      	cmp	r3, #64	; 0x40
 800245c:	d10e      	bne.n	800247c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002468:	2b40      	cmp	r3, #64	; 0x40
 800246a:	d107      	bne.n	800247c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f835 	bl	80024e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	f003 0320 	and.w	r3, r3, #32
 8002486:	2b20      	cmp	r3, #32
 8002488:	d10e      	bne.n	80024a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	f003 0320 	and.w	r3, r3, #32
 8002494:	2b20      	cmp	r3, #32
 8002496:	d107      	bne.n	80024a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f06f 0220 	mvn.w	r2, #32
 80024a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f88a 	bl	80025bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024a8:	bf00      	nop
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	bc80      	pop	{r7}
 80024c0:	4770      	bx	lr

080024c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr

080024d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bc80      	pop	{r7}
 80024e4:	4770      	bx	lr

080024e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr

080024f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	4a29      	ldr	r2, [pc, #164]	; (80025b0 <TIM_Base_SetConfig+0xb8>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d00b      	beq.n	8002528 <TIM_Base_SetConfig+0x30>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002516:	d007      	beq.n	8002528 <TIM_Base_SetConfig+0x30>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a26      	ldr	r2, [pc, #152]	; (80025b4 <TIM_Base_SetConfig+0xbc>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d003      	beq.n	8002528 <TIM_Base_SetConfig+0x30>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a25      	ldr	r2, [pc, #148]	; (80025b8 <TIM_Base_SetConfig+0xc0>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d108      	bne.n	800253a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800252e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	4313      	orrs	r3, r2
 8002538:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a1c      	ldr	r2, [pc, #112]	; (80025b0 <TIM_Base_SetConfig+0xb8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d00b      	beq.n	800255a <TIM_Base_SetConfig+0x62>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002548:	d007      	beq.n	800255a <TIM_Base_SetConfig+0x62>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a19      	ldr	r2, [pc, #100]	; (80025b4 <TIM_Base_SetConfig+0xbc>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d003      	beq.n	800255a <TIM_Base_SetConfig+0x62>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a18      	ldr	r2, [pc, #96]	; (80025b8 <TIM_Base_SetConfig+0xc0>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d108      	bne.n	800256c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002560:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	4313      	orrs	r3, r2
 800256a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	4313      	orrs	r3, r2
 8002578:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a07      	ldr	r2, [pc, #28]	; (80025b0 <TIM_Base_SetConfig+0xb8>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d103      	bne.n	80025a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	691a      	ldr	r2, [r3, #16]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	615a      	str	r2, [r3, #20]
}
 80025a6:	bf00      	nop
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr
 80025b0:	40012c00 	.word	0x40012c00
 80025b4:	40000400 	.word	0x40000400
 80025b8:	40000800 	.word	0x40000800

080025bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr

080025ce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr

080025e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e03f      	b.n	8002672 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d106      	bne.n	800260c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7fe f8d6 	bl	80007b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2224      	movs	r2, #36	; 0x24
 8002610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002622:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 fdab 	bl	8003180 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	691a      	ldr	r2, [r3, #16]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002638:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	695a      	ldr	r2, [r3, #20]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002648:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68da      	ldr	r2, [r3, #12]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002658:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2220      	movs	r2, #32
 8002664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2220      	movs	r2, #32
 800266c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
	...

0800267c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b086      	sub	sp, #24
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	4613      	mov	r3, r2
 8002688:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b20      	cmp	r3, #32
 8002694:	d153      	bne.n	800273e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d002      	beq.n	80026a2 <HAL_UART_Transmit_DMA+0x26>
 800269c:	88fb      	ldrh	r3, [r7, #6]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e04c      	b.n	8002740 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d101      	bne.n	80026b4 <HAL_UART_Transmit_DMA+0x38>
 80026b0:	2302      	movs	r3, #2
 80026b2:	e045      	b.n	8002740 <HAL_UART_Transmit_DMA+0xc4>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80026bc:	68ba      	ldr	r2, [r7, #8]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	88fa      	ldrh	r2, [r7, #6]
 80026c6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	88fa      	ldrh	r2, [r7, #6]
 80026cc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2221      	movs	r2, #33	; 0x21
 80026d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e0:	4a19      	ldr	r2, [pc, #100]	; (8002748 <HAL_UART_Transmit_DMA+0xcc>)
 80026e2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e8:	4a18      	ldr	r2, [pc, #96]	; (800274c <HAL_UART_Transmit_DMA+0xd0>)
 80026ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f0:	4a17      	ldr	r2, [pc, #92]	; (8002750 <HAL_UART_Transmit_DMA+0xd4>)
 80026f2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f8:	2200      	movs	r2, #0
 80026fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 80026fc:	f107 0308 	add.w	r3, r7, #8
 8002700:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	6819      	ldr	r1, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	3304      	adds	r3, #4
 8002710:	461a      	mov	r2, r3
 8002712:	88fb      	ldrh	r3, [r7, #6]
 8002714:	f7fe fc9e 	bl	8001054 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002720:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	695a      	ldr	r2, [r3, #20]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002738:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800273a:	2300      	movs	r3, #0
 800273c:	e000      	b.n	8002740 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800273e:	2302      	movs	r3, #2
  }
}
 8002740:	4618      	mov	r0, r3
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	08002c1f 	.word	0x08002c1f
 800274c:	08002c71 	.word	0x08002c71
 8002750:	08002d59 	.word	0x08002d59

08002754 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	4613      	mov	r3, r2
 8002760:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b20      	cmp	r3, #32
 800276c:	d11d      	bne.n	80027aa <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d002      	beq.n	800277a <HAL_UART_Receive_DMA+0x26>
 8002774:	88fb      	ldrh	r3, [r7, #6]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e016      	b.n	80027ac <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002784:	2b01      	cmp	r3, #1
 8002786:	d101      	bne.n	800278c <HAL_UART_Receive_DMA+0x38>
 8002788:	2302      	movs	r3, #2
 800278a:	e00f      	b.n	80027ac <HAL_UART_Receive_DMA+0x58>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800279a:	88fb      	ldrh	r3, [r7, #6]
 800279c:	461a      	mov	r2, r3
 800279e:	68b9      	ldr	r1, [r7, #8]
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f000 fb23 	bl	8002dec <UART_Start_Receive_DMA>
 80027a6:	4603      	mov	r3, r0
 80027a8:	e000      	b.n	80027ac <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80027aa:	2302      	movs	r3, #2
  }
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80027bc:	2300      	movs	r3, #0
 80027be:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	bf14      	ite	ne
 80027ce:	2301      	movne	r3, #1
 80027d0:	2300      	moveq	r3, #0
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b21      	cmp	r3, #33	; 0x21
 80027e0:	d116      	bne.n	8002810 <HAL_UART_DMAStop+0x5c>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d013      	beq.n	8002810 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	695a      	ldr	r2, [r3, #20]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027f6:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d004      	beq.n	800280a <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002804:	4618      	mov	r0, r3
 8002806:	f7fe fc84 	bl	8001112 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 fb52 	bl	8002eb4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281a:	2b00      	cmp	r3, #0
 800281c:	bf14      	ite	ne
 800281e:	2301      	movne	r3, #1
 8002820:	2300      	moveq	r3, #0
 8002822:	b2db      	uxtb	r3, r3
 8002824:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b22      	cmp	r3, #34	; 0x22
 8002830:	d116      	bne.n	8002860 <HAL_UART_DMAStop+0xac>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d013      	beq.n	8002860 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	695a      	ldr	r2, [r3, #20]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002846:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284c:	2b00      	cmp	r3, #0
 800284e:	d004      	beq.n	800285a <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002854:	4618      	mov	r0, r3
 8002856:	f7fe fc5c 	bl	8001112 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 fb3f 	bl	8002ede <UART_EndRxTransfer>
  }

  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
	...

0800286c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b08a      	sub	sp, #40	; 0x28
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800288c:	2300      	movs	r3, #0
 800288e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10d      	bne.n	80028be <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	f003 0320 	and.w	r3, r3, #32
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d008      	beq.n	80028be <HAL_UART_IRQHandler+0x52>
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	f003 0320 	and.w	r3, r3, #32
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 fbb8 	bl	800302c <UART_Receive_IT>
      return;
 80028bc:	e17b      	b.n	8002bb6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f000 80b1 	beq.w	8002a28 <HAL_UART_IRQHandler+0x1bc>
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d105      	bne.n	80028dc <HAL_UART_IRQHandler+0x70>
 80028d0:	6a3b      	ldr	r3, [r7, #32]
 80028d2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 80a6 	beq.w	8002a28 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00a      	beq.n	80028fc <HAL_UART_IRQHandler+0x90>
 80028e6:	6a3b      	ldr	r3, [r7, #32]
 80028e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d005      	beq.n	80028fc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f4:	f043 0201 	orr.w	r2, r3, #1
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	f003 0304 	and.w	r3, r3, #4
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00a      	beq.n	800291c <HAL_UART_IRQHandler+0xb0>
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	d005      	beq.n	800291c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002914:	f043 0202 	orr.w	r2, r3, #2
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00a      	beq.n	800293c <HAL_UART_IRQHandler+0xd0>
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	f043 0204 	orr.w	r2, r3, #4
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00f      	beq.n	8002966 <HAL_UART_IRQHandler+0xfa>
 8002946:	6a3b      	ldr	r3, [r7, #32]
 8002948:	f003 0320 	and.w	r3, r3, #32
 800294c:	2b00      	cmp	r3, #0
 800294e:	d104      	bne.n	800295a <HAL_UART_IRQHandler+0xee>
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d005      	beq.n	8002966 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	f043 0208 	orr.w	r2, r3, #8
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 811e 	beq.w	8002bac <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	f003 0320 	and.w	r3, r3, #32
 8002976:	2b00      	cmp	r3, #0
 8002978:	d007      	beq.n	800298a <HAL_UART_IRQHandler+0x11e>
 800297a:	6a3b      	ldr	r3, [r7, #32]
 800297c:	f003 0320 	and.w	r3, r3, #32
 8002980:	2b00      	cmp	r3, #0
 8002982:	d002      	beq.n	800298a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 fb51 	bl	800302c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002994:	2b00      	cmp	r3, #0
 8002996:	bf14      	ite	ne
 8002998:	2301      	movne	r3, #1
 800299a:	2300      	moveq	r3, #0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	f003 0308 	and.w	r3, r3, #8
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d102      	bne.n	80029b2 <HAL_UART_IRQHandler+0x146>
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d031      	beq.n	8002a16 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 fa93 	bl	8002ede <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d023      	beq.n	8002a0e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	695a      	ldr	r2, [r3, #20]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029d4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d013      	beq.n	8002a06 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e2:	4a76      	ldr	r2, [pc, #472]	; (8002bbc <HAL_UART_IRQHandler+0x350>)
 80029e4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fe fbcc 	bl	8001188 <HAL_DMA_Abort_IT>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d016      	beq.n	8002a24 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029fc:	687a      	ldr	r2, [r7, #4]
 80029fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a00:	4610      	mov	r0, r2
 8002a02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a04:	e00e      	b.n	8002a24 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f8f5 	bl	8002bf6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a0c:	e00a      	b.n	8002a24 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f8f1 	bl	8002bf6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a14:	e006      	b.n	8002a24 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f8ed 	bl	8002bf6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002a22:	e0c3      	b.n	8002bac <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a24:	bf00      	nop
    return;
 8002a26:	e0c1      	b.n	8002bac <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	f040 80a1 	bne.w	8002b74 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	f003 0310 	and.w	r3, r3, #16
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 809b 	beq.w	8002b74 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
 8002a40:	f003 0310 	and.w	r3, r3, #16
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f000 8095 	beq.w	8002b74 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60fb      	str	r3, [r7, #12]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d04e      	beq.n	8002b0c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002a78:	8a3b      	ldrh	r3, [r7, #16]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f000 8098 	beq.w	8002bb0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a84:	8a3a      	ldrh	r2, [r7, #16]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	f080 8092 	bcs.w	8002bb0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	8a3a      	ldrh	r2, [r7, #16]
 8002a90:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	2b20      	cmp	r3, #32
 8002a9a:	d02b      	beq.n	8002af4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002aaa:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	695a      	ldr	r2, [r3, #20]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f022 0201 	bic.w	r2, r2, #1
 8002aba:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	695a      	ldr	r2, [r3, #20]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aca:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 0210 	bic.w	r2, r2, #16
 8002ae8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fe fb0f 	bl	8001112 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	4619      	mov	r1, r3
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f87f 	bl	8002c08 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002b0a:	e051      	b.n	8002bb0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d047      	beq.n	8002bb4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002b24:	8a7b      	ldrh	r3, [r7, #18]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d044      	beq.n	8002bb4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68da      	ldr	r2, [r3, #12]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002b38:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	695a      	ldr	r2, [r3, #20]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0201 	bic.w	r2, r2, #1
 8002b48:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68da      	ldr	r2, [r3, #12]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0210 	bic.w	r2, r2, #16
 8002b66:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b68:	8a7b      	ldrh	r3, [r7, #18]
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f84b 	bl	8002c08 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002b72:	e01f      	b.n	8002bb4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d008      	beq.n	8002b90 <HAL_UART_IRQHandler+0x324>
 8002b7e:	6a3b      	ldr	r3, [r7, #32]
 8002b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d003      	beq.n	8002b90 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f000 f9e8 	bl	8002f5e <UART_Transmit_IT>
    return;
 8002b8e:	e012      	b.n	8002bb6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00d      	beq.n	8002bb6 <HAL_UART_IRQHandler+0x34a>
 8002b9a:	6a3b      	ldr	r3, [r7, #32]
 8002b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 fa29 	bl	8002ffc <UART_EndTransmit_IT>
    return;
 8002baa:	e004      	b.n	8002bb6 <HAL_UART_IRQHandler+0x34a>
    return;
 8002bac:	bf00      	nop
 8002bae:	e002      	b.n	8002bb6 <HAL_UART_IRQHandler+0x34a>
      return;
 8002bb0:	bf00      	nop
 8002bb2:	e000      	b.n	8002bb6 <HAL_UART_IRQHandler+0x34a>
      return;
 8002bb4:	bf00      	nop
  }
}
 8002bb6:	3728      	adds	r7, #40	; 0x28
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	08002f37 	.word	0x08002f37

08002bc0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr

08002bd2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bc80      	pop	{r7}
 8002be2:	4770      	bx	lr

08002be4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr

08002bf6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr

08002c08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	460b      	mov	r3, r1
 8002c12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bc80      	pop	{r7}
 8002c1c:	4770      	bx	lr

08002c1e <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b084      	sub	sp, #16
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0320 	and.w	r3, r3, #32
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d113      	bne.n	8002c62 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	695a      	ldr	r2, [r3, #20]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c4e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68da      	ldr	r2, [r3, #12]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c5e:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002c60:	e002      	b.n	8002c68 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f7fd ff46 	bl	8000af4 <HAL_UART_TxCpltCallback>
}
 8002c68:	bf00      	nop
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f7ff ff9e 	bl	8002bc0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c84:	bf00      	nop
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0320 	and.w	r3, r3, #32
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d12a      	bne.n	8002cfe <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68da      	ldr	r2, [r3, #12]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cbc:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	695a      	ldr	r2, [r3, #20]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 0201 	bic.w	r2, r2, #1
 8002ccc:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	695a      	ldr	r2, [r3, #20]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cdc:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d107      	bne.n	8002cfe <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 0210 	bic.w	r2, r2, #16
 8002cfc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d106      	bne.n	8002d14 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f7ff ff7b 	bl	8002c08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002d12:	e002      	b.n	8002d1a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f7ff ff5c 	bl	8002bd2 <HAL_UART_RxCpltCallback>
}
 8002d1a:	bf00      	nop
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b084      	sub	sp, #16
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d108      	bne.n	8002d4a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d3c:	085b      	lsrs	r3, r3, #1
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	4619      	mov	r1, r3
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f7ff ff60 	bl	8002c08 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002d48:	e002      	b.n	8002d50 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f7ff ff4a 	bl	8002be4 <HAL_UART_RxHalfCpltCallback>
}
 8002d50:	bf00      	nop
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002d60:	2300      	movs	r3, #0
 8002d62:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	bf14      	ite	ne
 8002d78:	2301      	movne	r3, #1
 8002d7a:	2300      	moveq	r3, #0
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b21      	cmp	r3, #33	; 0x21
 8002d8a:	d108      	bne.n	8002d9e <UART_DMAError+0x46>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d005      	beq.n	8002d9e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	2200      	movs	r2, #0
 8002d96:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002d98:	68b8      	ldr	r0, [r7, #8]
 8002d9a:	f000 f88b 	bl	8002eb4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	bf14      	ite	ne
 8002dac:	2301      	movne	r3, #1
 8002dae:	2300      	moveq	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b22      	cmp	r3, #34	; 0x22
 8002dbe:	d108      	bne.n	8002dd2 <UART_DMAError+0x7a>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d005      	beq.n	8002dd2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002dcc:	68b8      	ldr	r0, [r7, #8]
 8002dce:	f000 f886 	bl	8002ede <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	f043 0210 	orr.w	r2, r3, #16
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002dde:	68b8      	ldr	r0, [r7, #8]
 8002de0:	f7ff ff09 	bl	8002bf6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002de4:	bf00      	nop
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	4613      	mov	r3, r2
 8002df8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	88fa      	ldrh	r2, [r7, #6]
 8002e04:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2222      	movs	r2, #34	; 0x22
 8002e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e18:	4a23      	ldr	r2, [pc, #140]	; (8002ea8 <UART_Start_Receive_DMA+0xbc>)
 8002e1a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e20:	4a22      	ldr	r2, [pc, #136]	; (8002eac <UART_Start_Receive_DMA+0xc0>)
 8002e22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e28:	4a21      	ldr	r2, [pc, #132]	; (8002eb0 <UART_Start_Receive_DMA+0xc4>)
 8002e2a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e30:	2200      	movs	r2, #0
 8002e32:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002e34:	f107 0308 	add.w	r3, r7, #8
 8002e38:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	3304      	adds	r3, #4
 8002e44:	4619      	mov	r1, r3
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	88fb      	ldrh	r3, [r7, #6]
 8002e4c:	f7fe f902 	bl	8001054 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002e50:	2300      	movs	r3, #0
 8002e52:	613b      	str	r3, [r7, #16]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	613b      	str	r3, [r7, #16]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	613b      	str	r3, [r7, #16]
 8002e64:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68da      	ldr	r2, [r3, #12]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e7c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695a      	ldr	r2, [r3, #20]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f042 0201 	orr.w	r2, r2, #1
 8002e8c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695a      	ldr	r2, [r3, #20]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e9c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	08002c8d 	.word	0x08002c8d
 8002eac:	08002d23 	.word	0x08002d23
 8002eb0:	08002d59 	.word	0x08002d59

08002eb4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002eca:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bc80      	pop	{r7}
 8002edc:	4770      	bx	lr

08002ede <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68da      	ldr	r2, [r3, #12]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002ef4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	695a      	ldr	r2, [r3, #20]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0201 	bic.w	r2, r2, #1
 8002f04:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d107      	bne.n	8002f1e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0210 	bic.w	r2, r2, #16
 8002f1c:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2220      	movs	r2, #32
 8002f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bc80      	pop	{r7}
 8002f34:	4770      	bx	lr

08002f36 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b084      	sub	sp, #16
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f7ff fe50 	bl	8002bf6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f56:	bf00      	nop
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b085      	sub	sp, #20
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2b21      	cmp	r3, #33	; 0x21
 8002f70:	d13e      	bne.n	8002ff0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f7a:	d114      	bne.n	8002fa6 <UART_Transmit_IT+0x48>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d110      	bne.n	8002fa6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	881b      	ldrh	r3, [r3, #0]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f98:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	1c9a      	adds	r2, r3, #2
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	621a      	str	r2, [r3, #32]
 8002fa4:	e008      	b.n	8002fb8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	1c59      	adds	r1, r3, #1
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6211      	str	r1, [r2, #32]
 8002fb0:	781a      	ldrb	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10f      	bne.n	8002fec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fda:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002fec:	2300      	movs	r3, #0
 8002fee:	e000      	b.n	8002ff2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002ff0:	2302      	movs	r3, #2
  }
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3714      	adds	r7, #20
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc80      	pop	{r7}
 8002ffa:	4770      	bx	lr

08002ffc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003012:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2220      	movs	r2, #32
 8003018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7fd fd69 	bl	8000af4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3708      	adds	r7, #8
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b22      	cmp	r3, #34	; 0x22
 800303e:	f040 8099 	bne.w	8003174 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800304a:	d117      	bne.n	800307c <UART_Receive_IT+0x50>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d113      	bne.n	800307c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003054:	2300      	movs	r3, #0
 8003056:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305c:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	b29b      	uxth	r3, r3
 8003066:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800306a:	b29a      	uxth	r2, r3
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003074:	1c9a      	adds	r2, r3, #2
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	629a      	str	r2, [r3, #40]	; 0x28
 800307a:	e026      	b.n	80030ca <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003080:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003082:	2300      	movs	r3, #0
 8003084:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800308e:	d007      	beq.n	80030a0 <UART_Receive_IT+0x74>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d10a      	bne.n	80030ae <UART_Receive_IT+0x82>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d106      	bne.n	80030ae <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	b2da      	uxtb	r2, r3
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	701a      	strb	r2, [r3, #0]
 80030ac:	e008      	b.n	80030c0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c4:	1c5a      	adds	r2, r3, #1
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	3b01      	subs	r3, #1
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	4619      	mov	r1, r3
 80030d8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d148      	bne.n	8003170 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0220 	bic.w	r2, r2, #32
 80030ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	68da      	ldr	r2, [r3, #12]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	695a      	ldr	r2, [r3, #20]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f022 0201 	bic.w	r2, r2, #1
 800310c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2220      	movs	r2, #32
 8003112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800311a:	2b01      	cmp	r3, #1
 800311c:	d123      	bne.n	8003166 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68da      	ldr	r2, [r3, #12]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f022 0210 	bic.w	r2, r2, #16
 8003132:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0310 	and.w	r3, r3, #16
 800313e:	2b10      	cmp	r3, #16
 8003140:	d10a      	bne.n	8003158 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003142:	2300      	movs	r3, #0
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800315c:	4619      	mov	r1, r3
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7ff fd52 	bl	8002c08 <HAL_UARTEx_RxEventCallback>
 8003164:	e002      	b.n	800316c <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7ff fd33 	bl	8002bd2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800316c:	2300      	movs	r3, #0
 800316e:	e002      	b.n	8003176 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003170:	2300      	movs	r3, #0
 8003172:	e000      	b.n	8003176 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003174:	2302      	movs	r3, #2
  }
}
 8003176:	4618      	mov	r0, r3
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
	...

08003180 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	68da      	ldr	r2, [r3, #12]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80031ba:	f023 030c 	bic.w	r3, r3, #12
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6812      	ldr	r2, [r2, #0]
 80031c2:	68b9      	ldr	r1, [r7, #8]
 80031c4:	430b      	orrs	r3, r1
 80031c6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699a      	ldr	r2, [r3, #24]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a2c      	ldr	r2, [pc, #176]	; (8003294 <UART_SetConfig+0x114>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d103      	bne.n	80031f0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80031e8:	f7fe ff4e 	bl	8002088 <HAL_RCC_GetPCLK2Freq>
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	e002      	b.n	80031f6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80031f0:	f7fe ff36 	bl	8002060 <HAL_RCC_GetPCLK1Freq>
 80031f4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	4613      	mov	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4413      	add	r3, r2
 80031fe:	009a      	lsls	r2, r3, #2
 8003200:	441a      	add	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	fbb2 f3f3 	udiv	r3, r2, r3
 800320c:	4a22      	ldr	r2, [pc, #136]	; (8003298 <UART_SetConfig+0x118>)
 800320e:	fba2 2303 	umull	r2, r3, r2, r3
 8003212:	095b      	lsrs	r3, r3, #5
 8003214:	0119      	lsls	r1, r3, #4
 8003216:	68fa      	ldr	r2, [r7, #12]
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	009a      	lsls	r2, r3, #2
 8003220:	441a      	add	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	fbb2 f2f3 	udiv	r2, r2, r3
 800322c:	4b1a      	ldr	r3, [pc, #104]	; (8003298 <UART_SetConfig+0x118>)
 800322e:	fba3 0302 	umull	r0, r3, r3, r2
 8003232:	095b      	lsrs	r3, r3, #5
 8003234:	2064      	movs	r0, #100	; 0x64
 8003236:	fb00 f303 	mul.w	r3, r0, r3
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	3332      	adds	r3, #50	; 0x32
 8003240:	4a15      	ldr	r2, [pc, #84]	; (8003298 <UART_SetConfig+0x118>)
 8003242:	fba2 2303 	umull	r2, r3, r2, r3
 8003246:	095b      	lsrs	r3, r3, #5
 8003248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800324c:	4419      	add	r1, r3
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	4613      	mov	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	009a      	lsls	r2, r3, #2
 8003258:	441a      	add	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	fbb2 f2f3 	udiv	r2, r2, r3
 8003264:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <UART_SetConfig+0x118>)
 8003266:	fba3 0302 	umull	r0, r3, r3, r2
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	2064      	movs	r0, #100	; 0x64
 800326e:	fb00 f303 	mul.w	r3, r0, r3
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	3332      	adds	r3, #50	; 0x32
 8003278:	4a07      	ldr	r2, [pc, #28]	; (8003298 <UART_SetConfig+0x118>)
 800327a:	fba2 2303 	umull	r2, r3, r2, r3
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	f003 020f 	and.w	r2, r3, #15
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	440a      	add	r2, r1
 800328a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800328c:	bf00      	nop
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40013800 	.word	0x40013800
 8003298:	51eb851f 	.word	0x51eb851f

0800329c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800329c:	b480      	push	{r7}
 800329e:	b085      	sub	sp, #20
 80032a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032a2:	f3ef 8305 	mrs	r3, IPSR
 80032a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80032a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10f      	bne.n	80032ce <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032ae:	f3ef 8310 	mrs	r3, PRIMASK
 80032b2:	607b      	str	r3, [r7, #4]
  return(result);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d109      	bne.n	80032ce <osKernelInitialize+0x32>
 80032ba:	4b10      	ldr	r3, [pc, #64]	; (80032fc <osKernelInitialize+0x60>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d109      	bne.n	80032d6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80032c2:	f3ef 8311 	mrs	r3, BASEPRI
 80032c6:	603b      	str	r3, [r7, #0]
  return(result);
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80032ce:	f06f 0305 	mvn.w	r3, #5
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	e00c      	b.n	80032f0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80032d6:	4b09      	ldr	r3, [pc, #36]	; (80032fc <osKernelInitialize+0x60>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d105      	bne.n	80032ea <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80032de:	4b07      	ldr	r3, [pc, #28]	; (80032fc <osKernelInitialize+0x60>)
 80032e0:	2201      	movs	r2, #1
 80032e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80032e4:	2300      	movs	r3, #0
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	e002      	b.n	80032f0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80032ea:	f04f 33ff 	mov.w	r3, #4294967295
 80032ee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80032f0:	68fb      	ldr	r3, [r7, #12]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr
 80032fc:	20000120 	.word	0x20000120

08003300 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003300:	b580      	push	{r7, lr}
 8003302:	b084      	sub	sp, #16
 8003304:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003306:	f3ef 8305 	mrs	r3, IPSR
 800330a:	60bb      	str	r3, [r7, #8]
  return(result);
 800330c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800330e:	2b00      	cmp	r3, #0
 8003310:	d10f      	bne.n	8003332 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003312:	f3ef 8310 	mrs	r3, PRIMASK
 8003316:	607b      	str	r3, [r7, #4]
  return(result);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d109      	bne.n	8003332 <osKernelStart+0x32>
 800331e:	4b11      	ldr	r3, [pc, #68]	; (8003364 <osKernelStart+0x64>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2b02      	cmp	r3, #2
 8003324:	d109      	bne.n	800333a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003326:	f3ef 8311 	mrs	r3, BASEPRI
 800332a:	603b      	str	r3, [r7, #0]
  return(result);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <osKernelStart+0x3a>
    stat = osErrorISR;
 8003332:	f06f 0305 	mvn.w	r3, #5
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	e00e      	b.n	8003358 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800333a:	4b0a      	ldr	r3, [pc, #40]	; (8003364 <osKernelStart+0x64>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d107      	bne.n	8003352 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003342:	4b08      	ldr	r3, [pc, #32]	; (8003364 <osKernelStart+0x64>)
 8003344:	2202      	movs	r2, #2
 8003346:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003348:	f001 fdea 	bl	8004f20 <vTaskStartScheduler>
      stat = osOK;
 800334c:	2300      	movs	r3, #0
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	e002      	b.n	8003358 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003352:	f04f 33ff 	mov.w	r3, #4294967295
 8003356:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003358:	68fb      	ldr	r3, [r7, #12]
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	20000120 	.word	0x20000120

08003368 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003368:	b580      	push	{r7, lr}
 800336a:	b092      	sub	sp, #72	; 0x48
 800336c:	af04      	add	r7, sp, #16
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003374:	2300      	movs	r3, #0
 8003376:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003378:	f3ef 8305 	mrs	r3, IPSR
 800337c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003380:	2b00      	cmp	r3, #0
 8003382:	f040 8094 	bne.w	80034ae <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003386:	f3ef 8310 	mrs	r3, PRIMASK
 800338a:	623b      	str	r3, [r7, #32]
  return(result);
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	2b00      	cmp	r3, #0
 8003390:	f040 808d 	bne.w	80034ae <osThreadNew+0x146>
 8003394:	4b48      	ldr	r3, [pc, #288]	; (80034b8 <osThreadNew+0x150>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2b02      	cmp	r3, #2
 800339a:	d106      	bne.n	80033aa <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800339c:	f3ef 8311 	mrs	r3, BASEPRI
 80033a0:	61fb      	str	r3, [r7, #28]
  return(result);
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f040 8082 	bne.w	80034ae <osThreadNew+0x146>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d07e      	beq.n	80034ae <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80033b0:	2380      	movs	r3, #128	; 0x80
 80033b2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80033b4:	2318      	movs	r3, #24
 80033b6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80033b8:	2300      	movs	r3, #0
 80033ba:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80033bc:	f107 031b 	add.w	r3, r7, #27
 80033c0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80033c2:	f04f 33ff 	mov.w	r3, #4294967295
 80033c6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d045      	beq.n	800345a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <osThreadNew+0x74>
        name = attr->name;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d002      	beq.n	80033ea <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80033ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d008      	beq.n	8003402 <osThreadNew+0x9a>
 80033f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f2:	2b38      	cmp	r3, #56	; 0x38
 80033f4:	d805      	bhi.n	8003402 <osThreadNew+0x9a>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <osThreadNew+0x9e>
        return (NULL);
 8003402:	2300      	movs	r3, #0
 8003404:	e054      	b.n	80034b0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	089b      	lsrs	r3, r3, #2
 8003414:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00e      	beq.n	800343c <osThreadNew+0xd4>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	2bbb      	cmp	r3, #187	; 0xbb
 8003424:	d90a      	bls.n	800343c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800342a:	2b00      	cmp	r3, #0
 800342c:	d006      	beq.n	800343c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d002      	beq.n	800343c <osThreadNew+0xd4>
        mem = 1;
 8003436:	2301      	movs	r3, #1
 8003438:	62bb      	str	r3, [r7, #40]	; 0x28
 800343a:	e010      	b.n	800345e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10c      	bne.n	800345e <osThreadNew+0xf6>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d108      	bne.n	800345e <osThreadNew+0xf6>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d104      	bne.n	800345e <osThreadNew+0xf6>
          mem = 0;
 8003454:	2300      	movs	r3, #0
 8003456:	62bb      	str	r3, [r7, #40]	; 0x28
 8003458:	e001      	b.n	800345e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800345a:	2300      	movs	r3, #0
 800345c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800345e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003460:	2b01      	cmp	r3, #1
 8003462:	d110      	bne.n	8003486 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800346c:	9202      	str	r2, [sp, #8]
 800346e:	9301      	str	r3, [sp, #4]
 8003470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003478:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f001 fb6c 	bl	8004b58 <xTaskCreateStatic>
 8003480:	4603      	mov	r3, r0
 8003482:	617b      	str	r3, [r7, #20]
 8003484:	e013      	b.n	80034ae <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003488:	2b00      	cmp	r3, #0
 800348a:	d110      	bne.n	80034ae <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800348c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348e:	b29a      	uxth	r2, r3
 8003490:	f107 0314 	add.w	r3, r7, #20
 8003494:	9301      	str	r3, [sp, #4]
 8003496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800349e:	68f8      	ldr	r0, [r7, #12]
 80034a0:	f001 fbb6 	bl	8004c10 <xTaskCreate>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d001      	beq.n	80034ae <osThreadNew+0x146>
          hTask = NULL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80034ae:	697b      	ldr	r3, [r7, #20]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3738      	adds	r7, #56	; 0x38
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	20000120 	.word	0x20000120

080034bc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034c4:	f3ef 8305 	mrs	r3, IPSR
 80034c8:	613b      	str	r3, [r7, #16]
  return(result);
 80034ca:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10f      	bne.n	80034f0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034d0:	f3ef 8310 	mrs	r3, PRIMASK
 80034d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d109      	bne.n	80034f0 <osDelay+0x34>
 80034dc:	4b0d      	ldr	r3, [pc, #52]	; (8003514 <osDelay+0x58>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d109      	bne.n	80034f8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80034e4:	f3ef 8311 	mrs	r3, BASEPRI
 80034e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <osDelay+0x3c>
    stat = osErrorISR;
 80034f0:	f06f 0305 	mvn.w	r3, #5
 80034f4:	617b      	str	r3, [r7, #20]
 80034f6:	e007      	b.n	8003508 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d002      	beq.n	8003508 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f001 fcd8 	bl	8004eb8 <vTaskDelay>
    }
  }

  return (stat);
 8003508:	697b      	ldr	r3, [r7, #20]
}
 800350a:	4618      	mov	r0, r3
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	20000120 	.word	0x20000120

08003518 <TimerCallback>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

static void TimerCallback (TimerHandle_t hTimer) {
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	f002 fee9 	bl	80062f8 <pvTimerGetTimerID>
 8003526:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d005      	beq.n	800353a <TimerCallback+0x22>
    callb->func (callb->arg);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	6852      	ldr	r2, [r2, #4]
 8003536:	4610      	mov	r0, r2
 8003538:	4798      	blx	r3
  }
}
 800353a:	bf00      	nop
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
	...

08003544 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8003544:	b580      	push	{r7, lr}
 8003546:	b08e      	sub	sp, #56	; 0x38
 8003548:	af02      	add	r7, sp, #8
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	607a      	str	r2, [r7, #4]
 800354e:	603b      	str	r3, [r7, #0]
 8003550:	460b      	mov	r3, r1
 8003552:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8003554:	2300      	movs	r3, #0
 8003556:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003558:	f3ef 8305 	mrs	r3, IPSR
 800355c:	61bb      	str	r3, [r7, #24]
  return(result);
 800355e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (func != NULL)) {
 8003560:	2b00      	cmp	r3, #0
 8003562:	d16a      	bne.n	800363a <osTimerNew+0xf6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003564:	f3ef 8310 	mrs	r3, PRIMASK
 8003568:	617b      	str	r3, [r7, #20]
  return(result);
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d164      	bne.n	800363a <osTimerNew+0xf6>
 8003570:	4b34      	ldr	r3, [pc, #208]	; (8003644 <osTimerNew+0x100>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b02      	cmp	r3, #2
 8003576:	d105      	bne.n	8003584 <osTimerNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003578:	f3ef 8311 	mrs	r3, BASEPRI
 800357c:	613b      	str	r3, [r7, #16]
  return(result);
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d15a      	bne.n	800363a <osTimerNew+0xf6>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d057      	beq.n	800363a <osTimerNew+0xf6>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800358a:	2008      	movs	r0, #8
 800358c:	f003 f8c6 	bl	800671c <pvPortMalloc>
 8003590:	61f8      	str	r0, [r7, #28]

    if (callb != NULL) {
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d050      	beq.n	800363a <osTimerNew+0xf6>
      callb->func = func;
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80035a4:	7afb      	ldrb	r3, [r7, #11]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d102      	bne.n	80035b0 <osTimerNew+0x6c>
        reload = pdFALSE;
 80035aa:	2300      	movs	r3, #0
 80035ac:	627b      	str	r3, [r7, #36]	; 0x24
 80035ae:	e001      	b.n	80035b4 <osTimerNew+0x70>
      } else {
        reload = pdTRUE;
 80035b0:	2301      	movs	r3, #1
 80035b2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      mem  = -1;
 80035b4:	f04f 33ff 	mov.w	r3, #4294967295
 80035b8:	623b      	str	r3, [r7, #32]
      name = NULL;
 80035ba:	2300      	movs	r3, #0
 80035bc:	62fb      	str	r3, [r7, #44]	; 0x2c

      if (attr != NULL) {
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d01c      	beq.n	80035fe <osTimerNew+0xba>
        if (attr->name != NULL) {
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <osTimerNew+0x8e>
          name = attr->name;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d006      	beq.n	80035e8 <osTimerNew+0xa4>
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	2b2f      	cmp	r3, #47	; 0x2f
 80035e0:	d902      	bls.n	80035e8 <osTimerNew+0xa4>
          mem = 1;
 80035e2:	2301      	movs	r3, #1
 80035e4:	623b      	str	r3, [r7, #32]
 80035e6:	e00c      	b.n	8003602 <osTimerNew+0xbe>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d108      	bne.n	8003602 <osTimerNew+0xbe>
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d104      	bne.n	8003602 <osTimerNew+0xbe>
            mem = 0;
 80035f8:	2300      	movs	r3, #0
 80035fa:	623b      	str	r3, [r7, #32]
 80035fc:	e001      	b.n	8003602 <osTimerNew+0xbe>
          }
        }
      }
      else {
        mem = 0;
 80035fe:	2300      	movs	r3, #0
 8003600:	623b      	str	r3, [r7, #32]
      }

      if (mem == 1) {
 8003602:	6a3b      	ldr	r3, [r7, #32]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d10c      	bne.n	8003622 <osTimerNew+0xde>
        hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	9301      	str	r3, [sp, #4]
 800360e:	4b0e      	ldr	r3, [pc, #56]	; (8003648 <osTimerNew+0x104>)
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003616:	2101      	movs	r1, #1
 8003618:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800361a:	f002 fb34 	bl	8005c86 <xTimerCreateStatic>
 800361e:	62b8      	str	r0, [r7, #40]	; 0x28
 8003620:	e00b      	b.n	800363a <osTimerNew+0xf6>
      }
      else {
        if (mem == 0) {
 8003622:	6a3b      	ldr	r3, [r7, #32]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d108      	bne.n	800363a <osTimerNew+0xf6>
          hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8003628:	4b07      	ldr	r3, [pc, #28]	; (8003648 <osTimerNew+0x104>)
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003630:	2101      	movs	r1, #1
 8003632:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003634:	f002 fb06 	bl	8005c44 <xTimerCreate>
 8003638:	62b8      	str	r0, [r7, #40]	; 0x28
        }
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800363a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800363c:	4618      	mov	r0, r3
 800363e:	3730      	adds	r7, #48	; 0x30
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	20000120 	.word	0x20000120
 8003648:	08003519 	.word	0x08003519

0800364c <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800364c:	b580      	push	{r7, lr}
 800364e:	b08a      	sub	sp, #40	; 0x28
 8003650:	af02      	add	r7, sp, #8
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800365a:	f3ef 8305 	mrs	r3, IPSR
 800365e:	617b      	str	r3, [r7, #20]
  return(result);
 8003660:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003662:	2b00      	cmp	r3, #0
 8003664:	d10f      	bne.n	8003686 <osTimerStart+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003666:	f3ef 8310 	mrs	r3, PRIMASK
 800366a:	613b      	str	r3, [r7, #16]
  return(result);
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d109      	bne.n	8003686 <osTimerStart+0x3a>
 8003672:	4b15      	ldr	r3, [pc, #84]	; (80036c8 <osTimerStart+0x7c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b02      	cmp	r3, #2
 8003678:	d109      	bne.n	800368e <osTimerStart+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800367a:	f3ef 8311 	mrs	r3, BASEPRI
 800367e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <osTimerStart+0x42>
    stat = osErrorISR;
 8003686:	f06f 0305 	mvn.w	r3, #5
 800368a:	61fb      	str	r3, [r7, #28]
 800368c:	e017      	b.n	80036be <osTimerStart+0x72>
  }
  else if (hTimer == NULL) {
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d103      	bne.n	800369c <osTimerStart+0x50>
    stat = osErrorParameter;
 8003694:	f06f 0303 	mvn.w	r3, #3
 8003698:	61fb      	str	r3, [r7, #28]
 800369a:	e010      	b.n	80036be <osTimerStart+0x72>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800369c:	2300      	movs	r3, #0
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	2300      	movs	r3, #0
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	2104      	movs	r1, #4
 80036a6:	69b8      	ldr	r0, [r7, #24]
 80036a8:	f002 fb5c 	bl	8005d64 <xTimerGenericCommand>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d102      	bne.n	80036b8 <osTimerStart+0x6c>
      stat = osOK;
 80036b2:	2300      	movs	r3, #0
 80036b4:	61fb      	str	r3, [r7, #28]
 80036b6:	e002      	b.n	80036be <osTimerStart+0x72>
    } else {
      stat = osErrorResource;
 80036b8:	f06f 0302 	mvn.w	r3, #2
 80036bc:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 80036be:	69fb      	ldr	r3, [r7, #28]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3720      	adds	r7, #32
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	20000120 	.word	0x20000120

080036cc <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08c      	sub	sp, #48	; 0x30
 80036d0:	af02      	add	r7, sp, #8
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80036d8:	2300      	movs	r3, #0
 80036da:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036dc:	f3ef 8305 	mrs	r3, IPSR
 80036e0:	61bb      	str	r3, [r7, #24]
  return(result);
 80036e2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f040 8086 	bne.w	80037f6 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ea:	f3ef 8310 	mrs	r3, PRIMASK
 80036ee:	617b      	str	r3, [r7, #20]
  return(result);
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d17f      	bne.n	80037f6 <osSemaphoreNew+0x12a>
 80036f6:	4b42      	ldr	r3, [pc, #264]	; (8003800 <osSemaphoreNew+0x134>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d105      	bne.n	800370a <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80036fe:	f3ef 8311 	mrs	r3, BASEPRI
 8003702:	613b      	str	r3, [r7, #16]
  return(result);
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d175      	bne.n	80037f6 <osSemaphoreNew+0x12a>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d072      	beq.n	80037f6 <osSemaphoreNew+0x12a>
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	429a      	cmp	r2, r3
 8003716:	d86e      	bhi.n	80037f6 <osSemaphoreNew+0x12a>
    mem = -1;
 8003718:	f04f 33ff 	mov.w	r3, #4294967295
 800371c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d015      	beq.n	8003750 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d006      	beq.n	800373a <osSemaphoreNew+0x6e>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	2b4f      	cmp	r3, #79	; 0x4f
 8003732:	d902      	bls.n	800373a <osSemaphoreNew+0x6e>
        mem = 1;
 8003734:	2301      	movs	r3, #1
 8003736:	623b      	str	r3, [r7, #32]
 8003738:	e00c      	b.n	8003754 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d108      	bne.n	8003754 <osSemaphoreNew+0x88>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d104      	bne.n	8003754 <osSemaphoreNew+0x88>
          mem = 0;
 800374a:	2300      	movs	r3, #0
 800374c:	623b      	str	r3, [r7, #32]
 800374e:	e001      	b.n	8003754 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8003750:	2300      	movs	r3, #0
 8003752:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375a:	d04c      	beq.n	80037f6 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d128      	bne.n	80037b4 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8003762:	6a3b      	ldr	r3, [r7, #32]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d10a      	bne.n	800377e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	2203      	movs	r2, #3
 800376e:	9200      	str	r2, [sp, #0]
 8003770:	2200      	movs	r2, #0
 8003772:	2100      	movs	r1, #0
 8003774:	2001      	movs	r0, #1
 8003776:	f000 fa4d 	bl	8003c14 <xQueueGenericCreateStatic>
 800377a:	6278      	str	r0, [r7, #36]	; 0x24
 800377c:	e005      	b.n	800378a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800377e:	2203      	movs	r2, #3
 8003780:	2100      	movs	r1, #0
 8003782:	2001      	movs	r0, #1
 8003784:	f000 fabd 	bl	8003d02 <xQueueGenericCreate>
 8003788:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	2b00      	cmp	r3, #0
 800378e:	d022      	beq.n	80037d6 <osSemaphoreNew+0x10a>
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d01f      	beq.n	80037d6 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003796:	2300      	movs	r3, #0
 8003798:	2200      	movs	r2, #0
 800379a:	2100      	movs	r1, #0
 800379c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800379e:	f000 fb7b 	bl	8003e98 <xQueueGenericSend>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d016      	beq.n	80037d6 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 80037a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037aa:	f001 f805 	bl	80047b8 <vQueueDelete>
            hSemaphore = NULL;
 80037ae:	2300      	movs	r3, #0
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24
 80037b2:	e010      	b.n	80037d6 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d108      	bne.n	80037cc <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	461a      	mov	r2, r3
 80037c0:	68b9      	ldr	r1, [r7, #8]
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 fafe 	bl	8003dc4 <xQueueCreateCountingSemaphoreStatic>
 80037c8:	6278      	str	r0, [r7, #36]	; 0x24
 80037ca:	e004      	b.n	80037d6 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80037cc:	68b9      	ldr	r1, [r7, #8]
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 fb2f 	bl	8003e32 <xQueueCreateCountingSemaphore>
 80037d4:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00c      	beq.n	80037f6 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <osSemaphoreNew+0x11e>
          name = attr->name;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	61fb      	str	r3, [r7, #28]
 80037e8:	e001      	b.n	80037ee <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80037ea:	2300      	movs	r3, #0
 80037ec:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80037ee:	69f9      	ldr	r1, [r7, #28]
 80037f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037f2:	f001 f92b 	bl	8004a4c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3728      	adds	r7, #40	; 0x28
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	20000120 	.word	0x20000120

08003804 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003804:	b580      	push	{r7, lr}
 8003806:	b088      	sub	sp, #32
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003812:	2300      	movs	r3, #0
 8003814:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d103      	bne.n	8003824 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800381c:	f06f 0303 	mvn.w	r3, #3
 8003820:	61fb      	str	r3, [r7, #28]
 8003822:	e04b      	b.n	80038bc <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003824:	f3ef 8305 	mrs	r3, IPSR
 8003828:	617b      	str	r3, [r7, #20]
  return(result);
 800382a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800382c:	2b00      	cmp	r3, #0
 800382e:	d10f      	bne.n	8003850 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003830:	f3ef 8310 	mrs	r3, PRIMASK
 8003834:	613b      	str	r3, [r7, #16]
  return(result);
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d109      	bne.n	8003850 <osSemaphoreAcquire+0x4c>
 800383c:	4b22      	ldr	r3, [pc, #136]	; (80038c8 <osSemaphoreAcquire+0xc4>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b02      	cmp	r3, #2
 8003842:	d128      	bne.n	8003896 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003844:	f3ef 8311 	mrs	r3, BASEPRI
 8003848:	60fb      	str	r3, [r7, #12]
  return(result);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d022      	beq.n	8003896 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8003856:	f06f 0303 	mvn.w	r3, #3
 800385a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800385c:	e02d      	b.n	80038ba <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800385e:	2300      	movs	r3, #0
 8003860:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003862:	f107 0308 	add.w	r3, r7, #8
 8003866:	461a      	mov	r2, r3
 8003868:	2100      	movs	r1, #0
 800386a:	69b8      	ldr	r0, [r7, #24]
 800386c:	f000 ff24 	bl	80046b8 <xQueueReceiveFromISR>
 8003870:	4603      	mov	r3, r0
 8003872:	2b01      	cmp	r3, #1
 8003874:	d003      	beq.n	800387e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8003876:	f06f 0302 	mvn.w	r3, #2
 800387a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800387c:	e01d      	b.n	80038ba <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d01a      	beq.n	80038ba <osSemaphoreAcquire+0xb6>
 8003884:	4b11      	ldr	r3, [pc, #68]	; (80038cc <osSemaphoreAcquire+0xc8>)
 8003886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	f3bf 8f4f 	dsb	sy
 8003890:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8003894:	e011      	b.n	80038ba <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8003896:	6839      	ldr	r1, [r7, #0]
 8003898:	69b8      	ldr	r0, [r7, #24]
 800389a:	f000 fe01 	bl	80044a0 <xQueueSemaphoreTake>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d00b      	beq.n	80038bc <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80038aa:	f06f 0301 	mvn.w	r3, #1
 80038ae:	61fb      	str	r3, [r7, #28]
 80038b0:	e004      	b.n	80038bc <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80038b2:	f06f 0302 	mvn.w	r3, #2
 80038b6:	61fb      	str	r3, [r7, #28]
 80038b8:	e000      	b.n	80038bc <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80038ba:	bf00      	nop
      }
    }
  }

  return (stat);
 80038bc:	69fb      	ldr	r3, [r7, #28]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3720      	adds	r7, #32
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	20000120 	.word	0x20000120
 80038cc:	e000ed04 	.word	0xe000ed04

080038d0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b088      	sub	sp, #32
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80038dc:	2300      	movs	r3, #0
 80038de:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d103      	bne.n	80038ee <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80038e6:	f06f 0303 	mvn.w	r3, #3
 80038ea:	61fb      	str	r3, [r7, #28]
 80038ec:	e03e      	b.n	800396c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038ee:	f3ef 8305 	mrs	r3, IPSR
 80038f2:	617b      	str	r3, [r7, #20]
  return(result);
 80038f4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10f      	bne.n	800391a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038fa:	f3ef 8310 	mrs	r3, PRIMASK
 80038fe:	613b      	str	r3, [r7, #16]
  return(result);
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d109      	bne.n	800391a <osSemaphoreRelease+0x4a>
 8003906:	4b1c      	ldr	r3, [pc, #112]	; (8003978 <osSemaphoreRelease+0xa8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2b02      	cmp	r3, #2
 800390c:	d120      	bne.n	8003950 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800390e:	f3ef 8311 	mrs	r3, BASEPRI
 8003912:	60fb      	str	r3, [r7, #12]
  return(result);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d01a      	beq.n	8003950 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800391a:	2300      	movs	r3, #0
 800391c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800391e:	f107 0308 	add.w	r3, r7, #8
 8003922:	4619      	mov	r1, r3
 8003924:	69b8      	ldr	r0, [r7, #24]
 8003926:	f000 fc4d 	bl	80041c4 <xQueueGiveFromISR>
 800392a:	4603      	mov	r3, r0
 800392c:	2b01      	cmp	r3, #1
 800392e:	d003      	beq.n	8003938 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8003930:	f06f 0302 	mvn.w	r3, #2
 8003934:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003936:	e018      	b.n	800396a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d015      	beq.n	800396a <osSemaphoreRelease+0x9a>
 800393e:	4b0f      	ldr	r3, [pc, #60]	; (800397c <osSemaphoreRelease+0xac>)
 8003940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003944:	601a      	str	r2, [r3, #0]
 8003946:	f3bf 8f4f 	dsb	sy
 800394a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800394e:	e00c      	b.n	800396a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003950:	2300      	movs	r3, #0
 8003952:	2200      	movs	r2, #0
 8003954:	2100      	movs	r1, #0
 8003956:	69b8      	ldr	r0, [r7, #24]
 8003958:	f000 fa9e 	bl	8003e98 <xQueueGenericSend>
 800395c:	4603      	mov	r3, r0
 800395e:	2b01      	cmp	r3, #1
 8003960:	d004      	beq.n	800396c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8003962:	f06f 0302 	mvn.w	r3, #2
 8003966:	61fb      	str	r3, [r7, #28]
 8003968:	e000      	b.n	800396c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800396a:	bf00      	nop
    }
  }

  return (stat);
 800396c:	69fb      	ldr	r3, [r7, #28]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3720      	adds	r7, #32
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	20000120 	.word	0x20000120
 800397c:	e000ed04 	.word	0xe000ed04

08003980 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4a06      	ldr	r2, [pc, #24]	; (80039a8 <vApplicationGetIdleTaskMemory+0x28>)
 8003990:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	4a05      	ldr	r2, [pc, #20]	; (80039ac <vApplicationGetIdleTaskMemory+0x2c>)
 8003996:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2280      	movs	r2, #128	; 0x80
 800399c:	601a      	str	r2, [r3, #0]
}
 800399e:	bf00      	nop
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bc80      	pop	{r7}
 80039a6:	4770      	bx	lr
 80039a8:	20000124 	.word	0x20000124
 80039ac:	200001e0 	.word	0x200001e0

080039b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	4a07      	ldr	r2, [pc, #28]	; (80039dc <vApplicationGetTimerTaskMemory+0x2c>)
 80039c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	4a06      	ldr	r2, [pc, #24]	; (80039e0 <vApplicationGetTimerTaskMemory+0x30>)
 80039c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039ce:	601a      	str	r2, [r3, #0]
}
 80039d0:	bf00      	nop
 80039d2:	3714      	adds	r7, #20
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bc80      	pop	{r7}
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	200003e0 	.word	0x200003e0
 80039e0:	2000049c 	.word	0x2000049c

080039e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f103 0208 	add.w	r2, r3, #8
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f04f 32ff 	mov.w	r2, #4294967295
 80039fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f103 0208 	add.w	r2, r3, #8
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f103 0208 	add.w	r2, r3, #8
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bc80      	pop	{r7}
 8003a20:	4770      	bx	lr

08003a22 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003a22:	b480      	push	{r7}
 8003a24:	b083      	sub	sp, #12
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bc80      	pop	{r7}
 8003a38:	4770      	bx	lr

08003a3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b085      	sub	sp, #20
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
 8003a42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	1c5a      	adds	r2, r3, #1
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	601a      	str	r2, [r3, #0]
}
 8003a76:	bf00      	nop
 8003a78:	3714      	adds	r7, #20
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bc80      	pop	{r7}
 8003a7e:	4770      	bx	lr

08003a80 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a96:	d103      	bne.n	8003aa0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	60fb      	str	r3, [r7, #12]
 8003a9e:	e00c      	b.n	8003aba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3308      	adds	r3, #8
 8003aa4:	60fb      	str	r3, [r7, #12]
 8003aa6:	e002      	b.n	8003aae <vListInsert+0x2e>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d2f6      	bcs.n	8003aa8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	601a      	str	r2, [r3, #0]
}
 8003ae6:	bf00      	nop
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr

08003af0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6892      	ldr	r2, [r2, #8]
 8003b06:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6852      	ldr	r2, [r2, #4]
 8003b10:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d103      	bne.n	8003b24 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	1e5a      	subs	r2, r3, #1
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3714      	adds	r7, #20
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bc80      	pop	{r7}
 8003b40:	4770      	bx	lr
	...

08003b44 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10a      	bne.n	8003b6e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5c:	f383 8811 	msr	BASEPRI, r3
 8003b60:	f3bf 8f6f 	isb	sy
 8003b64:	f3bf 8f4f 	dsb	sy
 8003b68:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003b6a:	bf00      	nop
 8003b6c:	e7fe      	b.n	8003b6c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003b6e:	f002 fcd5 	bl	800651c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7a:	68f9      	ldr	r1, [r7, #12]
 8003b7c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003b7e:	fb01 f303 	mul.w	r3, r1, r3
 8003b82:	441a      	add	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	68f9      	ldr	r1, [r7, #12]
 8003ba2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003ba4:	fb01 f303 	mul.w	r3, r1, r3
 8003ba8:	441a      	add	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	22ff      	movs	r2, #255	; 0xff
 8003bb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	22ff      	movs	r2, #255	; 0xff
 8003bba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d114      	bne.n	8003bee <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d01a      	beq.n	8003c02 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	3310      	adds	r3, #16
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f001 fc41 	bl	8005458 <xTaskRemoveFromEventList>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d012      	beq.n	8003c02 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003bdc:	4b0c      	ldr	r3, [pc, #48]	; (8003c10 <xQueueGenericReset+0xcc>)
 8003bde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	f3bf 8f4f 	dsb	sy
 8003be8:	f3bf 8f6f 	isb	sy
 8003bec:	e009      	b.n	8003c02 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	3310      	adds	r3, #16
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7ff fef6 	bl	80039e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	3324      	adds	r3, #36	; 0x24
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7ff fef1 	bl	80039e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003c02:	f002 fcbb 	bl	800657c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003c06:	2301      	movs	r3, #1
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3710      	adds	r7, #16
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	e000ed04 	.word	0xe000ed04

08003c14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b08e      	sub	sp, #56	; 0x38
 8003c18:	af02      	add	r7, sp, #8
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	60b9      	str	r1, [r7, #8]
 8003c1e:	607a      	str	r2, [r7, #4]
 8003c20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10a      	bne.n	8003c3e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2c:	f383 8811 	msr	BASEPRI, r3
 8003c30:	f3bf 8f6f 	isb	sy
 8003c34:	f3bf 8f4f 	dsb	sy
 8003c38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003c3a:	bf00      	nop
 8003c3c:	e7fe      	b.n	8003c3c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10a      	bne.n	8003c5a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c48:	f383 8811 	msr	BASEPRI, r3
 8003c4c:	f3bf 8f6f 	isb	sy
 8003c50:	f3bf 8f4f 	dsb	sy
 8003c54:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003c56:	bf00      	nop
 8003c58:	e7fe      	b.n	8003c58 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d002      	beq.n	8003c66 <xQueueGenericCreateStatic+0x52>
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <xQueueGenericCreateStatic+0x56>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <xQueueGenericCreateStatic+0x58>
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10a      	bne.n	8003c86 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c74:	f383 8811 	msr	BASEPRI, r3
 8003c78:	f3bf 8f6f 	isb	sy
 8003c7c:	f3bf 8f4f 	dsb	sy
 8003c80:	623b      	str	r3, [r7, #32]
}
 8003c82:	bf00      	nop
 8003c84:	e7fe      	b.n	8003c84 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d102      	bne.n	8003c92 <xQueueGenericCreateStatic+0x7e>
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <xQueueGenericCreateStatic+0x82>
 8003c92:	2301      	movs	r3, #1
 8003c94:	e000      	b.n	8003c98 <xQueueGenericCreateStatic+0x84>
 8003c96:	2300      	movs	r3, #0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10a      	bne.n	8003cb2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	61fb      	str	r3, [r7, #28]
}
 8003cae:	bf00      	nop
 8003cb0:	e7fe      	b.n	8003cb0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003cb2:	2350      	movs	r3, #80	; 0x50
 8003cb4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	2b50      	cmp	r3, #80	; 0x50
 8003cba:	d00a      	beq.n	8003cd2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc0:	f383 8811 	msr	BASEPRI, r3
 8003cc4:	f3bf 8f6f 	isb	sy
 8003cc8:	f3bf 8f4f 	dsb	sy
 8003ccc:	61bb      	str	r3, [r7, #24]
}
 8003cce:	bf00      	nop
 8003cd0:	e7fe      	b.n	8003cd0 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00d      	beq.n	8003cf8 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ce4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cea:	9300      	str	r3, [sp, #0]
 8003cec:	4613      	mov	r3, r2
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	68b9      	ldr	r1, [r7, #8]
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 f843 	bl	8003d7e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3730      	adds	r7, #48	; 0x30
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b08a      	sub	sp, #40	; 0x28
 8003d06:	af02      	add	r7, sp, #8
 8003d08:	60f8      	str	r0, [r7, #12]
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d10a      	bne.n	8003d2c <xQueueGenericCreate+0x2a>
	__asm volatile
 8003d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d1a:	f383 8811 	msr	BASEPRI, r3
 8003d1e:	f3bf 8f6f 	isb	sy
 8003d22:	f3bf 8f4f 	dsb	sy
 8003d26:	613b      	str	r3, [r7, #16]
}
 8003d28:	bf00      	nop
 8003d2a:	e7fe      	b.n	8003d2a <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d102      	bne.n	8003d38 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003d32:	2300      	movs	r3, #0
 8003d34:	61fb      	str	r3, [r7, #28]
 8003d36:	e004      	b.n	8003d42 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	fb02 f303 	mul.w	r3, r2, r3
 8003d40:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	3350      	adds	r3, #80	; 0x50
 8003d46:	4618      	mov	r0, r3
 8003d48:	f002 fce8 	bl	800671c <pvPortMalloc>
 8003d4c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00f      	beq.n	8003d74 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	3350      	adds	r3, #80	; 0x50
 8003d58:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d62:	79fa      	ldrb	r2, [r7, #7]
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	68b9      	ldr	r1, [r7, #8]
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 f805 	bl	8003d7e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003d74:	69bb      	ldr	r3, [r7, #24]
	}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3720      	adds	r7, #32
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b084      	sub	sp, #16
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	60f8      	str	r0, [r7, #12]
 8003d86:	60b9      	str	r1, [r7, #8]
 8003d88:	607a      	str	r2, [r7, #4]
 8003d8a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d103      	bne.n	8003d9a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	601a      	str	r2, [r3, #0]
 8003d98:	e002      	b.n	8003da0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	68ba      	ldr	r2, [r7, #8]
 8003daa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003dac:	2101      	movs	r1, #1
 8003dae:	69b8      	ldr	r0, [r7, #24]
 8003db0:	f7ff fec8 	bl	8003b44 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	78fa      	ldrb	r2, [r7, #3]
 8003db8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003dbc:	bf00      	nop
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b08a      	sub	sp, #40	; 0x28
 8003dc8:	af02      	add	r7, sp, #8
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10a      	bne.n	8003dec <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8003dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dda:	f383 8811 	msr	BASEPRI, r3
 8003dde:	f3bf 8f6f 	isb	sy
 8003de2:	f3bf 8f4f 	dsb	sy
 8003de6:	61bb      	str	r3, [r7, #24]
}
 8003de8:	bf00      	nop
 8003dea:	e7fe      	b.n	8003dea <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003dec:	68ba      	ldr	r2, [r7, #8]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d90a      	bls.n	8003e0a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8003df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df8:	f383 8811 	msr	BASEPRI, r3
 8003dfc:	f3bf 8f6f 	isb	sy
 8003e00:	f3bf 8f4f 	dsb	sy
 8003e04:	617b      	str	r3, [r7, #20]
}
 8003e06:	bf00      	nop
 8003e08:	e7fe      	b.n	8003e08 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	2100      	movs	r1, #0
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f7ff fefd 	bl	8003c14 <xQueueGenericCreateStatic>
 8003e1a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003e28:	69fb      	ldr	r3, [r7, #28]
	}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3720      	adds	r7, #32
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b086      	sub	sp, #24
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
 8003e3a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10a      	bne.n	8003e58 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8003e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e46:	f383 8811 	msr	BASEPRI, r3
 8003e4a:	f3bf 8f6f 	isb	sy
 8003e4e:	f3bf 8f4f 	dsb	sy
 8003e52:	613b      	str	r3, [r7, #16]
}
 8003e54:	bf00      	nop
 8003e56:	e7fe      	b.n	8003e56 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d90a      	bls.n	8003e76 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8003e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e64:	f383 8811 	msr	BASEPRI, r3
 8003e68:	f3bf 8f6f 	isb	sy
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	60fb      	str	r3, [r7, #12]
}
 8003e72:	bf00      	nop
 8003e74:	e7fe      	b.n	8003e74 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003e76:	2202      	movs	r2, #2
 8003e78:	2100      	movs	r1, #0
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7ff ff41 	bl	8003d02 <xQueueGenericCreate>
 8003e80:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d002      	beq.n	8003e8e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003e8e:	697b      	ldr	r3, [r7, #20]
	}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3718      	adds	r7, #24
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b08e      	sub	sp, #56	; 0x38
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
 8003ea4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10a      	bne.n	8003eca <xQueueGenericSend+0x32>
	__asm volatile
 8003eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003ec6:	bf00      	nop
 8003ec8:	e7fe      	b.n	8003ec8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d103      	bne.n	8003ed8 <xQueueGenericSend+0x40>
 8003ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d101      	bne.n	8003edc <xQueueGenericSend+0x44>
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e000      	b.n	8003ede <xQueueGenericSend+0x46>
 8003edc:	2300      	movs	r3, #0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10a      	bne.n	8003ef8 <xQueueGenericSend+0x60>
	__asm volatile
 8003ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee6:	f383 8811 	msr	BASEPRI, r3
 8003eea:	f3bf 8f6f 	isb	sy
 8003eee:	f3bf 8f4f 	dsb	sy
 8003ef2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ef4:	bf00      	nop
 8003ef6:	e7fe      	b.n	8003ef6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d103      	bne.n	8003f06 <xQueueGenericSend+0x6e>
 8003efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d101      	bne.n	8003f0a <xQueueGenericSend+0x72>
 8003f06:	2301      	movs	r3, #1
 8003f08:	e000      	b.n	8003f0c <xQueueGenericSend+0x74>
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10a      	bne.n	8003f26 <xQueueGenericSend+0x8e>
	__asm volatile
 8003f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f14:	f383 8811 	msr	BASEPRI, r3
 8003f18:	f3bf 8f6f 	isb	sy
 8003f1c:	f3bf 8f4f 	dsb	sy
 8003f20:	623b      	str	r3, [r7, #32]
}
 8003f22:	bf00      	nop
 8003f24:	e7fe      	b.n	8003f24 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f26:	f001 fc5d 	bl	80057e4 <xTaskGetSchedulerState>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d102      	bne.n	8003f36 <xQueueGenericSend+0x9e>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <xQueueGenericSend+0xa2>
 8003f36:	2301      	movs	r3, #1
 8003f38:	e000      	b.n	8003f3c <xQueueGenericSend+0xa4>
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10a      	bne.n	8003f56 <xQueueGenericSend+0xbe>
	__asm volatile
 8003f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f44:	f383 8811 	msr	BASEPRI, r3
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	f3bf 8f4f 	dsb	sy
 8003f50:	61fb      	str	r3, [r7, #28]
}
 8003f52:	bf00      	nop
 8003f54:	e7fe      	b.n	8003f54 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f56:	f002 fae1 	bl	800651c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d302      	bcc.n	8003f6c <xQueueGenericSend+0xd4>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d129      	bne.n	8003fc0 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	68b9      	ldr	r1, [r7, #8]
 8003f70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f72:	f000 fc5b 	bl	800482c <prvCopyDataToQueue>
 8003f76:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d010      	beq.n	8003fa2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f82:	3324      	adds	r3, #36	; 0x24
 8003f84:	4618      	mov	r0, r3
 8003f86:	f001 fa67 	bl	8005458 <xTaskRemoveFromEventList>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d013      	beq.n	8003fb8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003f90:	4b3f      	ldr	r3, [pc, #252]	; (8004090 <xQueueGenericSend+0x1f8>)
 8003f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	f3bf 8f4f 	dsb	sy
 8003f9c:	f3bf 8f6f 	isb	sy
 8003fa0:	e00a      	b.n	8003fb8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d007      	beq.n	8003fb8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003fa8:	4b39      	ldr	r3, [pc, #228]	; (8004090 <xQueueGenericSend+0x1f8>)
 8003faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	f3bf 8f4f 	dsb	sy
 8003fb4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003fb8:	f002 fae0 	bl	800657c <vPortExitCritical>
				return pdPASS;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e063      	b.n	8004088 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d103      	bne.n	8003fce <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003fc6:	f002 fad9 	bl	800657c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	e05c      	b.n	8004088 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d106      	bne.n	8003fe2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003fd4:	f107 0314 	add.w	r3, r7, #20
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f001 faa1 	bl	8005520 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003fe2:	f002 facb 	bl	800657c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003fe6:	f001 f80b 	bl	8005000 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003fea:	f002 fa97 	bl	800651c <vPortEnterCritical>
 8003fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ff4:	b25b      	sxtb	r3, r3
 8003ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffa:	d103      	bne.n	8004004 <xQueueGenericSend+0x16c>
 8003ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004006:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800400a:	b25b      	sxtb	r3, r3
 800400c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004010:	d103      	bne.n	800401a <xQueueGenericSend+0x182>
 8004012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800401a:	f002 faaf 	bl	800657c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800401e:	1d3a      	adds	r2, r7, #4
 8004020:	f107 0314 	add.w	r3, r7, #20
 8004024:	4611      	mov	r1, r2
 8004026:	4618      	mov	r0, r3
 8004028:	f001 fa90 	bl	800554c <xTaskCheckForTimeOut>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d124      	bne.n	800407c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004032:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004034:	f000 fcf2 	bl	8004a1c <prvIsQueueFull>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d018      	beq.n	8004070 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800403e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004040:	3310      	adds	r3, #16
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	4611      	mov	r1, r2
 8004046:	4618      	mov	r0, r3
 8004048:	f001 f9b6 	bl	80053b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800404c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800404e:	f000 fc7d 	bl	800494c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004052:	f000 ffe3 	bl	800501c <xTaskResumeAll>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	f47f af7c 	bne.w	8003f56 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800405e:	4b0c      	ldr	r3, [pc, #48]	; (8004090 <xQueueGenericSend+0x1f8>)
 8004060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	f3bf 8f4f 	dsb	sy
 800406a:	f3bf 8f6f 	isb	sy
 800406e:	e772      	b.n	8003f56 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004070:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004072:	f000 fc6b 	bl	800494c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004076:	f000 ffd1 	bl	800501c <xTaskResumeAll>
 800407a:	e76c      	b.n	8003f56 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800407c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800407e:	f000 fc65 	bl	800494c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004082:	f000 ffcb 	bl	800501c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004086:	2300      	movs	r3, #0
		}
	}
}
 8004088:	4618      	mov	r0, r3
 800408a:	3738      	adds	r7, #56	; 0x38
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	e000ed04 	.word	0xe000ed04

08004094 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b08e      	sub	sp, #56	; 0x38
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
 80040a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80040a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10a      	bne.n	80040c2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80040ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b0:	f383 8811 	msr	BASEPRI, r3
 80040b4:	f3bf 8f6f 	isb	sy
 80040b8:	f3bf 8f4f 	dsb	sy
 80040bc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80040be:	bf00      	nop
 80040c0:	e7fe      	b.n	80040c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d103      	bne.n	80040d0 <xQueueGenericSendFromISR+0x3c>
 80040c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <xQueueGenericSendFromISR+0x40>
 80040d0:	2301      	movs	r3, #1
 80040d2:	e000      	b.n	80040d6 <xQueueGenericSendFromISR+0x42>
 80040d4:	2300      	movs	r3, #0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10a      	bne.n	80040f0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80040da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040de:	f383 8811 	msr	BASEPRI, r3
 80040e2:	f3bf 8f6f 	isb	sy
 80040e6:	f3bf 8f4f 	dsb	sy
 80040ea:	623b      	str	r3, [r7, #32]
}
 80040ec:	bf00      	nop
 80040ee:	e7fe      	b.n	80040ee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d103      	bne.n	80040fe <xQueueGenericSendFromISR+0x6a>
 80040f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d101      	bne.n	8004102 <xQueueGenericSendFromISR+0x6e>
 80040fe:	2301      	movs	r3, #1
 8004100:	e000      	b.n	8004104 <xQueueGenericSendFromISR+0x70>
 8004102:	2300      	movs	r3, #0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10a      	bne.n	800411e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410c:	f383 8811 	msr	BASEPRI, r3
 8004110:	f3bf 8f6f 	isb	sy
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	61fb      	str	r3, [r7, #28]
}
 800411a:	bf00      	nop
 800411c:	e7fe      	b.n	800411c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800411e:	f002 fabf 	bl	80066a0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004122:	f3ef 8211 	mrs	r2, BASEPRI
 8004126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412a:	f383 8811 	msr	BASEPRI, r3
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	f3bf 8f4f 	dsb	sy
 8004136:	61ba      	str	r2, [r7, #24]
 8004138:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800413a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800413c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800413e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004140:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004146:	429a      	cmp	r2, r3
 8004148:	d302      	bcc.n	8004150 <xQueueGenericSendFromISR+0xbc>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b02      	cmp	r3, #2
 800414e:	d12c      	bne.n	80041aa <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004152:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800415a:	683a      	ldr	r2, [r7, #0]
 800415c:	68b9      	ldr	r1, [r7, #8]
 800415e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004160:	f000 fb64 	bl	800482c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004164:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416c:	d112      	bne.n	8004194 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800416e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004172:	2b00      	cmp	r3, #0
 8004174:	d016      	beq.n	80041a4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004178:	3324      	adds	r3, #36	; 0x24
 800417a:	4618      	mov	r0, r3
 800417c:	f001 f96c 	bl	8005458 <xTaskRemoveFromEventList>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00e      	beq.n	80041a4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00b      	beq.n	80041a4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	e007      	b.n	80041a4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004194:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004198:	3301      	adds	r3, #1
 800419a:	b2db      	uxtb	r3, r3
 800419c:	b25a      	sxtb	r2, r3
 800419e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80041a4:	2301      	movs	r3, #1
 80041a6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80041a8:	e001      	b.n	80041ae <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80041aa:	2300      	movs	r3, #0
 80041ac:	637b      	str	r3, [r7, #52]	; 0x34
 80041ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80041b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80041ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3738      	adds	r7, #56	; 0x38
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b08e      	sub	sp, #56	; 0x38
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80041d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10a      	bne.n	80041ee <xQueueGiveFromISR+0x2a>
	__asm volatile
 80041d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041dc:	f383 8811 	msr	BASEPRI, r3
 80041e0:	f3bf 8f6f 	isb	sy
 80041e4:	f3bf 8f4f 	dsb	sy
 80041e8:	623b      	str	r3, [r7, #32]
}
 80041ea:	bf00      	nop
 80041ec:	e7fe      	b.n	80041ec <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80041ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00a      	beq.n	800420c <xQueueGiveFromISR+0x48>
	__asm volatile
 80041f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fa:	f383 8811 	msr	BASEPRI, r3
 80041fe:	f3bf 8f6f 	isb	sy
 8004202:	f3bf 8f4f 	dsb	sy
 8004206:	61fb      	str	r3, [r7, #28]
}
 8004208:	bf00      	nop
 800420a:	e7fe      	b.n	800420a <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800420c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d103      	bne.n	800421c <xQueueGiveFromISR+0x58>
 8004214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <xQueueGiveFromISR+0x5c>
 800421c:	2301      	movs	r3, #1
 800421e:	e000      	b.n	8004222 <xQueueGiveFromISR+0x5e>
 8004220:	2300      	movs	r3, #0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10a      	bne.n	800423c <xQueueGiveFromISR+0x78>
	__asm volatile
 8004226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422a:	f383 8811 	msr	BASEPRI, r3
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f3bf 8f4f 	dsb	sy
 8004236:	61bb      	str	r3, [r7, #24]
}
 8004238:	bf00      	nop
 800423a:	e7fe      	b.n	800423a <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800423c:	f002 fa30 	bl	80066a0 <vPortValidateInterruptPriority>
	__asm volatile
 8004240:	f3ef 8211 	mrs	r2, BASEPRI
 8004244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004248:	f383 8811 	msr	BASEPRI, r3
 800424c:	f3bf 8f6f 	isb	sy
 8004250:	f3bf 8f4f 	dsb	sy
 8004254:	617a      	str	r2, [r7, #20]
 8004256:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004258:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800425a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800425c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004260:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004268:	429a      	cmp	r2, r3
 800426a:	d22b      	bcs.n	80042c4 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800426c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004278:	1c5a      	adds	r2, r3, #1
 800427a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427c:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800427e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004286:	d112      	bne.n	80042ae <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	2b00      	cmp	r3, #0
 800428e:	d016      	beq.n	80042be <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004292:	3324      	adds	r3, #36	; 0x24
 8004294:	4618      	mov	r0, r3
 8004296:	f001 f8df 	bl	8005458 <xTaskRemoveFromEventList>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00e      	beq.n	80042be <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00b      	beq.n	80042be <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	2201      	movs	r2, #1
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	e007      	b.n	80042be <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80042ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042b2:	3301      	adds	r3, #1
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	b25a      	sxtb	r2, r3
 80042b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80042be:	2301      	movs	r3, #1
 80042c0:	637b      	str	r3, [r7, #52]	; 0x34
 80042c2:	e001      	b.n	80042c8 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80042c4:	2300      	movs	r3, #0
 80042c6:	637b      	str	r3, [r7, #52]	; 0x34
 80042c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ca:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f383 8811 	msr	BASEPRI, r3
}
 80042d2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80042d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3738      	adds	r7, #56	; 0x38
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
	...

080042e0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b08c      	sub	sp, #48	; 0x30
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80042ec:	2300      	movs	r3, #0
 80042ee:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80042f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10a      	bne.n	8004310 <xQueueReceive+0x30>
	__asm volatile
 80042fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fe:	f383 8811 	msr	BASEPRI, r3
 8004302:	f3bf 8f6f 	isb	sy
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	623b      	str	r3, [r7, #32]
}
 800430c:	bf00      	nop
 800430e:	e7fe      	b.n	800430e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d103      	bne.n	800431e <xQueueReceive+0x3e>
 8004316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <xQueueReceive+0x42>
 800431e:	2301      	movs	r3, #1
 8004320:	e000      	b.n	8004324 <xQueueReceive+0x44>
 8004322:	2300      	movs	r3, #0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10a      	bne.n	800433e <xQueueReceive+0x5e>
	__asm volatile
 8004328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432c:	f383 8811 	msr	BASEPRI, r3
 8004330:	f3bf 8f6f 	isb	sy
 8004334:	f3bf 8f4f 	dsb	sy
 8004338:	61fb      	str	r3, [r7, #28]
}
 800433a:	bf00      	nop
 800433c:	e7fe      	b.n	800433c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800433e:	f001 fa51 	bl	80057e4 <xTaskGetSchedulerState>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d102      	bne.n	800434e <xQueueReceive+0x6e>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <xQueueReceive+0x72>
 800434e:	2301      	movs	r3, #1
 8004350:	e000      	b.n	8004354 <xQueueReceive+0x74>
 8004352:	2300      	movs	r3, #0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10a      	bne.n	800436e <xQueueReceive+0x8e>
	__asm volatile
 8004358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435c:	f383 8811 	msr	BASEPRI, r3
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	61bb      	str	r3, [r7, #24]
}
 800436a:	bf00      	nop
 800436c:	e7fe      	b.n	800436c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800436e:	f002 f8d5 	bl	800651c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004376:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	2b00      	cmp	r3, #0
 800437c:	d01f      	beq.n	80043be <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800437e:	68b9      	ldr	r1, [r7, #8]
 8004380:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004382:	f000 fabd 	bl	8004900 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	1e5a      	subs	r2, r3, #1
 800438a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800438e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00f      	beq.n	80043b6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004398:	3310      	adds	r3, #16
 800439a:	4618      	mov	r0, r3
 800439c:	f001 f85c 	bl	8005458 <xTaskRemoveFromEventList>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d007      	beq.n	80043b6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80043a6:	4b3d      	ldr	r3, [pc, #244]	; (800449c <xQueueReceive+0x1bc>)
 80043a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	f3bf 8f4f 	dsb	sy
 80043b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80043b6:	f002 f8e1 	bl	800657c <vPortExitCritical>
				return pdPASS;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e069      	b.n	8004492 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d103      	bne.n	80043cc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80043c4:	f002 f8da 	bl	800657c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80043c8:	2300      	movs	r3, #0
 80043ca:	e062      	b.n	8004492 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d106      	bne.n	80043e0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043d2:	f107 0310 	add.w	r3, r7, #16
 80043d6:	4618      	mov	r0, r3
 80043d8:	f001 f8a2 	bl	8005520 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043dc:	2301      	movs	r3, #1
 80043de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043e0:	f002 f8cc 	bl	800657c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043e4:	f000 fe0c 	bl	8005000 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043e8:	f002 f898 	bl	800651c <vPortEnterCritical>
 80043ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043f2:	b25b      	sxtb	r3, r3
 80043f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f8:	d103      	bne.n	8004402 <xQueueReceive+0x122>
 80043fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004404:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004408:	b25b      	sxtb	r3, r3
 800440a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440e:	d103      	bne.n	8004418 <xQueueReceive+0x138>
 8004410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004412:	2200      	movs	r2, #0
 8004414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004418:	f002 f8b0 	bl	800657c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800441c:	1d3a      	adds	r2, r7, #4
 800441e:	f107 0310 	add.w	r3, r7, #16
 8004422:	4611      	mov	r1, r2
 8004424:	4618      	mov	r0, r3
 8004426:	f001 f891 	bl	800554c <xTaskCheckForTimeOut>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d123      	bne.n	8004478 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004430:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004432:	f000 fadd 	bl	80049f0 <prvIsQueueEmpty>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d017      	beq.n	800446c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800443c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443e:	3324      	adds	r3, #36	; 0x24
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	4611      	mov	r1, r2
 8004444:	4618      	mov	r0, r3
 8004446:	f000 ffb7 	bl	80053b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800444a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800444c:	f000 fa7e 	bl	800494c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004450:	f000 fde4 	bl	800501c <xTaskResumeAll>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d189      	bne.n	800436e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800445a:	4b10      	ldr	r3, [pc, #64]	; (800449c <xQueueReceive+0x1bc>)
 800445c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	f3bf 8f4f 	dsb	sy
 8004466:	f3bf 8f6f 	isb	sy
 800446a:	e780      	b.n	800436e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800446c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800446e:	f000 fa6d 	bl	800494c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004472:	f000 fdd3 	bl	800501c <xTaskResumeAll>
 8004476:	e77a      	b.n	800436e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004478:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800447a:	f000 fa67 	bl	800494c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800447e:	f000 fdcd 	bl	800501c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004482:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004484:	f000 fab4 	bl	80049f0 <prvIsQueueEmpty>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	f43f af6f 	beq.w	800436e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004490:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004492:	4618      	mov	r0, r3
 8004494:	3730      	adds	r7, #48	; 0x30
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	e000ed04 	.word	0xe000ed04

080044a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b08e      	sub	sp, #56	; 0x38
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80044aa:	2300      	movs	r3, #0
 80044ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80044b2:	2300      	movs	r3, #0
 80044b4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80044b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10a      	bne.n	80044d2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80044bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c0:	f383 8811 	msr	BASEPRI, r3
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	623b      	str	r3, [r7, #32]
}
 80044ce:	bf00      	nop
 80044d0:	e7fe      	b.n	80044d0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80044d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00a      	beq.n	80044f0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80044da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044de:	f383 8811 	msr	BASEPRI, r3
 80044e2:	f3bf 8f6f 	isb	sy
 80044e6:	f3bf 8f4f 	dsb	sy
 80044ea:	61fb      	str	r3, [r7, #28]
}
 80044ec:	bf00      	nop
 80044ee:	e7fe      	b.n	80044ee <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044f0:	f001 f978 	bl	80057e4 <xTaskGetSchedulerState>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d102      	bne.n	8004500 <xQueueSemaphoreTake+0x60>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <xQueueSemaphoreTake+0x64>
 8004500:	2301      	movs	r3, #1
 8004502:	e000      	b.n	8004506 <xQueueSemaphoreTake+0x66>
 8004504:	2300      	movs	r3, #0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10a      	bne.n	8004520 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800450a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450e:	f383 8811 	msr	BASEPRI, r3
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	61bb      	str	r3, [r7, #24]
}
 800451c:	bf00      	nop
 800451e:	e7fe      	b.n	800451e <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004520:	f001 fffc 	bl	800651c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004528:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800452a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452c:	2b00      	cmp	r3, #0
 800452e:	d024      	beq.n	800457a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004532:	1e5a      	subs	r2, r3, #1
 8004534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004536:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d104      	bne.n	800454a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004540:	f001 fad0 	bl	8005ae4 <pvTaskIncrementMutexHeldCount>
 8004544:	4602      	mov	r2, r0
 8004546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004548:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800454a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00f      	beq.n	8004572 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004554:	3310      	adds	r3, #16
 8004556:	4618      	mov	r0, r3
 8004558:	f000 ff7e 	bl	8005458 <xTaskRemoveFromEventList>
 800455c:	4603      	mov	r3, r0
 800455e:	2b00      	cmp	r3, #0
 8004560:	d007      	beq.n	8004572 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004562:	4b54      	ldr	r3, [pc, #336]	; (80046b4 <xQueueSemaphoreTake+0x214>)
 8004564:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004568:	601a      	str	r2, [r3, #0]
 800456a:	f3bf 8f4f 	dsb	sy
 800456e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004572:	f002 f803 	bl	800657c <vPortExitCritical>
				return pdPASS;
 8004576:	2301      	movs	r3, #1
 8004578:	e097      	b.n	80046aa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d111      	bne.n	80045a4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00a      	beq.n	800459c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458a:	f383 8811 	msr	BASEPRI, r3
 800458e:	f3bf 8f6f 	isb	sy
 8004592:	f3bf 8f4f 	dsb	sy
 8004596:	617b      	str	r3, [r7, #20]
}
 8004598:	bf00      	nop
 800459a:	e7fe      	b.n	800459a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800459c:	f001 ffee 	bl	800657c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80045a0:	2300      	movs	r3, #0
 80045a2:	e082      	b.n	80046aa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80045a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d106      	bne.n	80045b8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045aa:	f107 030c 	add.w	r3, r7, #12
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 ffb6 	bl	8005520 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045b4:	2301      	movs	r3, #1
 80045b6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045b8:	f001 ffe0 	bl	800657c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045bc:	f000 fd20 	bl	8005000 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045c0:	f001 ffac 	bl	800651c <vPortEnterCritical>
 80045c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045ca:	b25b      	sxtb	r3, r3
 80045cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d0:	d103      	bne.n	80045da <xQueueSemaphoreTake+0x13a>
 80045d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045e0:	b25b      	sxtb	r3, r3
 80045e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e6:	d103      	bne.n	80045f0 <xQueueSemaphoreTake+0x150>
 80045e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045f0:	f001 ffc4 	bl	800657c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045f4:	463a      	mov	r2, r7
 80045f6:	f107 030c 	add.w	r3, r7, #12
 80045fa:	4611      	mov	r1, r2
 80045fc:	4618      	mov	r0, r3
 80045fe:	f000 ffa5 	bl	800554c <xTaskCheckForTimeOut>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d132      	bne.n	800466e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004608:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800460a:	f000 f9f1 	bl	80049f0 <prvIsQueueEmpty>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d026      	beq.n	8004662 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d109      	bne.n	8004630 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800461c:	f001 ff7e 	bl	800651c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	4618      	mov	r0, r3
 8004626:	f001 f8fb 	bl	8005820 <xTaskPriorityInherit>
 800462a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800462c:	f001 ffa6 	bl	800657c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004632:	3324      	adds	r3, #36	; 0x24
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	4611      	mov	r1, r2
 8004638:	4618      	mov	r0, r3
 800463a:	f000 febd 	bl	80053b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800463e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004640:	f000 f984 	bl	800494c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004644:	f000 fcea 	bl	800501c <xTaskResumeAll>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	f47f af68 	bne.w	8004520 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004650:	4b18      	ldr	r3, [pc, #96]	; (80046b4 <xQueueSemaphoreTake+0x214>)
 8004652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	e75e      	b.n	8004520 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004662:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004664:	f000 f972 	bl	800494c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004668:	f000 fcd8 	bl	800501c <xTaskResumeAll>
 800466c:	e758      	b.n	8004520 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800466e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004670:	f000 f96c 	bl	800494c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004674:	f000 fcd2 	bl	800501c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004678:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800467a:	f000 f9b9 	bl	80049f0 <prvIsQueueEmpty>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	f43f af4d 	beq.w	8004520 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00d      	beq.n	80046a8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800468c:	f001 ff46 	bl	800651c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004690:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004692:	f000 f8b4 	bl	80047fe <prvGetDisinheritPriorityAfterTimeout>
 8004696:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8004698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800469e:	4618      	mov	r0, r3
 80046a0:	f001 f99a 	bl	80059d8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80046a4:	f001 ff6a 	bl	800657c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80046a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3738      	adds	r7, #56	; 0x38
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	e000ed04 	.word	0xe000ed04

080046b8 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b08e      	sub	sp, #56	; 0x38
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80046c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10a      	bne.n	80046e4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80046ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d2:	f383 8811 	msr	BASEPRI, r3
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	f3bf 8f4f 	dsb	sy
 80046de:	623b      	str	r3, [r7, #32]
}
 80046e0:	bf00      	nop
 80046e2:	e7fe      	b.n	80046e2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d103      	bne.n	80046f2 <xQueueReceiveFromISR+0x3a>
 80046ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <xQueueReceiveFromISR+0x3e>
 80046f2:	2301      	movs	r3, #1
 80046f4:	e000      	b.n	80046f8 <xQueueReceiveFromISR+0x40>
 80046f6:	2300      	movs	r3, #0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10a      	bne.n	8004712 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80046fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004700:	f383 8811 	msr	BASEPRI, r3
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	61fb      	str	r3, [r7, #28]
}
 800470e:	bf00      	nop
 8004710:	e7fe      	b.n	8004710 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004712:	f001 ffc5 	bl	80066a0 <vPortValidateInterruptPriority>
	__asm volatile
 8004716:	f3ef 8211 	mrs	r2, BASEPRI
 800471a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471e:	f383 8811 	msr	BASEPRI, r3
 8004722:	f3bf 8f6f 	isb	sy
 8004726:	f3bf 8f4f 	dsb	sy
 800472a:	61ba      	str	r2, [r7, #24]
 800472c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800472e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004730:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004736:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473a:	2b00      	cmp	r3, #0
 800473c:	d02f      	beq.n	800479e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800473e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004740:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004744:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004748:	68b9      	ldr	r1, [r7, #8]
 800474a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800474c:	f000 f8d8 	bl	8004900 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004752:	1e5a      	subs	r2, r3, #1
 8004754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004756:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004758:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800475c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004760:	d112      	bne.n	8004788 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d016      	beq.n	8004798 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800476a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800476c:	3310      	adds	r3, #16
 800476e:	4618      	mov	r0, r3
 8004770:	f000 fe72 	bl	8005458 <xTaskRemoveFromEventList>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00e      	beq.n	8004798 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00b      	beq.n	8004798 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	e007      	b.n	8004798 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004788:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800478c:	3301      	adds	r3, #1
 800478e:	b2db      	uxtb	r3, r3
 8004790:	b25a      	sxtb	r2, r3
 8004792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004798:	2301      	movs	r3, #1
 800479a:	637b      	str	r3, [r7, #52]	; 0x34
 800479c:	e001      	b.n	80047a2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800479e:	2300      	movs	r3, #0
 80047a0:	637b      	str	r3, [r7, #52]	; 0x34
 80047a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f383 8811 	msr	BASEPRI, r3
}
 80047ac:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80047ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3738      	adds	r7, #56	; 0x38
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b084      	sub	sp, #16
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d10a      	bne.n	80047e0 <vQueueDelete+0x28>
	__asm volatile
 80047ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ce:	f383 8811 	msr	BASEPRI, r3
 80047d2:	f3bf 8f6f 	isb	sy
 80047d6:	f3bf 8f4f 	dsb	sy
 80047da:	60bb      	str	r3, [r7, #8]
}
 80047dc:	bf00      	nop
 80047de:	e7fe      	b.n	80047de <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 f95b 	bl	8004a9c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d102      	bne.n	80047f6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f002 f857 	bl	80068a4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80047f6:	bf00      	nop
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80047fe:	b480      	push	{r7}
 8004800:	b085      	sub	sp, #20
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480a:	2b00      	cmp	r3, #0
 800480c:	d006      	beq.n	800481c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004818:	60fb      	str	r3, [r7, #12]
 800481a:	e001      	b.n	8004820 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800481c:	2300      	movs	r3, #0
 800481e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004820:	68fb      	ldr	r3, [r7, #12]
	}
 8004822:	4618      	mov	r0, r3
 8004824:	3714      	adds	r7, #20
 8004826:	46bd      	mov	sp, r7
 8004828:	bc80      	pop	{r7}
 800482a:	4770      	bx	lr

0800482c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b086      	sub	sp, #24
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004838:	2300      	movs	r3, #0
 800483a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004840:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10d      	bne.n	8004866 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d14d      	bne.n	80048ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	4618      	mov	r0, r3
 8004858:	f001 f850 	bl	80058fc <xTaskPriorityDisinherit>
 800485c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	605a      	str	r2, [r3, #4]
 8004864:	e043      	b.n	80048ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d119      	bne.n	80048a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6898      	ldr	r0, [r3, #8]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004874:	461a      	mov	r2, r3
 8004876:	68b9      	ldr	r1, [r7, #8]
 8004878:	f004 f866 	bl	8008948 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	689a      	ldr	r2, [r3, #8]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004884:	441a      	add	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	689a      	ldr	r2, [r3, #8]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	429a      	cmp	r2, r3
 8004894:	d32b      	bcc.n	80048ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	609a      	str	r2, [r3, #8]
 800489e:	e026      	b.n	80048ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	68d8      	ldr	r0, [r3, #12]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a8:	461a      	mov	r2, r3
 80048aa:	68b9      	ldr	r1, [r7, #8]
 80048ac:	f004 f84c 	bl	8008948 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	68da      	ldr	r2, [r3, #12]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	425b      	negs	r3, r3
 80048ba:	441a      	add	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	68da      	ldr	r2, [r3, #12]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d207      	bcs.n	80048dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	685a      	ldr	r2, [r3, #4]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d4:	425b      	negs	r3, r3
 80048d6:	441a      	add	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d105      	bne.n	80048ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d002      	beq.n	80048ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	3b01      	subs	r3, #1
 80048ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1c5a      	adds	r2, r3, #1
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80048f6:	697b      	ldr	r3, [r7, #20]
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3718      	adds	r7, #24
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
 8004908:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	2b00      	cmp	r3, #0
 8004910:	d018      	beq.n	8004944 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491a:	441a      	add	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	68da      	ldr	r2, [r3, #12]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	429a      	cmp	r2, r3
 800492a:	d303      	bcc.n	8004934 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68d9      	ldr	r1, [r3, #12]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493c:	461a      	mov	r2, r3
 800493e:	6838      	ldr	r0, [r7, #0]
 8004940:	f004 f802 	bl	8008948 <memcpy>
	}
}
 8004944:	bf00      	nop
 8004946:	3708      	adds	r7, #8
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004954:	f001 fde2 	bl	800651c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800495e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004960:	e011      	b.n	8004986 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004966:	2b00      	cmp	r3, #0
 8004968:	d012      	beq.n	8004990 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	3324      	adds	r3, #36	; 0x24
 800496e:	4618      	mov	r0, r3
 8004970:	f000 fd72 	bl	8005458 <xTaskRemoveFromEventList>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800497a:	f000 fe49 	bl	8005610 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800497e:	7bfb      	ldrb	r3, [r7, #15]
 8004980:	3b01      	subs	r3, #1
 8004982:	b2db      	uxtb	r3, r3
 8004984:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800498a:	2b00      	cmp	r3, #0
 800498c:	dce9      	bgt.n	8004962 <prvUnlockQueue+0x16>
 800498e:	e000      	b.n	8004992 <prvUnlockQueue+0x46>
					break;
 8004990:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	22ff      	movs	r2, #255	; 0xff
 8004996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800499a:	f001 fdef 	bl	800657c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800499e:	f001 fdbd 	bl	800651c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049aa:	e011      	b.n	80049d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d012      	beq.n	80049da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3310      	adds	r3, #16
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 fd4d 	bl	8005458 <xTaskRemoveFromEventList>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80049c4:	f000 fe24 	bl	8005610 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80049c8:	7bbb      	ldrb	r3, [r7, #14]
 80049ca:	3b01      	subs	r3, #1
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80049d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	dce9      	bgt.n	80049ac <prvUnlockQueue+0x60>
 80049d8:	e000      	b.n	80049dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80049da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	22ff      	movs	r2, #255	; 0xff
 80049e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80049e4:	f001 fdca 	bl	800657c <vPortExitCritical>
}
 80049e8:	bf00      	nop
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80049f8:	f001 fd90 	bl	800651c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d102      	bne.n	8004a0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004a04:	2301      	movs	r3, #1
 8004a06:	60fb      	str	r3, [r7, #12]
 8004a08:	e001      	b.n	8004a0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a0e:	f001 fdb5 	bl	800657c <vPortExitCritical>

	return xReturn;
 8004a12:	68fb      	ldr	r3, [r7, #12]
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a24:	f001 fd7a 	bl	800651c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d102      	bne.n	8004a3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004a34:	2301      	movs	r3, #1
 8004a36:	60fb      	str	r3, [r7, #12]
 8004a38:	e001      	b.n	8004a3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a3e:	f001 fd9d 	bl	800657c <vPortExitCritical>

	return xReturn;
 8004a42:	68fb      	ldr	r3, [r7, #12]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3710      	adds	r7, #16
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a56:	2300      	movs	r3, #0
 8004a58:	60fb      	str	r3, [r7, #12]
 8004a5a:	e014      	b.n	8004a86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004a5c:	4a0e      	ldr	r2, [pc, #56]	; (8004a98 <vQueueAddToRegistry+0x4c>)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10b      	bne.n	8004a80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004a68:	490b      	ldr	r1, [pc, #44]	; (8004a98 <vQueueAddToRegistry+0x4c>)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004a72:	4a09      	ldr	r2, [pc, #36]	; (8004a98 <vQueueAddToRegistry+0x4c>)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	00db      	lsls	r3, r3, #3
 8004a78:	4413      	add	r3, r2
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004a7e:	e006      	b.n	8004a8e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	3301      	adds	r3, #1
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2b07      	cmp	r3, #7
 8004a8a:	d9e7      	bls.n	8004a5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004a8c:	bf00      	nop
 8004a8e:	bf00      	nop
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bc80      	pop	{r7}
 8004a96:	4770      	bx	lr
 8004a98:	20002fa0 	.word	0x20002fa0

08004a9c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b085      	sub	sp, #20
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	e016      	b.n	8004ad8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004aaa:	4a10      	ldr	r2, [pc, #64]	; (8004aec <vQueueUnregisterQueue+0x50>)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	4413      	add	r3, r2
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d10b      	bne.n	8004ad2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004aba:	4a0c      	ldr	r2, [pc, #48]	; (8004aec <vQueueUnregisterQueue+0x50>)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2100      	movs	r1, #0
 8004ac0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004ac4:	4a09      	ldr	r2, [pc, #36]	; (8004aec <vQueueUnregisterQueue+0x50>)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	00db      	lsls	r3, r3, #3
 8004aca:	4413      	add	r3, r2
 8004acc:	2200      	movs	r2, #0
 8004ace:	605a      	str	r2, [r3, #4]
				break;
 8004ad0:	e006      	b.n	8004ae0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	60fb      	str	r3, [r7, #12]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2b07      	cmp	r3, #7
 8004adc:	d9e5      	bls.n	8004aaa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004ade:	bf00      	nop
 8004ae0:	bf00      	nop
 8004ae2:	3714      	adds	r7, #20
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bc80      	pop	{r7}
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	20002fa0 	.word	0x20002fa0

08004af0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004b00:	f001 fd0c 	bl	800651c <vPortEnterCritical>
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b0a:	b25b      	sxtb	r3, r3
 8004b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b10:	d103      	bne.n	8004b1a <vQueueWaitForMessageRestricted+0x2a>
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b20:	b25b      	sxtb	r3, r3
 8004b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b26:	d103      	bne.n	8004b30 <vQueueWaitForMessageRestricted+0x40>
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b30:	f001 fd24 	bl	800657c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d106      	bne.n	8004b4a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	3324      	adds	r3, #36	; 0x24
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	68b9      	ldr	r1, [r7, #8]
 8004b44:	4618      	mov	r0, r3
 8004b46:	f000 fc5b 	bl	8005400 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004b4a:	6978      	ldr	r0, [r7, #20]
 8004b4c:	f7ff fefe 	bl	800494c <prvUnlockQueue>
	}
 8004b50:	bf00      	nop
 8004b52:	3718      	adds	r7, #24
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b08e      	sub	sp, #56	; 0x38
 8004b5c:	af04      	add	r7, sp, #16
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
 8004b64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10a      	bne.n	8004b82 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b70:	f383 8811 	msr	BASEPRI, r3
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	623b      	str	r3, [r7, #32]
}
 8004b7e:	bf00      	nop
 8004b80:	e7fe      	b.n	8004b80 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d10a      	bne.n	8004b9e <xTaskCreateStatic+0x46>
	__asm volatile
 8004b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8c:	f383 8811 	msr	BASEPRI, r3
 8004b90:	f3bf 8f6f 	isb	sy
 8004b94:	f3bf 8f4f 	dsb	sy
 8004b98:	61fb      	str	r3, [r7, #28]
}
 8004b9a:	bf00      	nop
 8004b9c:	e7fe      	b.n	8004b9c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b9e:	23bc      	movs	r3, #188	; 0xbc
 8004ba0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	2bbc      	cmp	r3, #188	; 0xbc
 8004ba6:	d00a      	beq.n	8004bbe <xTaskCreateStatic+0x66>
	__asm volatile
 8004ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	61bb      	str	r3, [r7, #24]
}
 8004bba:	bf00      	nop
 8004bbc:	e7fe      	b.n	8004bbc <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d01e      	beq.n	8004c02 <xTaskCreateStatic+0xaa>
 8004bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d01b      	beq.n	8004c02 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bcc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bd2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004bdc:	2300      	movs	r3, #0
 8004bde:	9303      	str	r3, [sp, #12]
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	9302      	str	r3, [sp, #8]
 8004be4:	f107 0314 	add.w	r3, r7, #20
 8004be8:	9301      	str	r3, [sp, #4]
 8004bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	68b9      	ldr	r1, [r7, #8]
 8004bf4:	68f8      	ldr	r0, [r7, #12]
 8004bf6:	f000 f851 	bl	8004c9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004bfa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bfc:	f000 f8ec 	bl	8004dd8 <prvAddNewTaskToReadyList>
 8004c00:	e001      	b.n	8004c06 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8004c02:	2300      	movs	r3, #0
 8004c04:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004c06:	697b      	ldr	r3, [r7, #20]
	}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3728      	adds	r7, #40	; 0x28
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b08c      	sub	sp, #48	; 0x30
 8004c14:	af04      	add	r7, sp, #16
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	603b      	str	r3, [r7, #0]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c20:	88fb      	ldrh	r3, [r7, #6]
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4618      	mov	r0, r3
 8004c26:	f001 fd79 	bl	800671c <pvPortMalloc>
 8004c2a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00e      	beq.n	8004c50 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004c32:	20bc      	movs	r0, #188	; 0xbc
 8004c34:	f001 fd72 	bl	800671c <pvPortMalloc>
 8004c38:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d003      	beq.n	8004c48 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	631a      	str	r2, [r3, #48]	; 0x30
 8004c46:	e005      	b.n	8004c54 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c48:	6978      	ldr	r0, [r7, #20]
 8004c4a:	f001 fe2b 	bl	80068a4 <vPortFree>
 8004c4e:	e001      	b.n	8004c54 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c50:	2300      	movs	r3, #0
 8004c52:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d017      	beq.n	8004c8a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004c62:	88fa      	ldrh	r2, [r7, #6]
 8004c64:	2300      	movs	r3, #0
 8004c66:	9303      	str	r3, [sp, #12]
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	9302      	str	r3, [sp, #8]
 8004c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6e:	9301      	str	r3, [sp, #4]
 8004c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c72:	9300      	str	r3, [sp, #0]
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	68b9      	ldr	r1, [r7, #8]
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 f80f 	bl	8004c9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c7e:	69f8      	ldr	r0, [r7, #28]
 8004c80:	f000 f8aa 	bl	8004dd8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c84:	2301      	movs	r3, #1
 8004c86:	61bb      	str	r3, [r7, #24]
 8004c88:	e002      	b.n	8004c90 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004c8e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c90:	69bb      	ldr	r3, [r7, #24]
	}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3720      	adds	r7, #32
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
	...

08004c9c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b088      	sub	sp, #32
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
 8004ca8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	21a5      	movs	r1, #165	; 0xa5
 8004cb6:	f003 fe55 	bl	8008964 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	4413      	add	r3, r2
 8004cca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	f023 0307 	bic.w	r3, r3, #7
 8004cd2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	f003 0307 	and.w	r3, r3, #7
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00a      	beq.n	8004cf4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce2:	f383 8811 	msr	BASEPRI, r3
 8004ce6:	f3bf 8f6f 	isb	sy
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	617b      	str	r3, [r7, #20]
}
 8004cf0:	bf00      	nop
 8004cf2:	e7fe      	b.n	8004cf2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	61fb      	str	r3, [r7, #28]
 8004cf8:	e012      	b.n	8004d20 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	4413      	add	r3, r2
 8004d00:	7819      	ldrb	r1, [r3, #0]
 8004d02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	4413      	add	r3, r2
 8004d08:	3334      	adds	r3, #52	; 0x34
 8004d0a:	460a      	mov	r2, r1
 8004d0c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	4413      	add	r3, r2
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d006      	beq.n	8004d28 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	61fb      	str	r3, [r7, #28]
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	2b0f      	cmp	r3, #15
 8004d24:	d9e9      	bls.n	8004cfa <prvInitialiseNewTask+0x5e>
 8004d26:	e000      	b.n	8004d2a <prvInitialiseNewTask+0x8e>
		{
			break;
 8004d28:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d34:	2b37      	cmp	r3, #55	; 0x37
 8004d36:	d901      	bls.n	8004d3c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d38:	2337      	movs	r3, #55	; 0x37
 8004d3a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d40:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d46:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d50:	3304      	adds	r3, #4
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fe fe65 	bl	8003a22 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5a:	3318      	adds	r3, #24
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7fe fe60 	bl	8003a22 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d66:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d70:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d76:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8a:	3354      	adds	r3, #84	; 0x54
 8004d8c:	2260      	movs	r2, #96	; 0x60
 8004d8e:	2100      	movs	r1, #0
 8004d90:	4618      	mov	r0, r3
 8004d92:	f003 fde7 	bl	8008964 <memset>
 8004d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d98:	4a0c      	ldr	r2, [pc, #48]	; (8004dcc <prvInitialiseNewTask+0x130>)
 8004d9a:	659a      	str	r2, [r3, #88]	; 0x58
 8004d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9e:	4a0c      	ldr	r2, [pc, #48]	; (8004dd0 <prvInitialiseNewTask+0x134>)
 8004da0:	65da      	str	r2, [r3, #92]	; 0x5c
 8004da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da4:	4a0b      	ldr	r2, [pc, #44]	; (8004dd4 <prvInitialiseNewTask+0x138>)
 8004da6:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	68f9      	ldr	r1, [r7, #12]
 8004dac:	69b8      	ldr	r0, [r7, #24]
 8004dae:	f001 fac3 	bl	8006338 <pxPortInitialiseStack>
 8004db2:	4602      	mov	r2, r0
 8004db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d002      	beq.n	8004dc4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dc2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004dc4:	bf00      	nop
 8004dc6:	3720      	adds	r7, #32
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	08008e20 	.word	0x08008e20
 8004dd0:	08008e40 	.word	0x08008e40
 8004dd4:	08008e00 	.word	0x08008e00

08004dd8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b082      	sub	sp, #8
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004de0:	f001 fb9c 	bl	800651c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004de4:	4b2d      	ldr	r3, [pc, #180]	; (8004e9c <prvAddNewTaskToReadyList+0xc4>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	3301      	adds	r3, #1
 8004dea:	4a2c      	ldr	r2, [pc, #176]	; (8004e9c <prvAddNewTaskToReadyList+0xc4>)
 8004dec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004dee:	4b2c      	ldr	r3, [pc, #176]	; (8004ea0 <prvAddNewTaskToReadyList+0xc8>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d109      	bne.n	8004e0a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004df6:	4a2a      	ldr	r2, [pc, #168]	; (8004ea0 <prvAddNewTaskToReadyList+0xc8>)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004dfc:	4b27      	ldr	r3, [pc, #156]	; (8004e9c <prvAddNewTaskToReadyList+0xc4>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d110      	bne.n	8004e26 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004e04:	f000 fc28 	bl	8005658 <prvInitialiseTaskLists>
 8004e08:	e00d      	b.n	8004e26 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e0a:	4b26      	ldr	r3, [pc, #152]	; (8004ea4 <prvAddNewTaskToReadyList+0xcc>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d109      	bne.n	8004e26 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e12:	4b23      	ldr	r3, [pc, #140]	; (8004ea0 <prvAddNewTaskToReadyList+0xc8>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d802      	bhi.n	8004e26 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e20:	4a1f      	ldr	r2, [pc, #124]	; (8004ea0 <prvAddNewTaskToReadyList+0xc8>)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e26:	4b20      	ldr	r3, [pc, #128]	; (8004ea8 <prvAddNewTaskToReadyList+0xd0>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	4a1e      	ldr	r2, [pc, #120]	; (8004ea8 <prvAddNewTaskToReadyList+0xd0>)
 8004e2e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004e30:	4b1d      	ldr	r3, [pc, #116]	; (8004ea8 <prvAddNewTaskToReadyList+0xd0>)
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e3c:	4b1b      	ldr	r3, [pc, #108]	; (8004eac <prvAddNewTaskToReadyList+0xd4>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d903      	bls.n	8004e4c <prvAddNewTaskToReadyList+0x74>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e48:	4a18      	ldr	r2, [pc, #96]	; (8004eac <prvAddNewTaskToReadyList+0xd4>)
 8004e4a:	6013      	str	r3, [r2, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e50:	4613      	mov	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4413      	add	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4a15      	ldr	r2, [pc, #84]	; (8004eb0 <prvAddNewTaskToReadyList+0xd8>)
 8004e5a:	441a      	add	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	3304      	adds	r3, #4
 8004e60:	4619      	mov	r1, r3
 8004e62:	4610      	mov	r0, r2
 8004e64:	f7fe fde9 	bl	8003a3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e68:	f001 fb88 	bl	800657c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e6c:	4b0d      	ldr	r3, [pc, #52]	; (8004ea4 <prvAddNewTaskToReadyList+0xcc>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00e      	beq.n	8004e92 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e74:	4b0a      	ldr	r3, [pc, #40]	; (8004ea0 <prvAddNewTaskToReadyList+0xc8>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d207      	bcs.n	8004e92 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e82:	4b0c      	ldr	r3, [pc, #48]	; (8004eb4 <prvAddNewTaskToReadyList+0xdc>)
 8004e84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e88:	601a      	str	r2, [r3, #0]
 8004e8a:	f3bf 8f4f 	dsb	sy
 8004e8e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e92:	bf00      	nop
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	20000d70 	.word	0x20000d70
 8004ea0:	2000089c 	.word	0x2000089c
 8004ea4:	20000d7c 	.word	0x20000d7c
 8004ea8:	20000d8c 	.word	0x20000d8c
 8004eac:	20000d78 	.word	0x20000d78
 8004eb0:	200008a0 	.word	0x200008a0
 8004eb4:	e000ed04 	.word	0xe000ed04

08004eb8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d017      	beq.n	8004efa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004eca:	4b13      	ldr	r3, [pc, #76]	; (8004f18 <vTaskDelay+0x60>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00a      	beq.n	8004ee8 <vTaskDelay+0x30>
	__asm volatile
 8004ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed6:	f383 8811 	msr	BASEPRI, r3
 8004eda:	f3bf 8f6f 	isb	sy
 8004ede:	f3bf 8f4f 	dsb	sy
 8004ee2:	60bb      	str	r3, [r7, #8]
}
 8004ee4:	bf00      	nop
 8004ee6:	e7fe      	b.n	8004ee6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004ee8:	f000 f88a 	bl	8005000 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004eec:	2100      	movs	r1, #0
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 fe0c 	bl	8005b0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004ef4:	f000 f892 	bl	800501c <xTaskResumeAll>
 8004ef8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d107      	bne.n	8004f10 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004f00:	4b06      	ldr	r3, [pc, #24]	; (8004f1c <vTaskDelay+0x64>)
 8004f02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	f3bf 8f4f 	dsb	sy
 8004f0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f10:	bf00      	nop
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	20000d98 	.word	0x20000d98
 8004f1c:	e000ed04 	.word	0xe000ed04

08004f20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b08a      	sub	sp, #40	; 0x28
 8004f24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f26:	2300      	movs	r3, #0
 8004f28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f2e:	463a      	mov	r2, r7
 8004f30:	1d39      	adds	r1, r7, #4
 8004f32:	f107 0308 	add.w	r3, r7, #8
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7fe fd22 	bl	8003980 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f3c:	6839      	ldr	r1, [r7, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	9202      	str	r2, [sp, #8]
 8004f44:	9301      	str	r3, [sp, #4]
 8004f46:	2300      	movs	r3, #0
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	460a      	mov	r2, r1
 8004f4e:	4924      	ldr	r1, [pc, #144]	; (8004fe0 <vTaskStartScheduler+0xc0>)
 8004f50:	4824      	ldr	r0, [pc, #144]	; (8004fe4 <vTaskStartScheduler+0xc4>)
 8004f52:	f7ff fe01 	bl	8004b58 <xTaskCreateStatic>
 8004f56:	4603      	mov	r3, r0
 8004f58:	4a23      	ldr	r2, [pc, #140]	; (8004fe8 <vTaskStartScheduler+0xc8>)
 8004f5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004f5c:	4b22      	ldr	r3, [pc, #136]	; (8004fe8 <vTaskStartScheduler+0xc8>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d002      	beq.n	8004f6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004f64:	2301      	movs	r3, #1
 8004f66:	617b      	str	r3, [r7, #20]
 8004f68:	e001      	b.n	8004f6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d102      	bne.n	8004f7a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004f74:	f000 fe1e 	bl	8005bb4 <xTimerCreateTimerTask>
 8004f78:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d11b      	bne.n	8004fb8 <vTaskStartScheduler+0x98>
	__asm volatile
 8004f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f84:	f383 8811 	msr	BASEPRI, r3
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	613b      	str	r3, [r7, #16]
}
 8004f92:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f94:	4b15      	ldr	r3, [pc, #84]	; (8004fec <vTaskStartScheduler+0xcc>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	3354      	adds	r3, #84	; 0x54
 8004f9a:	4a15      	ldr	r2, [pc, #84]	; (8004ff0 <vTaskStartScheduler+0xd0>)
 8004f9c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f9e:	4b15      	ldr	r3, [pc, #84]	; (8004ff4 <vTaskStartScheduler+0xd4>)
 8004fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004fa6:	4b14      	ldr	r3, [pc, #80]	; (8004ff8 <vTaskStartScheduler+0xd8>)
 8004fa8:	2201      	movs	r2, #1
 8004faa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004fac:	4b13      	ldr	r3, [pc, #76]	; (8004ffc <vTaskStartScheduler+0xdc>)
 8004fae:	2200      	movs	r2, #0
 8004fb0:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004fb2:	f001 fa41 	bl	8006438 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004fb6:	e00e      	b.n	8004fd6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fbe:	d10a      	bne.n	8004fd6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8004fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc4:	f383 8811 	msr	BASEPRI, r3
 8004fc8:	f3bf 8f6f 	isb	sy
 8004fcc:	f3bf 8f4f 	dsb	sy
 8004fd0:	60fb      	str	r3, [r7, #12]
}
 8004fd2:	bf00      	nop
 8004fd4:	e7fe      	b.n	8004fd4 <vTaskStartScheduler+0xb4>
}
 8004fd6:	bf00      	nop
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	08008b40 	.word	0x08008b40
 8004fe4:	08005629 	.word	0x08005629
 8004fe8:	20000d94 	.word	0x20000d94
 8004fec:	2000089c 	.word	0x2000089c
 8004ff0:	200000a0 	.word	0x200000a0
 8004ff4:	20000d90 	.word	0x20000d90
 8004ff8:	20000d7c 	.word	0x20000d7c
 8004ffc:	20000d74 	.word	0x20000d74

08005000 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005000:	b480      	push	{r7}
 8005002:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005004:	4b04      	ldr	r3, [pc, #16]	; (8005018 <vTaskSuspendAll+0x18>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	3301      	adds	r3, #1
 800500a:	4a03      	ldr	r2, [pc, #12]	; (8005018 <vTaskSuspendAll+0x18>)
 800500c:	6013      	str	r3, [r2, #0]
}
 800500e:	bf00      	nop
 8005010:	46bd      	mov	sp, r7
 8005012:	bc80      	pop	{r7}
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	20000d98 	.word	0x20000d98

0800501c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005022:	2300      	movs	r3, #0
 8005024:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005026:	2300      	movs	r3, #0
 8005028:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800502a:	4b42      	ldr	r3, [pc, #264]	; (8005134 <xTaskResumeAll+0x118>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10a      	bne.n	8005048 <xTaskResumeAll+0x2c>
	__asm volatile
 8005032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005036:	f383 8811 	msr	BASEPRI, r3
 800503a:	f3bf 8f6f 	isb	sy
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	603b      	str	r3, [r7, #0]
}
 8005044:	bf00      	nop
 8005046:	e7fe      	b.n	8005046 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005048:	f001 fa68 	bl	800651c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800504c:	4b39      	ldr	r3, [pc, #228]	; (8005134 <xTaskResumeAll+0x118>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	3b01      	subs	r3, #1
 8005052:	4a38      	ldr	r2, [pc, #224]	; (8005134 <xTaskResumeAll+0x118>)
 8005054:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005056:	4b37      	ldr	r3, [pc, #220]	; (8005134 <xTaskResumeAll+0x118>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d162      	bne.n	8005124 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800505e:	4b36      	ldr	r3, [pc, #216]	; (8005138 <xTaskResumeAll+0x11c>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d05e      	beq.n	8005124 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005066:	e02f      	b.n	80050c8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005068:	4b34      	ldr	r3, [pc, #208]	; (800513c <xTaskResumeAll+0x120>)
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	3318      	adds	r3, #24
 8005074:	4618      	mov	r0, r3
 8005076:	f7fe fd3b 	bl	8003af0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	3304      	adds	r3, #4
 800507e:	4618      	mov	r0, r3
 8005080:	f7fe fd36 	bl	8003af0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005088:	4b2d      	ldr	r3, [pc, #180]	; (8005140 <xTaskResumeAll+0x124>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	429a      	cmp	r2, r3
 800508e:	d903      	bls.n	8005098 <xTaskResumeAll+0x7c>
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005094:	4a2a      	ldr	r2, [pc, #168]	; (8005140 <xTaskResumeAll+0x124>)
 8005096:	6013      	str	r3, [r2, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800509c:	4613      	mov	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4a27      	ldr	r2, [pc, #156]	; (8005144 <xTaskResumeAll+0x128>)
 80050a6:	441a      	add	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	3304      	adds	r3, #4
 80050ac:	4619      	mov	r1, r3
 80050ae:	4610      	mov	r0, r2
 80050b0:	f7fe fcc3 	bl	8003a3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050b8:	4b23      	ldr	r3, [pc, #140]	; (8005148 <xTaskResumeAll+0x12c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050be:	429a      	cmp	r2, r3
 80050c0:	d302      	bcc.n	80050c8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80050c2:	4b22      	ldr	r3, [pc, #136]	; (800514c <xTaskResumeAll+0x130>)
 80050c4:	2201      	movs	r2, #1
 80050c6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050c8:	4b1c      	ldr	r3, [pc, #112]	; (800513c <xTaskResumeAll+0x120>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1cb      	bne.n	8005068 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80050d6:	f000 fb61 	bl	800579c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80050da:	4b1d      	ldr	r3, [pc, #116]	; (8005150 <xTaskResumeAll+0x134>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d010      	beq.n	8005108 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80050e6:	f000 f845 	bl	8005174 <xTaskIncrementTick>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d002      	beq.n	80050f6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80050f0:	4b16      	ldr	r3, [pc, #88]	; (800514c <xTaskResumeAll+0x130>)
 80050f2:	2201      	movs	r2, #1
 80050f4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	3b01      	subs	r3, #1
 80050fa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1f1      	bne.n	80050e6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005102:	4b13      	ldr	r3, [pc, #76]	; (8005150 <xTaskResumeAll+0x134>)
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005108:	4b10      	ldr	r3, [pc, #64]	; (800514c <xTaskResumeAll+0x130>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d009      	beq.n	8005124 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005110:	2301      	movs	r3, #1
 8005112:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005114:	4b0f      	ldr	r3, [pc, #60]	; (8005154 <xTaskResumeAll+0x138>)
 8005116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005124:	f001 fa2a 	bl	800657c <vPortExitCritical>

	return xAlreadyYielded;
 8005128:	68bb      	ldr	r3, [r7, #8]
}
 800512a:	4618      	mov	r0, r3
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	20000d98 	.word	0x20000d98
 8005138:	20000d70 	.word	0x20000d70
 800513c:	20000d30 	.word	0x20000d30
 8005140:	20000d78 	.word	0x20000d78
 8005144:	200008a0 	.word	0x200008a0
 8005148:	2000089c 	.word	0x2000089c
 800514c:	20000d84 	.word	0x20000d84
 8005150:	20000d80 	.word	0x20000d80
 8005154:	e000ed04 	.word	0xe000ed04

08005158 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800515e:	4b04      	ldr	r3, [pc, #16]	; (8005170 <xTaskGetTickCount+0x18>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005164:	687b      	ldr	r3, [r7, #4]
}
 8005166:	4618      	mov	r0, r3
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	bc80      	pop	{r7}
 800516e:	4770      	bx	lr
 8005170:	20000d74 	.word	0x20000d74

08005174 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800517a:	2300      	movs	r3, #0
 800517c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800517e:	4b51      	ldr	r3, [pc, #324]	; (80052c4 <xTaskIncrementTick+0x150>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	f040 808e 	bne.w	80052a4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005188:	4b4f      	ldr	r3, [pc, #316]	; (80052c8 <xTaskIncrementTick+0x154>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	3301      	adds	r3, #1
 800518e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005190:	4a4d      	ldr	r2, [pc, #308]	; (80052c8 <xTaskIncrementTick+0x154>)
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d120      	bne.n	80051de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800519c:	4b4b      	ldr	r3, [pc, #300]	; (80052cc <xTaskIncrementTick+0x158>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <xTaskIncrementTick+0x48>
	__asm volatile
 80051a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051aa:	f383 8811 	msr	BASEPRI, r3
 80051ae:	f3bf 8f6f 	isb	sy
 80051b2:	f3bf 8f4f 	dsb	sy
 80051b6:	603b      	str	r3, [r7, #0]
}
 80051b8:	bf00      	nop
 80051ba:	e7fe      	b.n	80051ba <xTaskIncrementTick+0x46>
 80051bc:	4b43      	ldr	r3, [pc, #268]	; (80052cc <xTaskIncrementTick+0x158>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	60fb      	str	r3, [r7, #12]
 80051c2:	4b43      	ldr	r3, [pc, #268]	; (80052d0 <xTaskIncrementTick+0x15c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a41      	ldr	r2, [pc, #260]	; (80052cc <xTaskIncrementTick+0x158>)
 80051c8:	6013      	str	r3, [r2, #0]
 80051ca:	4a41      	ldr	r2, [pc, #260]	; (80052d0 <xTaskIncrementTick+0x15c>)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6013      	str	r3, [r2, #0]
 80051d0:	4b40      	ldr	r3, [pc, #256]	; (80052d4 <xTaskIncrementTick+0x160>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	3301      	adds	r3, #1
 80051d6:	4a3f      	ldr	r2, [pc, #252]	; (80052d4 <xTaskIncrementTick+0x160>)
 80051d8:	6013      	str	r3, [r2, #0]
 80051da:	f000 fadf 	bl	800579c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80051de:	4b3e      	ldr	r3, [pc, #248]	; (80052d8 <xTaskIncrementTick+0x164>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d34e      	bcc.n	8005286 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051e8:	4b38      	ldr	r3, [pc, #224]	; (80052cc <xTaskIncrementTick+0x158>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <xTaskIncrementTick+0x82>
 80051f2:	2301      	movs	r3, #1
 80051f4:	e000      	b.n	80051f8 <xTaskIncrementTick+0x84>
 80051f6:	2300      	movs	r3, #0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d004      	beq.n	8005206 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051fc:	4b36      	ldr	r3, [pc, #216]	; (80052d8 <xTaskIncrementTick+0x164>)
 80051fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005202:	601a      	str	r2, [r3, #0]
					break;
 8005204:	e03f      	b.n	8005286 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005206:	4b31      	ldr	r3, [pc, #196]	; (80052cc <xTaskIncrementTick+0x158>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	429a      	cmp	r2, r3
 800521c:	d203      	bcs.n	8005226 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800521e:	4a2e      	ldr	r2, [pc, #184]	; (80052d8 <xTaskIncrementTick+0x164>)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6013      	str	r3, [r2, #0]
						break;
 8005224:	e02f      	b.n	8005286 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	3304      	adds	r3, #4
 800522a:	4618      	mov	r0, r3
 800522c:	f7fe fc60 	bl	8003af0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005234:	2b00      	cmp	r3, #0
 8005236:	d004      	beq.n	8005242 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	3318      	adds	r3, #24
 800523c:	4618      	mov	r0, r3
 800523e:	f7fe fc57 	bl	8003af0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005246:	4b25      	ldr	r3, [pc, #148]	; (80052dc <xTaskIncrementTick+0x168>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	429a      	cmp	r2, r3
 800524c:	d903      	bls.n	8005256 <xTaskIncrementTick+0xe2>
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005252:	4a22      	ldr	r2, [pc, #136]	; (80052dc <xTaskIncrementTick+0x168>)
 8005254:	6013      	str	r3, [r2, #0]
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800525a:	4613      	mov	r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	4413      	add	r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4a1f      	ldr	r2, [pc, #124]	; (80052e0 <xTaskIncrementTick+0x16c>)
 8005264:	441a      	add	r2, r3
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	3304      	adds	r3, #4
 800526a:	4619      	mov	r1, r3
 800526c:	4610      	mov	r0, r2
 800526e:	f7fe fbe4 	bl	8003a3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005276:	4b1b      	ldr	r3, [pc, #108]	; (80052e4 <xTaskIncrementTick+0x170>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527c:	429a      	cmp	r2, r3
 800527e:	d3b3      	bcc.n	80051e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005280:	2301      	movs	r3, #1
 8005282:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005284:	e7b0      	b.n	80051e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005286:	4b17      	ldr	r3, [pc, #92]	; (80052e4 <xTaskIncrementTick+0x170>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800528c:	4914      	ldr	r1, [pc, #80]	; (80052e0 <xTaskIncrementTick+0x16c>)
 800528e:	4613      	mov	r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	4413      	add	r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	440b      	add	r3, r1
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2b01      	cmp	r3, #1
 800529c:	d907      	bls.n	80052ae <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800529e:	2301      	movs	r3, #1
 80052a0:	617b      	str	r3, [r7, #20]
 80052a2:	e004      	b.n	80052ae <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80052a4:	4b10      	ldr	r3, [pc, #64]	; (80052e8 <xTaskIncrementTick+0x174>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	3301      	adds	r3, #1
 80052aa:	4a0f      	ldr	r2, [pc, #60]	; (80052e8 <xTaskIncrementTick+0x174>)
 80052ac:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80052ae:	4b0f      	ldr	r3, [pc, #60]	; (80052ec <xTaskIncrementTick+0x178>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 80052b6:	2301      	movs	r3, #1
 80052b8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80052ba:	697b      	ldr	r3, [r7, #20]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3718      	adds	r7, #24
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	20000d98 	.word	0x20000d98
 80052c8:	20000d74 	.word	0x20000d74
 80052cc:	20000d28 	.word	0x20000d28
 80052d0:	20000d2c 	.word	0x20000d2c
 80052d4:	20000d88 	.word	0x20000d88
 80052d8:	20000d90 	.word	0x20000d90
 80052dc:	20000d78 	.word	0x20000d78
 80052e0:	200008a0 	.word	0x200008a0
 80052e4:	2000089c 	.word	0x2000089c
 80052e8:	20000d80 	.word	0x20000d80
 80052ec:	20000d84 	.word	0x20000d84

080052f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80052f6:	4b2a      	ldr	r3, [pc, #168]	; (80053a0 <vTaskSwitchContext+0xb0>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80052fe:	4b29      	ldr	r3, [pc, #164]	; (80053a4 <vTaskSwitchContext+0xb4>)
 8005300:	2201      	movs	r2, #1
 8005302:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005304:	e046      	b.n	8005394 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005306:	4b27      	ldr	r3, [pc, #156]	; (80053a4 <vTaskSwitchContext+0xb4>)
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800530c:	4b26      	ldr	r3, [pc, #152]	; (80053a8 <vTaskSwitchContext+0xb8>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	60fb      	str	r3, [r7, #12]
 8005312:	e010      	b.n	8005336 <vTaskSwitchContext+0x46>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10a      	bne.n	8005330 <vTaskSwitchContext+0x40>
	__asm volatile
 800531a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531e:	f383 8811 	msr	BASEPRI, r3
 8005322:	f3bf 8f6f 	isb	sy
 8005326:	f3bf 8f4f 	dsb	sy
 800532a:	607b      	str	r3, [r7, #4]
}
 800532c:	bf00      	nop
 800532e:	e7fe      	b.n	800532e <vTaskSwitchContext+0x3e>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	3b01      	subs	r3, #1
 8005334:	60fb      	str	r3, [r7, #12]
 8005336:	491d      	ldr	r1, [pc, #116]	; (80053ac <vTaskSwitchContext+0xbc>)
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	4613      	mov	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	4413      	add	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	440b      	add	r3, r1
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d0e4      	beq.n	8005314 <vTaskSwitchContext+0x24>
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	4613      	mov	r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4a15      	ldr	r2, [pc, #84]	; (80053ac <vTaskSwitchContext+0xbc>)
 8005356:	4413      	add	r3, r2
 8005358:	60bb      	str	r3, [r7, #8]
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	605a      	str	r2, [r3, #4]
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	3308      	adds	r3, #8
 800536c:	429a      	cmp	r2, r3
 800536e:	d104      	bne.n	800537a <vTaskSwitchContext+0x8a>
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	605a      	str	r2, [r3, #4]
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	4a0b      	ldr	r2, [pc, #44]	; (80053b0 <vTaskSwitchContext+0xc0>)
 8005382:	6013      	str	r3, [r2, #0]
 8005384:	4a08      	ldr	r2, [pc, #32]	; (80053a8 <vTaskSwitchContext+0xb8>)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800538a:	4b09      	ldr	r3, [pc, #36]	; (80053b0 <vTaskSwitchContext+0xc0>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	3354      	adds	r3, #84	; 0x54
 8005390:	4a08      	ldr	r2, [pc, #32]	; (80053b4 <vTaskSwitchContext+0xc4>)
 8005392:	6013      	str	r3, [r2, #0]
}
 8005394:	bf00      	nop
 8005396:	3714      	adds	r7, #20
 8005398:	46bd      	mov	sp, r7
 800539a:	bc80      	pop	{r7}
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	20000d98 	.word	0x20000d98
 80053a4:	20000d84 	.word	0x20000d84
 80053a8:	20000d78 	.word	0x20000d78
 80053ac:	200008a0 	.word	0x200008a0
 80053b0:	2000089c 	.word	0x2000089c
 80053b4:	200000a0 	.word	0x200000a0

080053b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10a      	bne.n	80053de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80053c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053cc:	f383 8811 	msr	BASEPRI, r3
 80053d0:	f3bf 8f6f 	isb	sy
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	60fb      	str	r3, [r7, #12]
}
 80053da:	bf00      	nop
 80053dc:	e7fe      	b.n	80053dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80053de:	4b07      	ldr	r3, [pc, #28]	; (80053fc <vTaskPlaceOnEventList+0x44>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	3318      	adds	r3, #24
 80053e4:	4619      	mov	r1, r3
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7fe fb4a 	bl	8003a80 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80053ec:	2101      	movs	r1, #1
 80053ee:	6838      	ldr	r0, [r7, #0]
 80053f0:	f000 fb8c 	bl	8005b0c <prvAddCurrentTaskToDelayedList>
}
 80053f4:	bf00      	nop
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	2000089c 	.word	0x2000089c

08005400 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10a      	bne.n	8005428 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	617b      	str	r3, [r7, #20]
}
 8005424:	bf00      	nop
 8005426:	e7fe      	b.n	8005426 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005428:	4b0a      	ldr	r3, [pc, #40]	; (8005454 <vTaskPlaceOnEventListRestricted+0x54>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	3318      	adds	r3, #24
 800542e:	4619      	mov	r1, r3
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	f7fe fb02 	bl	8003a3a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800543c:	f04f 33ff 	mov.w	r3, #4294967295
 8005440:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005442:	6879      	ldr	r1, [r7, #4]
 8005444:	68b8      	ldr	r0, [r7, #8]
 8005446:	f000 fb61 	bl	8005b0c <prvAddCurrentTaskToDelayedList>
	}
 800544a:	bf00      	nop
 800544c:	3718      	adds	r7, #24
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	2000089c 	.word	0x2000089c

08005458 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b086      	sub	sp, #24
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10a      	bne.n	8005484 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800546e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	60fb      	str	r3, [r7, #12]
}
 8005480:	bf00      	nop
 8005482:	e7fe      	b.n	8005482 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	3318      	adds	r3, #24
 8005488:	4618      	mov	r0, r3
 800548a:	f7fe fb31 	bl	8003af0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800548e:	4b1e      	ldr	r3, [pc, #120]	; (8005508 <xTaskRemoveFromEventList+0xb0>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d11d      	bne.n	80054d2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	3304      	adds	r3, #4
 800549a:	4618      	mov	r0, r3
 800549c:	f7fe fb28 	bl	8003af0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054a4:	4b19      	ldr	r3, [pc, #100]	; (800550c <xTaskRemoveFromEventList+0xb4>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d903      	bls.n	80054b4 <xTaskRemoveFromEventList+0x5c>
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b0:	4a16      	ldr	r2, [pc, #88]	; (800550c <xTaskRemoveFromEventList+0xb4>)
 80054b2:	6013      	str	r3, [r2, #0]
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b8:	4613      	mov	r3, r2
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	4a13      	ldr	r2, [pc, #76]	; (8005510 <xTaskRemoveFromEventList+0xb8>)
 80054c2:	441a      	add	r2, r3
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	3304      	adds	r3, #4
 80054c8:	4619      	mov	r1, r3
 80054ca:	4610      	mov	r0, r2
 80054cc:	f7fe fab5 	bl	8003a3a <vListInsertEnd>
 80054d0:	e005      	b.n	80054de <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	3318      	adds	r3, #24
 80054d6:	4619      	mov	r1, r3
 80054d8:	480e      	ldr	r0, [pc, #56]	; (8005514 <xTaskRemoveFromEventList+0xbc>)
 80054da:	f7fe faae 	bl	8003a3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e2:	4b0d      	ldr	r3, [pc, #52]	; (8005518 <xTaskRemoveFromEventList+0xc0>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d905      	bls.n	80054f8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80054ec:	2301      	movs	r3, #1
 80054ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80054f0:	4b0a      	ldr	r3, [pc, #40]	; (800551c <xTaskRemoveFromEventList+0xc4>)
 80054f2:	2201      	movs	r2, #1
 80054f4:	601a      	str	r2, [r3, #0]
 80054f6:	e001      	b.n	80054fc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80054f8:	2300      	movs	r3, #0
 80054fa:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80054fc:	697b      	ldr	r3, [r7, #20]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3718      	adds	r7, #24
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	20000d98 	.word	0x20000d98
 800550c:	20000d78 	.word	0x20000d78
 8005510:	200008a0 	.word	0x200008a0
 8005514:	20000d30 	.word	0x20000d30
 8005518:	2000089c 	.word	0x2000089c
 800551c:	20000d84 	.word	0x20000d84

08005520 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005528:	4b06      	ldr	r3, [pc, #24]	; (8005544 <vTaskInternalSetTimeOutState+0x24>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005530:	4b05      	ldr	r3, [pc, #20]	; (8005548 <vTaskInternalSetTimeOutState+0x28>)
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	605a      	str	r2, [r3, #4]
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	bc80      	pop	{r7}
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	20000d88 	.word	0x20000d88
 8005548:	20000d74 	.word	0x20000d74

0800554c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b088      	sub	sp, #32
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10a      	bne.n	8005572 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800555c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005560:	f383 8811 	msr	BASEPRI, r3
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	613b      	str	r3, [r7, #16]
}
 800556e:	bf00      	nop
 8005570:	e7fe      	b.n	8005570 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10a      	bne.n	800558e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557c:	f383 8811 	msr	BASEPRI, r3
 8005580:	f3bf 8f6f 	isb	sy
 8005584:	f3bf 8f4f 	dsb	sy
 8005588:	60fb      	str	r3, [r7, #12]
}
 800558a:	bf00      	nop
 800558c:	e7fe      	b.n	800558c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800558e:	f000 ffc5 	bl	800651c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005592:	4b1d      	ldr	r3, [pc, #116]	; (8005608 <xTaskCheckForTimeOut+0xbc>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055aa:	d102      	bne.n	80055b2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80055ac:	2300      	movs	r3, #0
 80055ae:	61fb      	str	r3, [r7, #28]
 80055b0:	e023      	b.n	80055fa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	4b15      	ldr	r3, [pc, #84]	; (800560c <xTaskCheckForTimeOut+0xc0>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d007      	beq.n	80055ce <xTaskCheckForTimeOut+0x82>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	69ba      	ldr	r2, [r7, #24]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d302      	bcc.n	80055ce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80055c8:	2301      	movs	r3, #1
 80055ca:	61fb      	str	r3, [r7, #28]
 80055cc:	e015      	b.n	80055fa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d20b      	bcs.n	80055f0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	1ad2      	subs	r2, r2, r3
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7ff ff9b 	bl	8005520 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80055ea:	2300      	movs	r3, #0
 80055ec:	61fb      	str	r3, [r7, #28]
 80055ee:	e004      	b.n	80055fa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	2200      	movs	r2, #0
 80055f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80055f6:	2301      	movs	r3, #1
 80055f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80055fa:	f000 ffbf 	bl	800657c <vPortExitCritical>

	return xReturn;
 80055fe:	69fb      	ldr	r3, [r7, #28]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3720      	adds	r7, #32
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	20000d74 	.word	0x20000d74
 800560c:	20000d88 	.word	0x20000d88

08005610 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005610:	b480      	push	{r7}
 8005612:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005614:	4b03      	ldr	r3, [pc, #12]	; (8005624 <vTaskMissedYield+0x14>)
 8005616:	2201      	movs	r2, #1
 8005618:	601a      	str	r2, [r3, #0]
}
 800561a:	bf00      	nop
 800561c:	46bd      	mov	sp, r7
 800561e:	bc80      	pop	{r7}
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	20000d84 	.word	0x20000d84

08005628 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005630:	f000 f852 	bl	80056d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005634:	4b06      	ldr	r3, [pc, #24]	; (8005650 <prvIdleTask+0x28>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d9f9      	bls.n	8005630 <prvIdleTask+0x8>
			{
				taskYIELD();
 800563c:	4b05      	ldr	r3, [pc, #20]	; (8005654 <prvIdleTask+0x2c>)
 800563e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	f3bf 8f4f 	dsb	sy
 8005648:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800564c:	e7f0      	b.n	8005630 <prvIdleTask+0x8>
 800564e:	bf00      	nop
 8005650:	200008a0 	.word	0x200008a0
 8005654:	e000ed04 	.word	0xe000ed04

08005658 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800565e:	2300      	movs	r3, #0
 8005660:	607b      	str	r3, [r7, #4]
 8005662:	e00c      	b.n	800567e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	4613      	mov	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4413      	add	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4a12      	ldr	r2, [pc, #72]	; (80056b8 <prvInitialiseTaskLists+0x60>)
 8005670:	4413      	add	r3, r2
 8005672:	4618      	mov	r0, r3
 8005674:	f7fe f9b6 	bl	80039e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	3301      	adds	r3, #1
 800567c:	607b      	str	r3, [r7, #4]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2b37      	cmp	r3, #55	; 0x37
 8005682:	d9ef      	bls.n	8005664 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005684:	480d      	ldr	r0, [pc, #52]	; (80056bc <prvInitialiseTaskLists+0x64>)
 8005686:	f7fe f9ad 	bl	80039e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800568a:	480d      	ldr	r0, [pc, #52]	; (80056c0 <prvInitialiseTaskLists+0x68>)
 800568c:	f7fe f9aa 	bl	80039e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005690:	480c      	ldr	r0, [pc, #48]	; (80056c4 <prvInitialiseTaskLists+0x6c>)
 8005692:	f7fe f9a7 	bl	80039e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005696:	480c      	ldr	r0, [pc, #48]	; (80056c8 <prvInitialiseTaskLists+0x70>)
 8005698:	f7fe f9a4 	bl	80039e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800569c:	480b      	ldr	r0, [pc, #44]	; (80056cc <prvInitialiseTaskLists+0x74>)
 800569e:	f7fe f9a1 	bl	80039e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80056a2:	4b0b      	ldr	r3, [pc, #44]	; (80056d0 <prvInitialiseTaskLists+0x78>)
 80056a4:	4a05      	ldr	r2, [pc, #20]	; (80056bc <prvInitialiseTaskLists+0x64>)
 80056a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80056a8:	4b0a      	ldr	r3, [pc, #40]	; (80056d4 <prvInitialiseTaskLists+0x7c>)
 80056aa:	4a05      	ldr	r2, [pc, #20]	; (80056c0 <prvInitialiseTaskLists+0x68>)
 80056ac:	601a      	str	r2, [r3, #0]
}
 80056ae:	bf00      	nop
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	200008a0 	.word	0x200008a0
 80056bc:	20000d00 	.word	0x20000d00
 80056c0:	20000d14 	.word	0x20000d14
 80056c4:	20000d30 	.word	0x20000d30
 80056c8:	20000d44 	.word	0x20000d44
 80056cc:	20000d5c 	.word	0x20000d5c
 80056d0:	20000d28 	.word	0x20000d28
 80056d4:	20000d2c 	.word	0x20000d2c

080056d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056de:	e019      	b.n	8005714 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80056e0:	f000 ff1c 	bl	800651c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80056e4:	4b10      	ldr	r3, [pc, #64]	; (8005728 <prvCheckTasksWaitingTermination+0x50>)
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3304      	adds	r3, #4
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7fe f9fd 	bl	8003af0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80056f6:	4b0d      	ldr	r3, [pc, #52]	; (800572c <prvCheckTasksWaitingTermination+0x54>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	3b01      	subs	r3, #1
 80056fc:	4a0b      	ldr	r2, [pc, #44]	; (800572c <prvCheckTasksWaitingTermination+0x54>)
 80056fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005700:	4b0b      	ldr	r3, [pc, #44]	; (8005730 <prvCheckTasksWaitingTermination+0x58>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	3b01      	subs	r3, #1
 8005706:	4a0a      	ldr	r2, [pc, #40]	; (8005730 <prvCheckTasksWaitingTermination+0x58>)
 8005708:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800570a:	f000 ff37 	bl	800657c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f810 	bl	8005734 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005714:	4b06      	ldr	r3, [pc, #24]	; (8005730 <prvCheckTasksWaitingTermination+0x58>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1e1      	bne.n	80056e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800571c:	bf00      	nop
 800571e:	bf00      	nop
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	20000d44 	.word	0x20000d44
 800572c:	20000d70 	.word	0x20000d70
 8005730:	20000d58 	.word	0x20000d58

08005734 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	3354      	adds	r3, #84	; 0x54
 8005740:	4618      	mov	r0, r3
 8005742:	f003 f925 	bl	8008990 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800574c:	2b00      	cmp	r3, #0
 800574e:	d108      	bne.n	8005762 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005754:	4618      	mov	r0, r3
 8005756:	f001 f8a5 	bl	80068a4 <vPortFree>
				vPortFree( pxTCB );
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f001 f8a2 	bl	80068a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005760:	e018      	b.n	8005794 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005768:	2b01      	cmp	r3, #1
 800576a:	d103      	bne.n	8005774 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f001 f899 	bl	80068a4 <vPortFree>
	}
 8005772:	e00f      	b.n	8005794 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800577a:	2b02      	cmp	r3, #2
 800577c:	d00a      	beq.n	8005794 <prvDeleteTCB+0x60>
	__asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	60fb      	str	r3, [r7, #12]
}
 8005790:	bf00      	nop
 8005792:	e7fe      	b.n	8005792 <prvDeleteTCB+0x5e>
	}
 8005794:	bf00      	nop
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057a2:	4b0e      	ldr	r3, [pc, #56]	; (80057dc <prvResetNextTaskUnblockTime+0x40>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <prvResetNextTaskUnblockTime+0x14>
 80057ac:	2301      	movs	r3, #1
 80057ae:	e000      	b.n	80057b2 <prvResetNextTaskUnblockTime+0x16>
 80057b0:	2300      	movs	r3, #0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d004      	beq.n	80057c0 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80057b6:	4b0a      	ldr	r3, [pc, #40]	; (80057e0 <prvResetNextTaskUnblockTime+0x44>)
 80057b8:	f04f 32ff 	mov.w	r2, #4294967295
 80057bc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80057be:	e008      	b.n	80057d2 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80057c0:	4b06      	ldr	r3, [pc, #24]	; (80057dc <prvResetNextTaskUnblockTime+0x40>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	4a04      	ldr	r2, [pc, #16]	; (80057e0 <prvResetNextTaskUnblockTime+0x44>)
 80057d0:	6013      	str	r3, [r2, #0]
}
 80057d2:	bf00      	nop
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bc80      	pop	{r7}
 80057da:	4770      	bx	lr
 80057dc:	20000d28 	.word	0x20000d28
 80057e0:	20000d90 	.word	0x20000d90

080057e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80057ea:	4b0b      	ldr	r3, [pc, #44]	; (8005818 <xTaskGetSchedulerState+0x34>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d102      	bne.n	80057f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80057f2:	2301      	movs	r3, #1
 80057f4:	607b      	str	r3, [r7, #4]
 80057f6:	e008      	b.n	800580a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057f8:	4b08      	ldr	r3, [pc, #32]	; (800581c <xTaskGetSchedulerState+0x38>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d102      	bne.n	8005806 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005800:	2302      	movs	r3, #2
 8005802:	607b      	str	r3, [r7, #4]
 8005804:	e001      	b.n	800580a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005806:	2300      	movs	r3, #0
 8005808:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800580a:	687b      	ldr	r3, [r7, #4]
	}
 800580c:	4618      	mov	r0, r3
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	bc80      	pop	{r7}
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	20000d7c 	.word	0x20000d7c
 800581c:	20000d98 	.word	0x20000d98

08005820 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800582c:	2300      	movs	r3, #0
 800582e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d056      	beq.n	80058e4 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800583a:	4b2d      	ldr	r3, [pc, #180]	; (80058f0 <xTaskPriorityInherit+0xd0>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005840:	429a      	cmp	r2, r3
 8005842:	d246      	bcs.n	80058d2 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	2b00      	cmp	r3, #0
 800584a:	db06      	blt.n	800585a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800584c:	4b28      	ldr	r3, [pc, #160]	; (80058f0 <xTaskPriorityInherit+0xd0>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005852:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	6959      	ldr	r1, [r3, #20]
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005862:	4613      	mov	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	4413      	add	r3, r2
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	4a22      	ldr	r2, [pc, #136]	; (80058f4 <xTaskPriorityInherit+0xd4>)
 800586c:	4413      	add	r3, r2
 800586e:	4299      	cmp	r1, r3
 8005870:	d101      	bne.n	8005876 <xTaskPriorityInherit+0x56>
 8005872:	2301      	movs	r3, #1
 8005874:	e000      	b.n	8005878 <xTaskPriorityInherit+0x58>
 8005876:	2300      	movs	r3, #0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d022      	beq.n	80058c2 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	3304      	adds	r3, #4
 8005880:	4618      	mov	r0, r3
 8005882:	f7fe f935 	bl	8003af0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005886:	4b1a      	ldr	r3, [pc, #104]	; (80058f0 <xTaskPriorityInherit+0xd0>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005894:	4b18      	ldr	r3, [pc, #96]	; (80058f8 <xTaskPriorityInherit+0xd8>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	429a      	cmp	r2, r3
 800589a:	d903      	bls.n	80058a4 <xTaskPriorityInherit+0x84>
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a0:	4a15      	ldr	r2, [pc, #84]	; (80058f8 <xTaskPriorityInherit+0xd8>)
 80058a2:	6013      	str	r3, [r2, #0]
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058a8:	4613      	mov	r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4413      	add	r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4a10      	ldr	r2, [pc, #64]	; (80058f4 <xTaskPriorityInherit+0xd4>)
 80058b2:	441a      	add	r2, r3
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	3304      	adds	r3, #4
 80058b8:	4619      	mov	r1, r3
 80058ba:	4610      	mov	r0, r2
 80058bc:	f7fe f8bd 	bl	8003a3a <vListInsertEnd>
 80058c0:	e004      	b.n	80058cc <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80058c2:	4b0b      	ldr	r3, [pc, #44]	; (80058f0 <xTaskPriorityInherit+0xd0>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80058cc:	2301      	movs	r3, #1
 80058ce:	60fb      	str	r3, [r7, #12]
 80058d0:	e008      	b.n	80058e4 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058d6:	4b06      	ldr	r3, [pc, #24]	; (80058f0 <xTaskPriorityInherit+0xd0>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058dc:	429a      	cmp	r2, r3
 80058de:	d201      	bcs.n	80058e4 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80058e0:	2301      	movs	r3, #1
 80058e2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80058e4:	68fb      	ldr	r3, [r7, #12]
	}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3710      	adds	r7, #16
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	2000089c 	.word	0x2000089c
 80058f4:	200008a0 	.word	0x200008a0
 80058f8:	20000d78 	.word	0x20000d78

080058fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b086      	sub	sp, #24
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005908:	2300      	movs	r3, #0
 800590a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d056      	beq.n	80059c0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005912:	4b2e      	ldr	r3, [pc, #184]	; (80059cc <xTaskPriorityDisinherit+0xd0>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	429a      	cmp	r2, r3
 800591a:	d00a      	beq.n	8005932 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800591c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005920:	f383 8811 	msr	BASEPRI, r3
 8005924:	f3bf 8f6f 	isb	sy
 8005928:	f3bf 8f4f 	dsb	sy
 800592c:	60fb      	str	r3, [r7, #12]
}
 800592e:	bf00      	nop
 8005930:	e7fe      	b.n	8005930 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10a      	bne.n	8005950 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800593a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593e:	f383 8811 	msr	BASEPRI, r3
 8005942:	f3bf 8f6f 	isb	sy
 8005946:	f3bf 8f4f 	dsb	sy
 800594a:	60bb      	str	r3, [r7, #8]
}
 800594c:	bf00      	nop
 800594e:	e7fe      	b.n	800594e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005954:	1e5a      	subs	r2, r3, #1
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005962:	429a      	cmp	r2, r3
 8005964:	d02c      	beq.n	80059c0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800596a:	2b00      	cmp	r3, #0
 800596c:	d128      	bne.n	80059c0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	3304      	adds	r3, #4
 8005972:	4618      	mov	r0, r3
 8005974:	f7fe f8bc 	bl	8003af0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005984:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005990:	4b0f      	ldr	r3, [pc, #60]	; (80059d0 <xTaskPriorityDisinherit+0xd4>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	429a      	cmp	r2, r3
 8005996:	d903      	bls.n	80059a0 <xTaskPriorityDisinherit+0xa4>
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599c:	4a0c      	ldr	r2, [pc, #48]	; (80059d0 <xTaskPriorityDisinherit+0xd4>)
 800599e:	6013      	str	r3, [r2, #0]
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a4:	4613      	mov	r3, r2
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	4413      	add	r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4a09      	ldr	r2, [pc, #36]	; (80059d4 <xTaskPriorityDisinherit+0xd8>)
 80059ae:	441a      	add	r2, r3
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	3304      	adds	r3, #4
 80059b4:	4619      	mov	r1, r3
 80059b6:	4610      	mov	r0, r2
 80059b8:	f7fe f83f 	bl	8003a3a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80059bc:	2301      	movs	r3, #1
 80059be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80059c0:	697b      	ldr	r3, [r7, #20]
	}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3718      	adds	r7, #24
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	2000089c 	.word	0x2000089c
 80059d0:	20000d78 	.word	0x20000d78
 80059d4:	200008a0 	.word	0x200008a0

080059d8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b088      	sub	sp, #32
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80059e6:	2301      	movs	r3, #1
 80059e8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d06f      	beq.n	8005ad0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10a      	bne.n	8005a0e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80059f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059fc:	f383 8811 	msr	BASEPRI, r3
 8005a00:	f3bf 8f6f 	isb	sy
 8005a04:	f3bf 8f4f 	dsb	sy
 8005a08:	60fb      	str	r3, [r7, #12]
}
 8005a0a:	bf00      	nop
 8005a0c:	e7fe      	b.n	8005a0c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a12:	683a      	ldr	r2, [r7, #0]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d902      	bls.n	8005a1e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	61fb      	str	r3, [r7, #28]
 8005a1c:	e002      	b.n	8005a24 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a22:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a28:	69fa      	ldr	r2, [r7, #28]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d050      	beq.n	8005ad0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d14b      	bne.n	8005ad0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005a38:	4b27      	ldr	r3, [pc, #156]	; (8005ad8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	69ba      	ldr	r2, [r7, #24]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d10a      	bne.n	8005a58 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a46:	f383 8811 	msr	BASEPRI, r3
 8005a4a:	f3bf 8f6f 	isb	sy
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	60bb      	str	r3, [r7, #8]
}
 8005a54:	bf00      	nop
 8005a56:	e7fe      	b.n	8005a56 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	69fa      	ldr	r2, [r7, #28]
 8005a62:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	db04      	blt.n	8005a76 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	6959      	ldr	r1, [r3, #20]
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4413      	add	r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	4a15      	ldr	r2, [pc, #84]	; (8005adc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005a86:	4413      	add	r3, r2
 8005a88:	4299      	cmp	r1, r3
 8005a8a:	d101      	bne.n	8005a90 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e000      	b.n	8005a92 <vTaskPriorityDisinheritAfterTimeout+0xba>
 8005a90:	2300      	movs	r3, #0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d01c      	beq.n	8005ad0 <vTaskPriorityDisinheritAfterTimeout+0xf8>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	3304      	adds	r3, #4
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7fe f828 	bl	8003af0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa4:	4b0e      	ldr	r3, [pc, #56]	; (8005ae0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d903      	bls.n	8005ab4 <vTaskPriorityDisinheritAfterTimeout+0xdc>
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab0:	4a0b      	ldr	r2, [pc, #44]	; (8005ae0 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8005ab2:	6013      	str	r3, [r2, #0]
 8005ab4:	69bb      	ldr	r3, [r7, #24]
 8005ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab8:	4613      	mov	r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4413      	add	r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4a06      	ldr	r2, [pc, #24]	; (8005adc <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005ac2:	441a      	add	r2, r3
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	3304      	adds	r3, #4
 8005ac8:	4619      	mov	r1, r3
 8005aca:	4610      	mov	r0, r2
 8005acc:	f7fd ffb5 	bl	8003a3a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ad0:	bf00      	nop
 8005ad2:	3720      	adds	r7, #32
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	2000089c 	.word	0x2000089c
 8005adc:	200008a0 	.word	0x200008a0
 8005ae0:	20000d78 	.word	0x20000d78

08005ae4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005ae4:	b480      	push	{r7}
 8005ae6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005ae8:	4b07      	ldr	r3, [pc, #28]	; (8005b08 <pvTaskIncrementMutexHeldCount+0x24>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d004      	beq.n	8005afa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005af0:	4b05      	ldr	r3, [pc, #20]	; (8005b08 <pvTaskIncrementMutexHeldCount+0x24>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005af6:	3201      	adds	r2, #1
 8005af8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005afa:	4b03      	ldr	r3, [pc, #12]	; (8005b08 <pvTaskIncrementMutexHeldCount+0x24>)
 8005afc:	681b      	ldr	r3, [r3, #0]
	}
 8005afe:	4618      	mov	r0, r3
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bc80      	pop	{r7}
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	2000089c 	.word	0x2000089c

08005b0c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005b16:	4b21      	ldr	r3, [pc, #132]	; (8005b9c <prvAddCurrentTaskToDelayedList+0x90>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b1c:	4b20      	ldr	r3, [pc, #128]	; (8005ba0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	3304      	adds	r3, #4
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fd ffe4 	bl	8003af0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2e:	d10a      	bne.n	8005b46 <prvAddCurrentTaskToDelayedList+0x3a>
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d007      	beq.n	8005b46 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b36:	4b1a      	ldr	r3, [pc, #104]	; (8005ba0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	3304      	adds	r3, #4
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	4819      	ldr	r0, [pc, #100]	; (8005ba4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005b40:	f7fd ff7b 	bl	8003a3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b44:	e026      	b.n	8005b94 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b4e:	4b14      	ldr	r3, [pc, #80]	; (8005ba0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68ba      	ldr	r2, [r7, #8]
 8005b54:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d209      	bcs.n	8005b72 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b5e:	4b12      	ldr	r3, [pc, #72]	; (8005ba8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	4b0f      	ldr	r3, [pc, #60]	; (8005ba0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	3304      	adds	r3, #4
 8005b68:	4619      	mov	r1, r3
 8005b6a:	4610      	mov	r0, r2
 8005b6c:	f7fd ff88 	bl	8003a80 <vListInsert>
}
 8005b70:	e010      	b.n	8005b94 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b72:	4b0e      	ldr	r3, [pc, #56]	; (8005bac <prvAddCurrentTaskToDelayedList+0xa0>)
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	4b0a      	ldr	r3, [pc, #40]	; (8005ba0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	3304      	adds	r3, #4
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	4610      	mov	r0, r2
 8005b80:	f7fd ff7e 	bl	8003a80 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b84:	4b0a      	ldr	r3, [pc, #40]	; (8005bb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d202      	bcs.n	8005b94 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005b8e:	4a08      	ldr	r2, [pc, #32]	; (8005bb0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	6013      	str	r3, [r2, #0]
}
 8005b94:	bf00      	nop
 8005b96:	3710      	adds	r7, #16
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	20000d74 	.word	0x20000d74
 8005ba0:	2000089c 	.word	0x2000089c
 8005ba4:	20000d5c 	.word	0x20000d5c
 8005ba8:	20000d2c 	.word	0x20000d2c
 8005bac:	20000d28 	.word	0x20000d28
 8005bb0:	20000d90 	.word	0x20000d90

08005bb4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b08a      	sub	sp, #40	; 0x28
 8005bb8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005bbe:	f000 fb5b 	bl	8006278 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005bc2:	4b1c      	ldr	r3, [pc, #112]	; (8005c34 <xTimerCreateTimerTask+0x80>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d021      	beq.n	8005c0e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005bd2:	1d3a      	adds	r2, r7, #4
 8005bd4:	f107 0108 	add.w	r1, r7, #8
 8005bd8:	f107 030c 	add.w	r3, r7, #12
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7fd fee7 	bl	80039b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005be2:	6879      	ldr	r1, [r7, #4]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	9202      	str	r2, [sp, #8]
 8005bea:	9301      	str	r3, [sp, #4]
 8005bec:	2302      	movs	r3, #2
 8005bee:	9300      	str	r3, [sp, #0]
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	460a      	mov	r2, r1
 8005bf4:	4910      	ldr	r1, [pc, #64]	; (8005c38 <xTimerCreateTimerTask+0x84>)
 8005bf6:	4811      	ldr	r0, [pc, #68]	; (8005c3c <xTimerCreateTimerTask+0x88>)
 8005bf8:	f7fe ffae 	bl	8004b58 <xTaskCreateStatic>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	4a10      	ldr	r2, [pc, #64]	; (8005c40 <xTimerCreateTimerTask+0x8c>)
 8005c00:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005c02:	4b0f      	ldr	r3, [pc, #60]	; (8005c40 <xTimerCreateTimerTask+0x8c>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d001      	beq.n	8005c0e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d10a      	bne.n	8005c2a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c18:	f383 8811 	msr	BASEPRI, r3
 8005c1c:	f3bf 8f6f 	isb	sy
 8005c20:	f3bf 8f4f 	dsb	sy
 8005c24:	613b      	str	r3, [r7, #16]
}
 8005c26:	bf00      	nop
 8005c28:	e7fe      	b.n	8005c28 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005c2a:	697b      	ldr	r3, [r7, #20]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3718      	adds	r7, #24
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	20000dcc 	.word	0x20000dcc
 8005c38:	08008b48 	.word	0x08008b48
 8005c3c:	08005e81 	.word	0x08005e81
 8005c40:	20000dd0 	.word	0x20000dd0

08005c44 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b088      	sub	sp, #32
 8005c48:	af02      	add	r7, sp, #8
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
 8005c50:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8005c52:	2030      	movs	r0, #48	; 0x30
 8005c54:	f000 fd62 	bl	800671c <pvPortMalloc>
 8005c58:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00d      	beq.n	8005c7c <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	9301      	str	r3, [sp, #4]
 8005c64:	6a3b      	ldr	r3, [r7, #32]
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	68b9      	ldr	r1, [r7, #8]
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f000 f846 	bl	8005d00 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8005c7c:	697b      	ldr	r3, [r7, #20]
	}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3718      	adds	r7, #24
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b08a      	sub	sp, #40	; 0x28
 8005c8a:	af02      	add	r7, sp, #8
 8005c8c:	60f8      	str	r0, [r7, #12]
 8005c8e:	60b9      	str	r1, [r7, #8]
 8005c90:	607a      	str	r2, [r7, #4]
 8005c92:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8005c94:	2330      	movs	r3, #48	; 0x30
 8005c96:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	2b30      	cmp	r3, #48	; 0x30
 8005c9c:	d00a      	beq.n	8005cb4 <xTimerCreateStatic+0x2e>
	__asm volatile
 8005c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca2:	f383 8811 	msr	BASEPRI, r3
 8005ca6:	f3bf 8f6f 	isb	sy
 8005caa:	f3bf 8f4f 	dsb	sy
 8005cae:	61bb      	str	r3, [r7, #24]
}
 8005cb0:	bf00      	nop
 8005cb2:	e7fe      	b.n	8005cb2 <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8005cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10a      	bne.n	8005cd0 <xTimerCreateStatic+0x4a>
	__asm volatile
 8005cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cbe:	f383 8811 	msr	BASEPRI, r3
 8005cc2:	f3bf 8f6f 	isb	sy
 8005cc6:	f3bf 8f4f 	dsb	sy
 8005cca:	617b      	str	r3, [r7, #20]
}
 8005ccc:	bf00      	nop
 8005cce:	e7fe      	b.n	8005cce <xTimerCreateStatic+0x48>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd2:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d00d      	beq.n	8005cf6 <xTimerCreateStatic+0x70>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	9301      	str	r3, [sp, #4]
 8005cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce0:	9300      	str	r3, [sp, #0]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	68b9      	ldr	r1, [r7, #8]
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f000 f809 	bl	8005d00 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8005cf6:	69fb      	ldr	r3, [r7, #28]
	}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3720      	adds	r7, #32
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	607a      	str	r2, [r7, #4]
 8005d0c:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10a      	bne.n	8005d2a <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8005d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d18:	f383 8811 	msr	BASEPRI, r3
 8005d1c:	f3bf 8f6f 	isb	sy
 8005d20:	f3bf 8f4f 	dsb	sy
 8005d24:	617b      	str	r3, [r7, #20]
}
 8005d26:	bf00      	nop
 8005d28:	e7fe      	b.n	8005d28 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d015      	beq.n	8005d5c <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8005d30:	f000 faa2 	bl	8006278 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8005d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	68ba      	ldr	r2, [r7, #8]
 8005d3e:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	687a      	ldr	r2, [r7, #4]
 8005d44:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8005d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d48:	683a      	ldr	r2, [r7, #0]
 8005d4a:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4e:	6a3a      	ldr	r2, [r7, #32]
 8005d50:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d54:	3304      	adds	r3, #4
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fd fe63 	bl	8003a22 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8005d5c:	bf00      	nop
 8005d5e:	3718      	adds	r7, #24
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b08a      	sub	sp, #40	; 0x28
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
 8005d70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005d72:	2300      	movs	r3, #0
 8005d74:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d10a      	bne.n	8005d92 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d80:	f383 8811 	msr	BASEPRI, r3
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	623b      	str	r3, [r7, #32]
}
 8005d8e:	bf00      	nop
 8005d90:	e7fe      	b.n	8005d90 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005d92:	4b1a      	ldr	r3, [pc, #104]	; (8005dfc <xTimerGenericCommand+0x98>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d02a      	beq.n	8005df0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	2b05      	cmp	r3, #5
 8005daa:	dc18      	bgt.n	8005dde <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005dac:	f7ff fd1a 	bl	80057e4 <xTaskGetSchedulerState>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d109      	bne.n	8005dca <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005db6:	4b11      	ldr	r3, [pc, #68]	; (8005dfc <xTimerGenericCommand+0x98>)
 8005db8:	6818      	ldr	r0, [r3, #0]
 8005dba:	f107 0110 	add.w	r1, r7, #16
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dc2:	f7fe f869 	bl	8003e98 <xQueueGenericSend>
 8005dc6:	6278      	str	r0, [r7, #36]	; 0x24
 8005dc8:	e012      	b.n	8005df0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005dca:	4b0c      	ldr	r3, [pc, #48]	; (8005dfc <xTimerGenericCommand+0x98>)
 8005dcc:	6818      	ldr	r0, [r3, #0]
 8005dce:	f107 0110 	add.w	r1, r7, #16
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f7fe f85f 	bl	8003e98 <xQueueGenericSend>
 8005dda:	6278      	str	r0, [r7, #36]	; 0x24
 8005ddc:	e008      	b.n	8005df0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005dde:	4b07      	ldr	r3, [pc, #28]	; (8005dfc <xTimerGenericCommand+0x98>)
 8005de0:	6818      	ldr	r0, [r3, #0]
 8005de2:	f107 0110 	add.w	r1, r7, #16
 8005de6:	2300      	movs	r3, #0
 8005de8:	683a      	ldr	r2, [r7, #0]
 8005dea:	f7fe f953 	bl	8004094 <xQueueGenericSendFromISR>
 8005dee:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3728      	adds	r7, #40	; 0x28
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	20000dcc 	.word	0x20000dcc

08005e00 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b088      	sub	sp, #32
 8005e04:	af02      	add	r7, sp, #8
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e0a:	4b1c      	ldr	r3, [pc, #112]	; (8005e7c <prvProcessExpiredTimer+0x7c>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	3304      	adds	r3, #4
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7fd fe69 	bl	8003af0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d122      	bne.n	8005e6c <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	699a      	ldr	r2, [r3, #24]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	18d1      	adds	r1, r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	683a      	ldr	r2, [r7, #0]
 8005e32:	6978      	ldr	r0, [r7, #20]
 8005e34:	f000 f8c8 	bl	8005fc8 <prvInsertTimerInActiveList>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d016      	beq.n	8005e6c <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e3e:	2300      	movs	r3, #0
 8005e40:	9300      	str	r3, [sp, #0]
 8005e42:	2300      	movs	r3, #0
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	2100      	movs	r1, #0
 8005e48:	6978      	ldr	r0, [r7, #20]
 8005e4a:	f7ff ff8b 	bl	8005d64 <xTimerGenericCommand>
 8005e4e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10a      	bne.n	8005e6c <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8005e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5a:	f383 8811 	msr	BASEPRI, r3
 8005e5e:	f3bf 8f6f 	isb	sy
 8005e62:	f3bf 8f4f 	dsb	sy
 8005e66:	60fb      	str	r3, [r7, #12]
}
 8005e68:	bf00      	nop
 8005e6a:	e7fe      	b.n	8005e6a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	6978      	ldr	r0, [r7, #20]
 8005e72:	4798      	blx	r3
}
 8005e74:	bf00      	nop
 8005e76:	3718      	adds	r7, #24
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	20000dc4 	.word	0x20000dc4

08005e80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e88:	f107 0308 	add.w	r3, r7, #8
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f000 f857 	bl	8005f40 <prvGetNextExpireTime>
 8005e92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	4619      	mov	r1, r3
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f000 f803 	bl	8005ea4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005e9e:	f000 f8d5 	bl	800604c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ea2:	e7f1      	b.n	8005e88 <prvTimerTask+0x8>

08005ea4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005eae:	f7ff f8a7 	bl	8005000 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005eb2:	f107 0308 	add.w	r3, r7, #8
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f000 f866 	bl	8005f88 <prvSampleTimeNow>
 8005ebc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d130      	bne.n	8005f26 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10a      	bne.n	8005ee0 <prvProcessTimerOrBlockTask+0x3c>
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d806      	bhi.n	8005ee0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005ed2:	f7ff f8a3 	bl	800501c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005ed6:	68f9      	ldr	r1, [r7, #12]
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f7ff ff91 	bl	8005e00 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005ede:	e024      	b.n	8005f2a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d008      	beq.n	8005ef8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005ee6:	4b13      	ldr	r3, [pc, #76]	; (8005f34 <prvProcessTimerOrBlockTask+0x90>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	bf0c      	ite	eq
 8005ef0:	2301      	moveq	r3, #1
 8005ef2:	2300      	movne	r3, #0
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005ef8:	4b0f      	ldr	r3, [pc, #60]	; (8005f38 <prvProcessTimerOrBlockTask+0x94>)
 8005efa:	6818      	ldr	r0, [r3, #0]
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	4619      	mov	r1, r3
 8005f06:	f7fe fdf3 	bl	8004af0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005f0a:	f7ff f887 	bl	800501c <xTaskResumeAll>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10a      	bne.n	8005f2a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005f14:	4b09      	ldr	r3, [pc, #36]	; (8005f3c <prvProcessTimerOrBlockTask+0x98>)
 8005f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f1a:	601a      	str	r2, [r3, #0]
 8005f1c:	f3bf 8f4f 	dsb	sy
 8005f20:	f3bf 8f6f 	isb	sy
}
 8005f24:	e001      	b.n	8005f2a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005f26:	f7ff f879 	bl	800501c <xTaskResumeAll>
}
 8005f2a:	bf00      	nop
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	20000dc8 	.word	0x20000dc8
 8005f38:	20000dcc 	.word	0x20000dcc
 8005f3c:	e000ed04 	.word	0xe000ed04

08005f40 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f48:	4b0e      	ldr	r3, [pc, #56]	; (8005f84 <prvGetNextExpireTime+0x44>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	bf0c      	ite	eq
 8005f52:	2301      	moveq	r3, #1
 8005f54:	2300      	movne	r3, #0
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	461a      	mov	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d105      	bne.n	8005f72 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f66:	4b07      	ldr	r3, [pc, #28]	; (8005f84 <prvGetNextExpireTime+0x44>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	e001      	b.n	8005f76 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005f72:	2300      	movs	r3, #0
 8005f74:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005f76:	68fb      	ldr	r3, [r7, #12]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3714      	adds	r7, #20
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bc80      	pop	{r7}
 8005f80:	4770      	bx	lr
 8005f82:	bf00      	nop
 8005f84:	20000dc4 	.word	0x20000dc4

08005f88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005f90:	f7ff f8e2 	bl	8005158 <xTaskGetTickCount>
 8005f94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005f96:	4b0b      	ldr	r3, [pc, #44]	; (8005fc4 <prvSampleTimeNow+0x3c>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d205      	bcs.n	8005fac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005fa0:	f000 f908 	bl	80061b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	601a      	str	r2, [r3, #0]
 8005faa:	e002      	b.n	8005fb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005fb2:	4a04      	ldr	r2, [pc, #16]	; (8005fc4 <prvSampleTimeNow+0x3c>)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	20000dd4 	.word	0x20000dd4

08005fc8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b086      	sub	sp, #24
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
 8005fd4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d812      	bhi.n	8006014 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	1ad2      	subs	r2, r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	699b      	ldr	r3, [r3, #24]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d302      	bcc.n	8006002 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	617b      	str	r3, [r7, #20]
 8006000:	e01b      	b.n	800603a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006002:	4b10      	ldr	r3, [pc, #64]	; (8006044 <prvInsertTimerInActiveList+0x7c>)
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	3304      	adds	r3, #4
 800600a:	4619      	mov	r1, r3
 800600c:	4610      	mov	r0, r2
 800600e:	f7fd fd37 	bl	8003a80 <vListInsert>
 8006012:	e012      	b.n	800603a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006014:	687a      	ldr	r2, [r7, #4]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	429a      	cmp	r2, r3
 800601a:	d206      	bcs.n	800602a <prvInsertTimerInActiveList+0x62>
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	429a      	cmp	r2, r3
 8006022:	d302      	bcc.n	800602a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006024:	2301      	movs	r3, #1
 8006026:	617b      	str	r3, [r7, #20]
 8006028:	e007      	b.n	800603a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800602a:	4b07      	ldr	r3, [pc, #28]	; (8006048 <prvInsertTimerInActiveList+0x80>)
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	3304      	adds	r3, #4
 8006032:	4619      	mov	r1, r3
 8006034:	4610      	mov	r0, r2
 8006036:	f7fd fd23 	bl	8003a80 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800603a:	697b      	ldr	r3, [r7, #20]
}
 800603c:	4618      	mov	r0, r3
 800603e:	3718      	adds	r7, #24
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	20000dc8 	.word	0x20000dc8
 8006048:	20000dc4 	.word	0x20000dc4

0800604c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b08e      	sub	sp, #56	; 0x38
 8006050:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006052:	e09d      	b.n	8006190 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	da18      	bge.n	800608c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800605a:	1d3b      	adds	r3, r7, #4
 800605c:	3304      	adds	r3, #4
 800605e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006062:	2b00      	cmp	r3, #0
 8006064:	d10a      	bne.n	800607c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606a:	f383 8811 	msr	BASEPRI, r3
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f3bf 8f4f 	dsb	sy
 8006076:	61fb      	str	r3, [r7, #28]
}
 8006078:	bf00      	nop
 800607a:	e7fe      	b.n	800607a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800607c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006082:	6850      	ldr	r0, [r2, #4]
 8006084:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006086:	6892      	ldr	r2, [r2, #8]
 8006088:	4611      	mov	r1, r2
 800608a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	db7d      	blt.n	800618e <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006098:	695b      	ldr	r3, [r3, #20]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d004      	beq.n	80060a8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800609e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a0:	3304      	adds	r3, #4
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7fd fd24 	bl	8003af0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80060a8:	463b      	mov	r3, r7
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7ff ff6c 	bl	8005f88 <prvSampleTimeNow>
 80060b0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2b09      	cmp	r3, #9
 80060b6:	d86b      	bhi.n	8006190 <prvProcessReceivedCommands+0x144>
 80060b8:	a201      	add	r2, pc, #4	; (adr r2, 80060c0 <prvProcessReceivedCommands+0x74>)
 80060ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060be:	bf00      	nop
 80060c0:	080060e9 	.word	0x080060e9
 80060c4:	080060e9 	.word	0x080060e9
 80060c8:	080060e9 	.word	0x080060e9
 80060cc:	08006191 	.word	0x08006191
 80060d0:	08006145 	.word	0x08006145
 80060d4:	0800617d 	.word	0x0800617d
 80060d8:	080060e9 	.word	0x080060e9
 80060dc:	080060e9 	.word	0x080060e9
 80060e0:	08006191 	.word	0x08006191
 80060e4:	08006145 	.word	0x08006145
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80060e8:	68ba      	ldr	r2, [r7, #8]
 80060ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	18d1      	adds	r1, r2, r3
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80060f6:	f7ff ff67 	bl	8005fc8 <prvInsertTimerInActiveList>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d047      	beq.n	8006190 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006104:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006106:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610a:	69db      	ldr	r3, [r3, #28]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d13f      	bne.n	8006190 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006110:	68ba      	ldr	r2, [r7, #8]
 8006112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	441a      	add	r2, r3
 8006118:	2300      	movs	r3, #0
 800611a:	9300      	str	r3, [sp, #0]
 800611c:	2300      	movs	r3, #0
 800611e:	2100      	movs	r1, #0
 8006120:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006122:	f7ff fe1f 	bl	8005d64 <xTimerGenericCommand>
 8006126:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006128:	6a3b      	ldr	r3, [r7, #32]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d130      	bne.n	8006190 <prvProcessReceivedCommands+0x144>
	__asm volatile
 800612e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006132:	f383 8811 	msr	BASEPRI, r3
 8006136:	f3bf 8f6f 	isb	sy
 800613a:	f3bf 8f4f 	dsb	sy
 800613e:	61bb      	str	r3, [r7, #24]
}
 8006140:	bf00      	nop
 8006142:	e7fe      	b.n	8006142 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006148:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800614a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d10a      	bne.n	8006168 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	617b      	str	r3, [r7, #20]
}
 8006164:	bf00      	nop
 8006166:	e7fe      	b.n	8006166 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616a:	699a      	ldr	r2, [r3, #24]
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	18d1      	adds	r1, r2, r3
 8006170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006174:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006176:	f7ff ff27 	bl	8005fc8 <prvInsertTimerInActiveList>
					break;
 800617a:	e009      	b.n	8006190 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800617c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006182:	2b00      	cmp	r3, #0
 8006184:	d104      	bne.n	8006190 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8006186:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006188:	f000 fb8c 	bl	80068a4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800618c:	e000      	b.n	8006190 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800618e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006190:	4b07      	ldr	r3, [pc, #28]	; (80061b0 <prvProcessReceivedCommands+0x164>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	1d39      	adds	r1, r7, #4
 8006196:	2200      	movs	r2, #0
 8006198:	4618      	mov	r0, r3
 800619a:	f7fe f8a1 	bl	80042e0 <xQueueReceive>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f47f af57 	bne.w	8006054 <prvProcessReceivedCommands+0x8>
	}
}
 80061a6:	bf00      	nop
 80061a8:	bf00      	nop
 80061aa:	3730      	adds	r7, #48	; 0x30
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	20000dcc 	.word	0x20000dcc

080061b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b088      	sub	sp, #32
 80061b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80061ba:	e045      	b.n	8006248 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061bc:	4b2c      	ldr	r3, [pc, #176]	; (8006270 <prvSwitchTimerLists+0xbc>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	68db      	ldr	r3, [r3, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061c6:	4b2a      	ldr	r3, [pc, #168]	; (8006270 <prvSwitchTimerLists+0xbc>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	3304      	adds	r3, #4
 80061d4:	4618      	mov	r0, r3
 80061d6:	f7fd fc8b 	bl	8003af0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	69db      	ldr	r3, [r3, #28]
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d12e      	bne.n	8006248 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	4413      	add	r3, r2
 80061f2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d90e      	bls.n	800621a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	68fa      	ldr	r2, [r7, #12]
 8006206:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006208:	4b19      	ldr	r3, [pc, #100]	; (8006270 <prvSwitchTimerLists+0xbc>)
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	3304      	adds	r3, #4
 8006210:	4619      	mov	r1, r3
 8006212:	4610      	mov	r0, r2
 8006214:	f7fd fc34 	bl	8003a80 <vListInsert>
 8006218:	e016      	b.n	8006248 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800621a:	2300      	movs	r3, #0
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	2300      	movs	r3, #0
 8006220:	693a      	ldr	r2, [r7, #16]
 8006222:	2100      	movs	r1, #0
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f7ff fd9d 	bl	8005d64 <xTimerGenericCommand>
 800622a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10a      	bne.n	8006248 <prvSwitchTimerLists+0x94>
	__asm volatile
 8006232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006236:	f383 8811 	msr	BASEPRI, r3
 800623a:	f3bf 8f6f 	isb	sy
 800623e:	f3bf 8f4f 	dsb	sy
 8006242:	603b      	str	r3, [r7, #0]
}
 8006244:	bf00      	nop
 8006246:	e7fe      	b.n	8006246 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006248:	4b09      	ldr	r3, [pc, #36]	; (8006270 <prvSwitchTimerLists+0xbc>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1b4      	bne.n	80061bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006252:	4b07      	ldr	r3, [pc, #28]	; (8006270 <prvSwitchTimerLists+0xbc>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006258:	4b06      	ldr	r3, [pc, #24]	; (8006274 <prvSwitchTimerLists+0xc0>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a04      	ldr	r2, [pc, #16]	; (8006270 <prvSwitchTimerLists+0xbc>)
 800625e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006260:	4a04      	ldr	r2, [pc, #16]	; (8006274 <prvSwitchTimerLists+0xc0>)
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	6013      	str	r3, [r2, #0]
}
 8006266:	bf00      	nop
 8006268:	3718      	adds	r7, #24
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	20000dc4 	.word	0x20000dc4
 8006274:	20000dc8 	.word	0x20000dc8

08006278 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800627e:	f000 f94d 	bl	800651c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006282:	4b15      	ldr	r3, [pc, #84]	; (80062d8 <prvCheckForValidListAndQueue+0x60>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d120      	bne.n	80062cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800628a:	4814      	ldr	r0, [pc, #80]	; (80062dc <prvCheckForValidListAndQueue+0x64>)
 800628c:	f7fd fbaa 	bl	80039e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006290:	4813      	ldr	r0, [pc, #76]	; (80062e0 <prvCheckForValidListAndQueue+0x68>)
 8006292:	f7fd fba7 	bl	80039e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006296:	4b13      	ldr	r3, [pc, #76]	; (80062e4 <prvCheckForValidListAndQueue+0x6c>)
 8006298:	4a10      	ldr	r2, [pc, #64]	; (80062dc <prvCheckForValidListAndQueue+0x64>)
 800629a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800629c:	4b12      	ldr	r3, [pc, #72]	; (80062e8 <prvCheckForValidListAndQueue+0x70>)
 800629e:	4a10      	ldr	r2, [pc, #64]	; (80062e0 <prvCheckForValidListAndQueue+0x68>)
 80062a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80062a2:	2300      	movs	r3, #0
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	4b11      	ldr	r3, [pc, #68]	; (80062ec <prvCheckForValidListAndQueue+0x74>)
 80062a8:	4a11      	ldr	r2, [pc, #68]	; (80062f0 <prvCheckForValidListAndQueue+0x78>)
 80062aa:	2110      	movs	r1, #16
 80062ac:	200a      	movs	r0, #10
 80062ae:	f7fd fcb1 	bl	8003c14 <xQueueGenericCreateStatic>
 80062b2:	4603      	mov	r3, r0
 80062b4:	4a08      	ldr	r2, [pc, #32]	; (80062d8 <prvCheckForValidListAndQueue+0x60>)
 80062b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80062b8:	4b07      	ldr	r3, [pc, #28]	; (80062d8 <prvCheckForValidListAndQueue+0x60>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d005      	beq.n	80062cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80062c0:	4b05      	ldr	r3, [pc, #20]	; (80062d8 <prvCheckForValidListAndQueue+0x60>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	490b      	ldr	r1, [pc, #44]	; (80062f4 <prvCheckForValidListAndQueue+0x7c>)
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7fe fbc0 	bl	8004a4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80062cc:	f000 f956 	bl	800657c <vPortExitCritical>
}
 80062d0:	bf00      	nop
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	20000dcc 	.word	0x20000dcc
 80062dc:	20000d9c 	.word	0x20000d9c
 80062e0:	20000db0 	.word	0x20000db0
 80062e4:	20000dc4 	.word	0x20000dc4
 80062e8:	20000dc8 	.word	0x20000dc8
 80062ec:	20000e78 	.word	0x20000e78
 80062f0:	20000dd8 	.word	0x20000dd8
 80062f4:	08008b50 	.word	0x08008b50

080062f8 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b086      	sub	sp, #24
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10a      	bne.n	8006320 <pvTimerGetTimerID+0x28>
	__asm volatile
 800630a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630e:	f383 8811 	msr	BASEPRI, r3
 8006312:	f3bf 8f6f 	isb	sy
 8006316:	f3bf 8f4f 	dsb	sy
 800631a:	60fb      	str	r3, [r7, #12]
}
 800631c:	bf00      	nop
 800631e:	e7fe      	b.n	800631e <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8006320:	f000 f8fc 	bl	800651c <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	6a1b      	ldr	r3, [r3, #32]
 8006328:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800632a:	f000 f927 	bl	800657c <vPortExitCritical>

	return pvReturn;
 800632e:	693b      	ldr	r3, [r7, #16]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3718      	adds	r7, #24
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	3b04      	subs	r3, #4
 8006348:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006350:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	3b04      	subs	r3, #4
 8006356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	f023 0201 	bic.w	r2, r3, #1
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	3b04      	subs	r3, #4
 8006366:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006368:	4a08      	ldr	r2, [pc, #32]	; (800638c <pxPortInitialiseStack+0x54>)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	3b14      	subs	r3, #20
 8006372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	3b20      	subs	r3, #32
 800637e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006380:	68fb      	ldr	r3, [r7, #12]
}
 8006382:	4618      	mov	r0, r3
 8006384:	3714      	adds	r7, #20
 8006386:	46bd      	mov	sp, r7
 8006388:	bc80      	pop	{r7}
 800638a:	4770      	bx	lr
 800638c:	08006391 	.word	0x08006391

08006390 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006396:	2300      	movs	r3, #0
 8006398:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800639a:	4b12      	ldr	r3, [pc, #72]	; (80063e4 <prvTaskExitError+0x54>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a2:	d00a      	beq.n	80063ba <prvTaskExitError+0x2a>
	__asm volatile
 80063a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a8:	f383 8811 	msr	BASEPRI, r3
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	60fb      	str	r3, [r7, #12]
}
 80063b6:	bf00      	nop
 80063b8:	e7fe      	b.n	80063b8 <prvTaskExitError+0x28>
	__asm volatile
 80063ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063be:	f383 8811 	msr	BASEPRI, r3
 80063c2:	f3bf 8f6f 	isb	sy
 80063c6:	f3bf 8f4f 	dsb	sy
 80063ca:	60bb      	str	r3, [r7, #8]
}
 80063cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80063ce:	bf00      	nop
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d0fc      	beq.n	80063d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80063d6:	bf00      	nop
 80063d8:	bf00      	nop
 80063da:	3714      	adds	r7, #20
 80063dc:	46bd      	mov	sp, r7
 80063de:	bc80      	pop	{r7}
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	2000009c 	.word	0x2000009c
	...

080063f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80063f0:	4b07      	ldr	r3, [pc, #28]	; (8006410 <pxCurrentTCBConst2>)
 80063f2:	6819      	ldr	r1, [r3, #0]
 80063f4:	6808      	ldr	r0, [r1, #0]
 80063f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80063fa:	f380 8809 	msr	PSP, r0
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f04f 0000 	mov.w	r0, #0
 8006406:	f380 8811 	msr	BASEPRI, r0
 800640a:	f04e 0e0d 	orr.w	lr, lr, #13
 800640e:	4770      	bx	lr

08006410 <pxCurrentTCBConst2>:
 8006410:	2000089c 	.word	0x2000089c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006414:	bf00      	nop
 8006416:	bf00      	nop

08006418 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006418:	4806      	ldr	r0, [pc, #24]	; (8006434 <prvPortStartFirstTask+0x1c>)
 800641a:	6800      	ldr	r0, [r0, #0]
 800641c:	6800      	ldr	r0, [r0, #0]
 800641e:	f380 8808 	msr	MSP, r0
 8006422:	b662      	cpsie	i
 8006424:	b661      	cpsie	f
 8006426:	f3bf 8f4f 	dsb	sy
 800642a:	f3bf 8f6f 	isb	sy
 800642e:	df00      	svc	0
 8006430:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006432:	bf00      	nop
 8006434:	e000ed08 	.word	0xe000ed08

08006438 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800643e:	4b32      	ldr	r3, [pc, #200]	; (8006508 <xPortStartScheduler+0xd0>)
 8006440:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	b2db      	uxtb	r3, r3
 8006448:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	22ff      	movs	r2, #255	; 0xff
 800644e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	b2db      	uxtb	r3, r3
 8006456:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006458:	78fb      	ldrb	r3, [r7, #3]
 800645a:	b2db      	uxtb	r3, r3
 800645c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006460:	b2da      	uxtb	r2, r3
 8006462:	4b2a      	ldr	r3, [pc, #168]	; (800650c <xPortStartScheduler+0xd4>)
 8006464:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006466:	4b2a      	ldr	r3, [pc, #168]	; (8006510 <xPortStartScheduler+0xd8>)
 8006468:	2207      	movs	r2, #7
 800646a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800646c:	e009      	b.n	8006482 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800646e:	4b28      	ldr	r3, [pc, #160]	; (8006510 <xPortStartScheduler+0xd8>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	3b01      	subs	r3, #1
 8006474:	4a26      	ldr	r2, [pc, #152]	; (8006510 <xPortStartScheduler+0xd8>)
 8006476:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006478:	78fb      	ldrb	r3, [r7, #3]
 800647a:	b2db      	uxtb	r3, r3
 800647c:	005b      	lsls	r3, r3, #1
 800647e:	b2db      	uxtb	r3, r3
 8006480:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006482:	78fb      	ldrb	r3, [r7, #3]
 8006484:	b2db      	uxtb	r3, r3
 8006486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800648a:	2b80      	cmp	r3, #128	; 0x80
 800648c:	d0ef      	beq.n	800646e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800648e:	4b20      	ldr	r3, [pc, #128]	; (8006510 <xPortStartScheduler+0xd8>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f1c3 0307 	rsb	r3, r3, #7
 8006496:	2b04      	cmp	r3, #4
 8006498:	d00a      	beq.n	80064b0 <xPortStartScheduler+0x78>
	__asm volatile
 800649a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649e:	f383 8811 	msr	BASEPRI, r3
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	60bb      	str	r3, [r7, #8]
}
 80064ac:	bf00      	nop
 80064ae:	e7fe      	b.n	80064ae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80064b0:	4b17      	ldr	r3, [pc, #92]	; (8006510 <xPortStartScheduler+0xd8>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	021b      	lsls	r3, r3, #8
 80064b6:	4a16      	ldr	r2, [pc, #88]	; (8006510 <xPortStartScheduler+0xd8>)
 80064b8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80064ba:	4b15      	ldr	r3, [pc, #84]	; (8006510 <xPortStartScheduler+0xd8>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064c2:	4a13      	ldr	r2, [pc, #76]	; (8006510 <xPortStartScheduler+0xd8>)
 80064c4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	b2da      	uxtb	r2, r3
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80064ce:	4b11      	ldr	r3, [pc, #68]	; (8006514 <xPortStartScheduler+0xdc>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a10      	ldr	r2, [pc, #64]	; (8006514 <xPortStartScheduler+0xdc>)
 80064d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80064d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80064da:	4b0e      	ldr	r3, [pc, #56]	; (8006514 <xPortStartScheduler+0xdc>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a0d      	ldr	r2, [pc, #52]	; (8006514 <xPortStartScheduler+0xdc>)
 80064e0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80064e4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80064e6:	f000 f8b9 	bl	800665c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80064ea:	4b0b      	ldr	r3, [pc, #44]	; (8006518 <xPortStartScheduler+0xe0>)
 80064ec:	2200      	movs	r2, #0
 80064ee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80064f0:	f7ff ff92 	bl	8006418 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80064f4:	f7fe fefc 	bl	80052f0 <vTaskSwitchContext>
	prvTaskExitError();
 80064f8:	f7ff ff4a 	bl	8006390 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	e000e400 	.word	0xe000e400
 800650c:	20000ec8 	.word	0x20000ec8
 8006510:	20000ecc 	.word	0x20000ecc
 8006514:	e000ed20 	.word	0xe000ed20
 8006518:	2000009c 	.word	0x2000009c

0800651c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
	__asm volatile
 8006522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006526:	f383 8811 	msr	BASEPRI, r3
 800652a:	f3bf 8f6f 	isb	sy
 800652e:	f3bf 8f4f 	dsb	sy
 8006532:	607b      	str	r3, [r7, #4]
}
 8006534:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006536:	4b0f      	ldr	r3, [pc, #60]	; (8006574 <vPortEnterCritical+0x58>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	3301      	adds	r3, #1
 800653c:	4a0d      	ldr	r2, [pc, #52]	; (8006574 <vPortEnterCritical+0x58>)
 800653e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006540:	4b0c      	ldr	r3, [pc, #48]	; (8006574 <vPortEnterCritical+0x58>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d10f      	bne.n	8006568 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006548:	4b0b      	ldr	r3, [pc, #44]	; (8006578 <vPortEnterCritical+0x5c>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00a      	beq.n	8006568 <vPortEnterCritical+0x4c>
	__asm volatile
 8006552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006556:	f383 8811 	msr	BASEPRI, r3
 800655a:	f3bf 8f6f 	isb	sy
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	603b      	str	r3, [r7, #0]
}
 8006564:	bf00      	nop
 8006566:	e7fe      	b.n	8006566 <vPortEnterCritical+0x4a>
	}
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	bc80      	pop	{r7}
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	2000009c 	.word	0x2000009c
 8006578:	e000ed04 	.word	0xe000ed04

0800657c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006582:	4b11      	ldr	r3, [pc, #68]	; (80065c8 <vPortExitCritical+0x4c>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d10a      	bne.n	80065a0 <vPortExitCritical+0x24>
	__asm volatile
 800658a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800658e:	f383 8811 	msr	BASEPRI, r3
 8006592:	f3bf 8f6f 	isb	sy
 8006596:	f3bf 8f4f 	dsb	sy
 800659a:	607b      	str	r3, [r7, #4]
}
 800659c:	bf00      	nop
 800659e:	e7fe      	b.n	800659e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80065a0:	4b09      	ldr	r3, [pc, #36]	; (80065c8 <vPortExitCritical+0x4c>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	3b01      	subs	r3, #1
 80065a6:	4a08      	ldr	r2, [pc, #32]	; (80065c8 <vPortExitCritical+0x4c>)
 80065a8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80065aa:	4b07      	ldr	r3, [pc, #28]	; (80065c8 <vPortExitCritical+0x4c>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d105      	bne.n	80065be <vPortExitCritical+0x42>
 80065b2:	2300      	movs	r3, #0
 80065b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	f383 8811 	msr	BASEPRI, r3
}
 80065bc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80065be:	bf00      	nop
 80065c0:	370c      	adds	r7, #12
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bc80      	pop	{r7}
 80065c6:	4770      	bx	lr
 80065c8:	2000009c 	.word	0x2000009c
 80065cc:	00000000 	.word	0x00000000

080065d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80065d0:	f3ef 8009 	mrs	r0, PSP
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	4b0d      	ldr	r3, [pc, #52]	; (8006610 <pxCurrentTCBConst>)
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80065e0:	6010      	str	r0, [r2, #0]
 80065e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80065e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80065ea:	f380 8811 	msr	BASEPRI, r0
 80065ee:	f7fe fe7f 	bl	80052f0 <vTaskSwitchContext>
 80065f2:	f04f 0000 	mov.w	r0, #0
 80065f6:	f380 8811 	msr	BASEPRI, r0
 80065fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80065fe:	6819      	ldr	r1, [r3, #0]
 8006600:	6808      	ldr	r0, [r1, #0]
 8006602:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006606:	f380 8809 	msr	PSP, r0
 800660a:	f3bf 8f6f 	isb	sy
 800660e:	4770      	bx	lr

08006610 <pxCurrentTCBConst>:
 8006610:	2000089c 	.word	0x2000089c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006614:	bf00      	nop
 8006616:	bf00      	nop

08006618 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
	__asm volatile
 800661e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006622:	f383 8811 	msr	BASEPRI, r3
 8006626:	f3bf 8f6f 	isb	sy
 800662a:	f3bf 8f4f 	dsb	sy
 800662e:	607b      	str	r3, [r7, #4]
}
 8006630:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006632:	f7fe fd9f 	bl	8005174 <xTaskIncrementTick>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d003      	beq.n	8006644 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800663c:	4b06      	ldr	r3, [pc, #24]	; (8006658 <SysTick_Handler+0x40>)
 800663e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006642:	601a      	str	r2, [r3, #0]
 8006644:	2300      	movs	r3, #0
 8006646:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	f383 8811 	msr	BASEPRI, r3
}
 800664e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006650:	bf00      	nop
 8006652:	3708      	adds	r7, #8
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}
 8006658:	e000ed04 	.word	0xe000ed04

0800665c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800665c:	b480      	push	{r7}
 800665e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006660:	4b0a      	ldr	r3, [pc, #40]	; (800668c <vPortSetupTimerInterrupt+0x30>)
 8006662:	2200      	movs	r2, #0
 8006664:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006666:	4b0a      	ldr	r3, [pc, #40]	; (8006690 <vPortSetupTimerInterrupt+0x34>)
 8006668:	2200      	movs	r2, #0
 800666a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800666c:	4b09      	ldr	r3, [pc, #36]	; (8006694 <vPortSetupTimerInterrupt+0x38>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a09      	ldr	r2, [pc, #36]	; (8006698 <vPortSetupTimerInterrupt+0x3c>)
 8006672:	fba2 2303 	umull	r2, r3, r2, r3
 8006676:	099b      	lsrs	r3, r3, #6
 8006678:	4a08      	ldr	r2, [pc, #32]	; (800669c <vPortSetupTimerInterrupt+0x40>)
 800667a:	3b01      	subs	r3, #1
 800667c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800667e:	4b03      	ldr	r3, [pc, #12]	; (800668c <vPortSetupTimerInterrupt+0x30>)
 8006680:	2207      	movs	r2, #7
 8006682:	601a      	str	r2, [r3, #0]
}
 8006684:	bf00      	nop
 8006686:	46bd      	mov	sp, r7
 8006688:	bc80      	pop	{r7}
 800668a:	4770      	bx	lr
 800668c:	e000e010 	.word	0xe000e010
 8006690:	e000e018 	.word	0xe000e018
 8006694:	20000000 	.word	0x20000000
 8006698:	10624dd3 	.word	0x10624dd3
 800669c:	e000e014 	.word	0xe000e014

080066a0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80066a6:	f3ef 8305 	mrs	r3, IPSR
 80066aa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2b0f      	cmp	r3, #15
 80066b0:	d914      	bls.n	80066dc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80066b2:	4a16      	ldr	r2, [pc, #88]	; (800670c <vPortValidateInterruptPriority+0x6c>)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	4413      	add	r3, r2
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80066bc:	4b14      	ldr	r3, [pc, #80]	; (8006710 <vPortValidateInterruptPriority+0x70>)
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	7afa      	ldrb	r2, [r7, #11]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d20a      	bcs.n	80066dc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80066c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ca:	f383 8811 	msr	BASEPRI, r3
 80066ce:	f3bf 8f6f 	isb	sy
 80066d2:	f3bf 8f4f 	dsb	sy
 80066d6:	607b      	str	r3, [r7, #4]
}
 80066d8:	bf00      	nop
 80066da:	e7fe      	b.n	80066da <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80066dc:	4b0d      	ldr	r3, [pc, #52]	; (8006714 <vPortValidateInterruptPriority+0x74>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80066e4:	4b0c      	ldr	r3, [pc, #48]	; (8006718 <vPortValidateInterruptPriority+0x78>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d90a      	bls.n	8006702 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80066ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066f0:	f383 8811 	msr	BASEPRI, r3
 80066f4:	f3bf 8f6f 	isb	sy
 80066f8:	f3bf 8f4f 	dsb	sy
 80066fc:	603b      	str	r3, [r7, #0]
}
 80066fe:	bf00      	nop
 8006700:	e7fe      	b.n	8006700 <vPortValidateInterruptPriority+0x60>
	}
 8006702:	bf00      	nop
 8006704:	3714      	adds	r7, #20
 8006706:	46bd      	mov	sp, r7
 8006708:	bc80      	pop	{r7}
 800670a:	4770      	bx	lr
 800670c:	e000e3f0 	.word	0xe000e3f0
 8006710:	20000ec8 	.word	0x20000ec8
 8006714:	e000ed0c 	.word	0xe000ed0c
 8006718:	20000ecc 	.word	0x20000ecc

0800671c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b08a      	sub	sp, #40	; 0x28
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006724:	2300      	movs	r3, #0
 8006726:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006728:	f7fe fc6a 	bl	8005000 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800672c:	4b58      	ldr	r3, [pc, #352]	; (8006890 <pvPortMalloc+0x174>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d101      	bne.n	8006738 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006734:	f000 f910 	bl	8006958 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006738:	4b56      	ldr	r3, [pc, #344]	; (8006894 <pvPortMalloc+0x178>)
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4013      	ands	r3, r2
 8006740:	2b00      	cmp	r3, #0
 8006742:	f040 808e 	bne.w	8006862 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d01d      	beq.n	8006788 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800674c:	2208      	movs	r2, #8
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4413      	add	r3, r2
 8006752:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f003 0307 	and.w	r3, r3, #7
 800675a:	2b00      	cmp	r3, #0
 800675c:	d014      	beq.n	8006788 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f023 0307 	bic.w	r3, r3, #7
 8006764:	3308      	adds	r3, #8
 8006766:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f003 0307 	and.w	r3, r3, #7
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00a      	beq.n	8006788 <pvPortMalloc+0x6c>
	__asm volatile
 8006772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006776:	f383 8811 	msr	BASEPRI, r3
 800677a:	f3bf 8f6f 	isb	sy
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	617b      	str	r3, [r7, #20]
}
 8006784:	bf00      	nop
 8006786:	e7fe      	b.n	8006786 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d069      	beq.n	8006862 <pvPortMalloc+0x146>
 800678e:	4b42      	ldr	r3, [pc, #264]	; (8006898 <pvPortMalloc+0x17c>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	429a      	cmp	r2, r3
 8006796:	d864      	bhi.n	8006862 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006798:	4b40      	ldr	r3, [pc, #256]	; (800689c <pvPortMalloc+0x180>)
 800679a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800679c:	4b3f      	ldr	r3, [pc, #252]	; (800689c <pvPortMalloc+0x180>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067a2:	e004      	b.n	80067ae <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80067a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80067a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d903      	bls.n	80067c0 <pvPortMalloc+0xa4>
 80067b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1f1      	bne.n	80067a4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80067c0:	4b33      	ldr	r3, [pc, #204]	; (8006890 <pvPortMalloc+0x174>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d04b      	beq.n	8006862 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80067ca:	6a3b      	ldr	r3, [r7, #32]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2208      	movs	r2, #8
 80067d0:	4413      	add	r3, r2
 80067d2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80067d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	6a3b      	ldr	r3, [r7, #32]
 80067da:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80067dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067de:	685a      	ldr	r2, [r3, #4]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	1ad2      	subs	r2, r2, r3
 80067e4:	2308      	movs	r3, #8
 80067e6:	005b      	lsls	r3, r3, #1
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d91f      	bls.n	800682c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80067ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4413      	add	r3, r2
 80067f2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	f003 0307 	and.w	r3, r3, #7
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00a      	beq.n	8006814 <pvPortMalloc+0xf8>
	__asm volatile
 80067fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006802:	f383 8811 	msr	BASEPRI, r3
 8006806:	f3bf 8f6f 	isb	sy
 800680a:	f3bf 8f4f 	dsb	sy
 800680e:	613b      	str	r3, [r7, #16]
}
 8006810:	bf00      	nop
 8006812:	e7fe      	b.n	8006812 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006816:	685a      	ldr	r2, [r3, #4]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	1ad2      	subs	r2, r2, r3
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006826:	69b8      	ldr	r0, [r7, #24]
 8006828:	f000 f8f8 	bl	8006a1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800682c:	4b1a      	ldr	r3, [pc, #104]	; (8006898 <pvPortMalloc+0x17c>)
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	4a18      	ldr	r2, [pc, #96]	; (8006898 <pvPortMalloc+0x17c>)
 8006838:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800683a:	4b17      	ldr	r3, [pc, #92]	; (8006898 <pvPortMalloc+0x17c>)
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	4b18      	ldr	r3, [pc, #96]	; (80068a0 <pvPortMalloc+0x184>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	429a      	cmp	r2, r3
 8006844:	d203      	bcs.n	800684e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006846:	4b14      	ldr	r3, [pc, #80]	; (8006898 <pvPortMalloc+0x17c>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a15      	ldr	r2, [pc, #84]	; (80068a0 <pvPortMalloc+0x184>)
 800684c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800684e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006850:	685a      	ldr	r2, [r3, #4]
 8006852:	4b10      	ldr	r3, [pc, #64]	; (8006894 <pvPortMalloc+0x178>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	431a      	orrs	r2, r3
 8006858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800685c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685e:	2200      	movs	r2, #0
 8006860:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006862:	f7fe fbdb 	bl	800501c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	f003 0307 	and.w	r3, r3, #7
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00a      	beq.n	8006886 <pvPortMalloc+0x16a>
	__asm volatile
 8006870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006874:	f383 8811 	msr	BASEPRI, r3
 8006878:	f3bf 8f6f 	isb	sy
 800687c:	f3bf 8f4f 	dsb	sy
 8006880:	60fb      	str	r3, [r7, #12]
}
 8006882:	bf00      	nop
 8006884:	e7fe      	b.n	8006884 <pvPortMalloc+0x168>
	return pvReturn;
 8006886:	69fb      	ldr	r3, [r7, #28]
}
 8006888:	4618      	mov	r0, r3
 800688a:	3728      	adds	r7, #40	; 0x28
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	200022d8 	.word	0x200022d8
 8006894:	200022e4 	.word	0x200022e4
 8006898:	200022dc 	.word	0x200022dc
 800689c:	200022d0 	.word	0x200022d0
 80068a0:	200022e0 	.word	0x200022e0

080068a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b086      	sub	sp, #24
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d048      	beq.n	8006948 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80068b6:	2308      	movs	r3, #8
 80068b8:	425b      	negs	r3, r3
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	4413      	add	r3, r2
 80068be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	685a      	ldr	r2, [r3, #4]
 80068c8:	4b21      	ldr	r3, [pc, #132]	; (8006950 <vPortFree+0xac>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4013      	ands	r3, r2
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d10a      	bne.n	80068e8 <vPortFree+0x44>
	__asm volatile
 80068d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d6:	f383 8811 	msr	BASEPRI, r3
 80068da:	f3bf 8f6f 	isb	sy
 80068de:	f3bf 8f4f 	dsb	sy
 80068e2:	60fb      	str	r3, [r7, #12]
}
 80068e4:	bf00      	nop
 80068e6:	e7fe      	b.n	80068e6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00a      	beq.n	8006906 <vPortFree+0x62>
	__asm volatile
 80068f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f4:	f383 8811 	msr	BASEPRI, r3
 80068f8:	f3bf 8f6f 	isb	sy
 80068fc:	f3bf 8f4f 	dsb	sy
 8006900:	60bb      	str	r3, [r7, #8]
}
 8006902:	bf00      	nop
 8006904:	e7fe      	b.n	8006904 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	685a      	ldr	r2, [r3, #4]
 800690a:	4b11      	ldr	r3, [pc, #68]	; (8006950 <vPortFree+0xac>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4013      	ands	r3, r2
 8006910:	2b00      	cmp	r3, #0
 8006912:	d019      	beq.n	8006948 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d115      	bne.n	8006948 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	685a      	ldr	r2, [r3, #4]
 8006920:	4b0b      	ldr	r3, [pc, #44]	; (8006950 <vPortFree+0xac>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	43db      	mvns	r3, r3
 8006926:	401a      	ands	r2, r3
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800692c:	f7fe fb68 	bl	8005000 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	4b07      	ldr	r3, [pc, #28]	; (8006954 <vPortFree+0xb0>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4413      	add	r3, r2
 800693a:	4a06      	ldr	r2, [pc, #24]	; (8006954 <vPortFree+0xb0>)
 800693c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800693e:	6938      	ldr	r0, [r7, #16]
 8006940:	f000 f86c 	bl	8006a1c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006944:	f7fe fb6a 	bl	800501c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006948:	bf00      	nop
 800694a:	3718      	adds	r7, #24
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	200022e4 	.word	0x200022e4
 8006954:	200022dc 	.word	0x200022dc

08006958 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800695e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006962:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006964:	4b27      	ldr	r3, [pc, #156]	; (8006a04 <prvHeapInit+0xac>)
 8006966:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f003 0307 	and.w	r3, r3, #7
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00c      	beq.n	800698c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	3307      	adds	r3, #7
 8006976:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f023 0307 	bic.w	r3, r3, #7
 800697e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006980:	68ba      	ldr	r2, [r7, #8]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	4a1f      	ldr	r2, [pc, #124]	; (8006a04 <prvHeapInit+0xac>)
 8006988:	4413      	add	r3, r2
 800698a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006990:	4a1d      	ldr	r2, [pc, #116]	; (8006a08 <prvHeapInit+0xb0>)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006996:	4b1c      	ldr	r3, [pc, #112]	; (8006a08 <prvHeapInit+0xb0>)
 8006998:	2200      	movs	r2, #0
 800699a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	68ba      	ldr	r2, [r7, #8]
 80069a0:	4413      	add	r3, r2
 80069a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80069a4:	2208      	movs	r2, #8
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	1a9b      	subs	r3, r3, r2
 80069aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f023 0307 	bic.w	r3, r3, #7
 80069b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	4a15      	ldr	r2, [pc, #84]	; (8006a0c <prvHeapInit+0xb4>)
 80069b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80069ba:	4b14      	ldr	r3, [pc, #80]	; (8006a0c <prvHeapInit+0xb4>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2200      	movs	r2, #0
 80069c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80069c2:	4b12      	ldr	r3, [pc, #72]	; (8006a0c <prvHeapInit+0xb4>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2200      	movs	r2, #0
 80069c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	1ad2      	subs	r2, r2, r3
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80069d8:	4b0c      	ldr	r3, [pc, #48]	; (8006a0c <prvHeapInit+0xb4>)
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	4a0a      	ldr	r2, [pc, #40]	; (8006a10 <prvHeapInit+0xb8>)
 80069e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	4a09      	ldr	r2, [pc, #36]	; (8006a14 <prvHeapInit+0xbc>)
 80069ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80069f0:	4b09      	ldr	r3, [pc, #36]	; (8006a18 <prvHeapInit+0xc0>)
 80069f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80069f6:	601a      	str	r2, [r3, #0]
}
 80069f8:	bf00      	nop
 80069fa:	3714      	adds	r7, #20
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bc80      	pop	{r7}
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	20000ed0 	.word	0x20000ed0
 8006a08:	200022d0 	.word	0x200022d0
 8006a0c:	200022d8 	.word	0x200022d8
 8006a10:	200022e0 	.word	0x200022e0
 8006a14:	200022dc 	.word	0x200022dc
 8006a18:	200022e4 	.word	0x200022e4

08006a1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a24:	4b27      	ldr	r3, [pc, #156]	; (8006ac4 <prvInsertBlockIntoFreeList+0xa8>)
 8006a26:	60fb      	str	r3, [r7, #12]
 8006a28:	e002      	b.n	8006a30 <prvInsertBlockIntoFreeList+0x14>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	60fb      	str	r3, [r7, #12]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d8f7      	bhi.n	8006a2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	4413      	add	r3, r2
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d108      	bne.n	8006a5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	685a      	ldr	r2, [r3, #4]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	441a      	add	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	68ba      	ldr	r2, [r7, #8]
 8006a68:	441a      	add	r2, r3
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d118      	bne.n	8006aa4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	4b14      	ldr	r3, [pc, #80]	; (8006ac8 <prvInsertBlockIntoFreeList+0xac>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d00d      	beq.n	8006a9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	685a      	ldr	r2, [r3, #4]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	441a      	add	r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	601a      	str	r2, [r3, #0]
 8006a98:	e008      	b.n	8006aac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a9a:	4b0b      	ldr	r3, [pc, #44]	; (8006ac8 <prvInsertBlockIntoFreeList+0xac>)
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	601a      	str	r2, [r3, #0]
 8006aa2:	e003      	b.n	8006aac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681a      	ldr	r2, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006aac:	68fa      	ldr	r2, [r7, #12]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d002      	beq.n	8006aba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006aba:	bf00      	nop
 8006abc:	3714      	adds	r7, #20
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bc80      	pop	{r7}
 8006ac2:	4770      	bx	lr
 8006ac4:	200022d0 	.word	0x200022d0
 8006ac8:	200022d8 	.word	0x200022d8

08006acc <slave_crc16>:
    0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
    0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40};

static void slave_crc16(modbus_slave *slave, uint8_t *buffer)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
    slave->crc_hi = 0xFF;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	22ff      	movs	r2, #255	; 0xff
 8006ada:	719a      	strb	r2, [r3, #6]
    slave->crc_lo = 0xFF;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	22ff      	movs	r2, #255	; 0xff
 8006ae0:	71da      	strb	r2, [r3, #7]
    while (slave->buff_len--)
 8006ae2:	e01c      	b.n	8006b1e <slave_crc16+0x52>
    {
        slave->buff_index = slave->crc_hi ^ *buffer++;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	799a      	ldrb	r2, [r3, #6]
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	1c59      	adds	r1, r3, #1
 8006aec:	6039      	str	r1, [r7, #0]
 8006aee:	781b      	ldrb	r3, [r3, #0]
 8006af0:	4053      	eors	r3, r2
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	815a      	strh	r2, [r3, #10]
        slave->crc_hi = slave->crc_lo ^ crc_hi[slave->buff_index];
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	79da      	ldrb	r2, [r3, #7]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	895b      	ldrh	r3, [r3, #10]
 8006b02:	4619      	mov	r1, r3
 8006b04:	4b0d      	ldr	r3, [pc, #52]	; (8006b3c <slave_crc16+0x70>)
 8006b06:	5c5b      	ldrb	r3, [r3, r1]
 8006b08:	4053      	eors	r3, r2
 8006b0a:	b2da      	uxtb	r2, r3
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	719a      	strb	r2, [r3, #6]
        slave->crc_lo = crc_lo[slave->buff_index];
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	895b      	ldrh	r3, [r3, #10]
 8006b14:	461a      	mov	r2, r3
 8006b16:	4b0a      	ldr	r3, [pc, #40]	; (8006b40 <slave_crc16+0x74>)
 8006b18:	5c9a      	ldrb	r2, [r3, r2]
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	71da      	strb	r2, [r3, #7]
    while (slave->buff_len--)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	891b      	ldrh	r3, [r3, #8]
 8006b22:	1e5a      	subs	r2, r3, #1
 8006b24:	b291      	uxth	r1, r2
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	8111      	strh	r1, [r2, #8]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1da      	bne.n	8006ae4 <slave_crc16+0x18>
    }
}
 8006b2e:	bf00      	nop
 8006b30:	bf00      	nop
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bc80      	pop	{r7}
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	08008c00 	.word	0x08008c00
 8006b40:	08008d00 	.word	0x08008d00

08006b44 <slave_validate_cmd>:

static osStatus_t slave_validate_cmd(modbus_slave *slave)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
    if (slave->rx_len < 8 || slave->rx_buf[0] != slave->slave_id)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 8006b52:	2b07      	cmp	r3, #7
 8006b54:	d905      	bls.n	8006b62 <slave_validate_cmd+0x1e>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	7b1a      	ldrb	r2, [r3, #12]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	791b      	ldrb	r3, [r3, #4]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d002      	beq.n	8006b68 <slave_validate_cmd+0x24>
    {
        return osError;
 8006b62:	f04f 33ff 	mov.w	r3, #4294967295
 8006b66:	e026      	b.n	8006bb6 <slave_validate_cmd+0x72>
    }
    slave->buff_len = slave->rx_len - 2;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 8006b6e:	3b02      	subs	r3, #2
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	811a      	strh	r2, [r3, #8]
    slave_crc16(slave, slave->rx_buf);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	330c      	adds	r3, #12
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f7ff ffa5 	bl	8006acc <slave_crc16>
    if ((slave->crc_hi != slave->rx_buf[slave->rx_len - 2]) || (slave->crc_lo != slave->rx_buf[slave->rx_len - 1]))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	799a      	ldrb	r2, [r3, #6]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 8006b8c:	3b02      	subs	r3, #2
 8006b8e:	6879      	ldr	r1, [r7, #4]
 8006b90:	440b      	add	r3, r1
 8006b92:	7b1b      	ldrb	r3, [r3, #12]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d10a      	bne.n	8006bae <slave_validate_cmd+0x6a>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	79da      	ldrb	r2, [r3, #7]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	6879      	ldr	r1, [r7, #4]
 8006ba6:	440b      	add	r3, r1
 8006ba8:	7b1b      	ldrb	r3, [r3, #12]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d002      	beq.n	8006bb4 <slave_validate_cmd+0x70>
    {
        return osError;
 8006bae:	f04f 33ff 	mov.w	r3, #4294967295
 8006bb2:	e000      	b.n	8006bb6 <slave_validate_cmd+0x72>
    }
    return osOK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3708      	adds	r7, #8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <slave_handle_read_discs>:

static void slave_handle_read_discs(modbus_slave *slave)
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	b087      	sub	sp, #28
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	7b9b      	ldrb	r3, [r3, #14]
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	021b      	lsls	r3, r3, #8
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	7bdb      	ldrb	r3, [r3, #15]
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	4413      	add	r3, r2
 8006bd8:	827b      	strh	r3, [r7, #18]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	7c1b      	ldrb	r3, [r3, #16]
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	021b      	lsls	r3, r3, #8
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	7c5b      	ldrb	r3, [r3, #17]
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	4413      	add	r3, r2
 8006bec:	823b      	strh	r3, [r7, #16]

    slave->tx_len = 0;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8006bfc:	1c5a      	adds	r2, r3, #1
 8006bfe:	b291      	uxth	r1, r2
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8006c06:	4619      	mov	r1, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	791a      	ldrb	r2, [r3, #4]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	440b      	add	r3, r1
 8006c10:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    if (addr + qty > MODBUS_REG_LENGTH)
 8006c14:	8a7a      	ldrh	r2, [r7, #18]
 8006c16:	8a3b      	ldrh	r3, [r7, #16]
 8006c18:	4413      	add	r3, r2
 8006c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c1e:	dd20      	ble.n	8006c62 <slave_handle_read_discs+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	7b5a      	ldrb	r2, [r3, #13]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8006c2a:	1c59      	adds	r1, r3, #1
 8006c2c:	b288      	uxth	r0, r1
 8006c2e:	6879      	ldr	r1, [r7, #4]
 8006c30:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 8006c34:	4619      	mov	r1, r3
 8006c36:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 8006c3a:	b2da      	uxtb	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	440b      	add	r3, r1
 8006c40:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x02;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8006c4a:	1c5a      	adds	r2, r3, #1
 8006c4c:	b291      	uxth	r1, r2
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8006c54:	461a      	mov	r2, r3
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4413      	add	r3, r2
 8006c5a:	2202      	movs	r2, #2
 8006c5c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
            {
                slave->tx_buf[slave->tx_len++] = byte_data;
            }
        }
    }
}
 8006c60:	e072      	b.n	8006d48 <slave_handle_read_discs+0x18a>
        uint16_t byte_count = (qty % 8 == 0) ? (qty / 8) : (qty / 8 + 1);
 8006c62:	8a3b      	ldrh	r3, [r7, #16]
 8006c64:	f003 0307 	and.w	r3, r3, #7
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d103      	bne.n	8006c76 <slave_handle_read_discs+0xb8>
 8006c6e:	8a3b      	ldrh	r3, [r7, #16]
 8006c70:	08db      	lsrs	r3, r3, #3
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	e004      	b.n	8006c80 <slave_handle_read_discs+0xc2>
 8006c76:	8a3b      	ldrh	r3, [r7, #16]
 8006c78:	08db      	lsrs	r3, r3, #3
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	81fb      	strh	r3, [r7, #14]
        uint8_t byte_data = 0;
 8006c82:	2300      	movs	r3, #0
 8006c84:	75fb      	strb	r3, [r7, #23]
        slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8006c8c:	1c5a      	adds	r2, r3, #1
 8006c8e:	b291      	uxth	r1, r2
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8006c96:	4619      	mov	r1, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	7b5a      	ldrb	r2, [r3, #13]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	440b      	add	r3, r1
 8006ca0:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = byte_count;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8006caa:	1c5a      	adds	r2, r3, #1
 8006cac:	b291      	uxth	r1, r2
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	89fb      	ldrh	r3, [r7, #14]
 8006cb8:	b2da      	uxtb	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	440b      	add	r3, r1
 8006cbe:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < byte_count * 8; i++)
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	82bb      	strh	r3, [r7, #20]
 8006cc6:	e03a      	b.n	8006d3e <slave_handle_read_discs+0x180>
            if (i % 8 == 0)
 8006cc8:	8abb      	ldrh	r3, [r7, #20]
 8006cca:	f003 0307 	and.w	r3, r3, #7
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d101      	bne.n	8006cd8 <slave_handle_read_discs+0x11a>
                byte_data = 0x00;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	75fb      	strb	r3, [r7, #23]
            if (i < qty)
 8006cd8:	8aba      	ldrh	r2, [r7, #20]
 8006cda:	8a3b      	ldrh	r3, [r7, #16]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d214      	bcs.n	8006d0a <slave_handle_read_discs+0x14c>
                byte_data = (slave->regs->discs[addr + i] == 1) ? (byte_data >> 1 | 0x80) : (byte_data >> 1 & 0x7F);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006ce6:	8a79      	ldrh	r1, [r7, #18]
 8006ce8:	8abb      	ldrh	r3, [r7, #20]
 8006cea:	440b      	add	r3, r1
 8006cec:	5cd3      	ldrb	r3, [r2, r3]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d106      	bne.n	8006d00 <slave_handle_read_discs+0x142>
 8006cf2:	7dfb      	ldrb	r3, [r7, #23]
 8006cf4:	085b      	lsrs	r3, r3, #1
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	e002      	b.n	8006d06 <slave_handle_read_discs+0x148>
 8006d00:	7dfb      	ldrb	r3, [r7, #23]
 8006d02:	085b      	lsrs	r3, r3, #1
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	75fb      	strb	r3, [r7, #23]
 8006d08:	e002      	b.n	8006d10 <slave_handle_read_discs+0x152>
                byte_data = byte_data >> 1 & 0x7F;
 8006d0a:	7dfb      	ldrb	r3, [r7, #23]
 8006d0c:	085b      	lsrs	r3, r3, #1
 8006d0e:	75fb      	strb	r3, [r7, #23]
            if ((i + 1) % 8 == 0)
 8006d10:	8abb      	ldrh	r3, [r7, #20]
 8006d12:	3301      	adds	r3, #1
 8006d14:	f003 0307 	and.w	r3, r3, #7
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10d      	bne.n	8006d38 <slave_handle_read_discs+0x17a>
                slave->tx_buf[slave->tx_len++] = byte_data;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8006d22:	1c5a      	adds	r2, r3, #1
 8006d24:	b291      	uxth	r1, r2
 8006d26:	687a      	ldr	r2, [r7, #4]
 8006d28:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4413      	add	r3, r2
 8006d32:	7dfa      	ldrb	r2, [r7, #23]
 8006d34:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < byte_count * 8; i++)
 8006d38:	8abb      	ldrh	r3, [r7, #20]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	82bb      	strh	r3, [r7, #20]
 8006d3e:	8aba      	ldrh	r2, [r7, #20]
 8006d40:	89fb      	ldrh	r3, [r7, #14]
 8006d42:	00db      	lsls	r3, r3, #3
 8006d44:	429a      	cmp	r2, r3
 8006d46:	dbbf      	blt.n	8006cc8 <slave_handle_read_discs+0x10a>
}
 8006d48:	bf00      	nop
 8006d4a:	371c      	adds	r7, #28
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bc80      	pop	{r7}
 8006d50:	4770      	bx	lr

08006d52 <slave_handle_read_coils>:

static void slave_handle_read_coils(modbus_slave *slave)
{
 8006d52:	b480      	push	{r7}
 8006d54:	b087      	sub	sp, #28
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	7b9b      	ldrb	r3, [r3, #14]
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	021b      	lsls	r3, r3, #8
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	7bdb      	ldrb	r3, [r3, #15]
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	4413      	add	r3, r2
 8006d6c:	827b      	strh	r3, [r7, #18]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	7c1b      	ldrb	r3, [r3, #16]
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	021b      	lsls	r3, r3, #8
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	7c5b      	ldrb	r3, [r3, #17]
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	4413      	add	r3, r2
 8006d80:	823b      	strh	r3, [r7, #16]

    slave->tx_len = 0;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2200      	movs	r2, #0
 8006d86:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8006d90:	1c5a      	adds	r2, r3, #1
 8006d92:	b291      	uxth	r1, r2
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	791a      	ldrb	r2, [r3, #4]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	440b      	add	r3, r1
 8006da4:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    if (addr + qty > MODBUS_REG_LENGTH)
 8006da8:	8a7a      	ldrh	r2, [r7, #18]
 8006daa:	8a3b      	ldrh	r3, [r7, #16]
 8006dac:	4413      	add	r3, r2
 8006dae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006db2:	dd20      	ble.n	8006df6 <slave_handle_read_coils+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	7b5a      	ldrb	r2, [r3, #13]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8006dbe:	1c59      	adds	r1, r3, #1
 8006dc0:	b288      	uxth	r0, r1
 8006dc2:	6879      	ldr	r1, [r7, #4]
 8006dc4:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 8006dc8:	4619      	mov	r1, r3
 8006dca:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 8006dce:	b2da      	uxtb	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	440b      	add	r3, r1
 8006dd4:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x02;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8006dde:	1c5a      	adds	r2, r3, #1
 8006de0:	b291      	uxth	r1, r2
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8006de8:	461a      	mov	r2, r3
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	4413      	add	r3, r2
 8006dee:	2202      	movs	r2, #2
 8006df0:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
            {
                slave->tx_buf[slave->tx_len++] = byte_data;
            }
        }
    }
}
 8006df4:	e074      	b.n	8006ee0 <slave_handle_read_coils+0x18e>
        uint16_t byte_count = (qty % 8 == 0) ? (qty / 8) : (qty / 8 + 1);
 8006df6:	8a3b      	ldrh	r3, [r7, #16]
 8006df8:	f003 0307 	and.w	r3, r3, #7
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d103      	bne.n	8006e0a <slave_handle_read_coils+0xb8>
 8006e02:	8a3b      	ldrh	r3, [r7, #16]
 8006e04:	08db      	lsrs	r3, r3, #3
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	e004      	b.n	8006e14 <slave_handle_read_coils+0xc2>
 8006e0a:	8a3b      	ldrh	r3, [r7, #16]
 8006e0c:	08db      	lsrs	r3, r3, #3
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	3301      	adds	r3, #1
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	81fb      	strh	r3, [r7, #14]
        uint8_t byte_data = 0;
 8006e16:	2300      	movs	r3, #0
 8006e18:	75fb      	strb	r3, [r7, #23]
        slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8006e20:	1c5a      	adds	r2, r3, #1
 8006e22:	b291      	uxth	r1, r2
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	7b5a      	ldrb	r2, [r3, #13]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	440b      	add	r3, r1
 8006e34:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = byte_count;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8006e3e:	1c5a      	adds	r2, r3, #1
 8006e40:	b291      	uxth	r1, r2
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8006e48:	4619      	mov	r1, r3
 8006e4a:	89fb      	ldrh	r3, [r7, #14]
 8006e4c:	b2da      	uxtb	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	440b      	add	r3, r1
 8006e52:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < byte_count * 8; i++)
 8006e56:	2300      	movs	r3, #0
 8006e58:	82bb      	strh	r3, [r7, #20]
 8006e5a:	e03c      	b.n	8006ed6 <slave_handle_read_coils+0x184>
            if (i % 8 == 0)
 8006e5c:	8abb      	ldrh	r3, [r7, #20]
 8006e5e:	f003 0307 	and.w	r3, r3, #7
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d101      	bne.n	8006e6c <slave_handle_read_coils+0x11a>
                byte_data = 0x00;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	75fb      	strb	r3, [r7, #23]
            if (i < qty)
 8006e6c:	8aba      	ldrh	r2, [r7, #20]
 8006e6e:	8a3b      	ldrh	r3, [r7, #16]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d216      	bcs.n	8006ea2 <slave_handle_read_coils+0x150>
                byte_data = (slave->regs->coils[addr + i] == 1) ? (byte_data >> 1 | 0x80) : (byte_data >> 1 & 0x7F);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006e7a:	8a79      	ldrh	r1, [r7, #18]
 8006e7c:	8abb      	ldrh	r3, [r7, #20]
 8006e7e:	440b      	add	r3, r1
 8006e80:	4413      	add	r3, r2
 8006e82:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d106      	bne.n	8006e98 <slave_handle_read_coils+0x146>
 8006e8a:	7dfb      	ldrb	r3, [r7, #23]
 8006e8c:	085b      	lsrs	r3, r3, #1
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	e002      	b.n	8006e9e <slave_handle_read_coils+0x14c>
 8006e98:	7dfb      	ldrb	r3, [r7, #23]
 8006e9a:	085b      	lsrs	r3, r3, #1
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	75fb      	strb	r3, [r7, #23]
 8006ea0:	e002      	b.n	8006ea8 <slave_handle_read_coils+0x156>
                byte_data = byte_data >> 1 & 0x7F;
 8006ea2:	7dfb      	ldrb	r3, [r7, #23]
 8006ea4:	085b      	lsrs	r3, r3, #1
 8006ea6:	75fb      	strb	r3, [r7, #23]
            if ((i + 1) % 8 == 0)
 8006ea8:	8abb      	ldrh	r3, [r7, #20]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	f003 0307 	and.w	r3, r3, #7
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d10d      	bne.n	8006ed0 <slave_handle_read_coils+0x17e>
                slave->tx_buf[slave->tx_len++] = byte_data;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8006eba:	1c5a      	adds	r2, r3, #1
 8006ebc:	b291      	uxth	r1, r2
 8006ebe:	687a      	ldr	r2, [r7, #4]
 8006ec0:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4413      	add	r3, r2
 8006eca:	7dfa      	ldrb	r2, [r7, #23]
 8006ecc:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < byte_count * 8; i++)
 8006ed0:	8abb      	ldrh	r3, [r7, #20]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	82bb      	strh	r3, [r7, #20]
 8006ed6:	8aba      	ldrh	r2, [r7, #20]
 8006ed8:	89fb      	ldrh	r3, [r7, #14]
 8006eda:	00db      	lsls	r3, r3, #3
 8006edc:	429a      	cmp	r2, r3
 8006ede:	dbbd      	blt.n	8006e5c <slave_handle_read_coils+0x10a>
}
 8006ee0:	bf00      	nop
 8006ee2:	371c      	adds	r7, #28
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bc80      	pop	{r7}
 8006ee8:	4770      	bx	lr

08006eea <slave_handle_read_input_regs>:

static void slave_handle_read_input_regs(modbus_slave *slave)
{
 8006eea:	b480      	push	{r7}
 8006eec:	b085      	sub	sp, #20
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	7b9b      	ldrb	r3, [r3, #14]
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	021b      	lsls	r3, r3, #8
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	7bdb      	ldrb	r3, [r3, #15]
 8006f00:	b29b      	uxth	r3, r3
 8006f02:	4413      	add	r3, r2
 8006f04:	81bb      	strh	r3, [r7, #12]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	7c1b      	ldrb	r3, [r3, #16]
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	021b      	lsls	r3, r3, #8
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	7c5b      	ldrb	r3, [r3, #17]
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	4413      	add	r3, r2
 8006f18:	817b      	strh	r3, [r7, #10]
    slave->tx_len = 0;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8006f28:	1c5a      	adds	r2, r3, #1
 8006f2a:	b291      	uxth	r1, r2
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8006f32:	4619      	mov	r1, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	791a      	ldrb	r2, [r3, #4]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	440b      	add	r3, r1
 8006f3c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    if (addr + qty > MODBUS_REG_LENGTH)
 8006f40:	89ba      	ldrh	r2, [r7, #12]
 8006f42:	897b      	ldrh	r3, [r7, #10]
 8006f44:	4413      	add	r3, r2
 8006f46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f4a:	dd20      	ble.n	8006f8e <slave_handle_read_input_regs+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	7b5a      	ldrb	r2, [r3, #13]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8006f56:	1c59      	adds	r1, r3, #1
 8006f58:	b288      	uxth	r0, r1
 8006f5a:	6879      	ldr	r1, [r7, #4]
 8006f5c:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 8006f60:	4619      	mov	r1, r3
 8006f62:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 8006f66:	b2da      	uxtb	r2, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	440b      	add	r3, r1
 8006f6c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x02;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8006f76:	1c5a      	adds	r2, r3, #1
 8006f78:	b291      	uxth	r1, r2
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8006f80:	461a      	mov	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4413      	add	r3, r2
 8006f86:	2202      	movs	r2, #2
 8006f88:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        {
            slave->tx_buf[slave->tx_len++] = slave->regs->inputs[i + addr] >> 8;
            slave->tx_buf[slave->tx_len++] = slave->regs->inputs[i + addr] & 0xFF;
        }
    }
}
 8006f8c:	e05b      	b.n	8007046 <slave_handle_read_input_regs+0x15c>
        slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8006f94:	1c5a      	adds	r2, r3, #1
 8006f96:	b291      	uxth	r1, r2
 8006f98:	687a      	ldr	r2, [r7, #4]
 8006f9a:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	7b5a      	ldrb	r2, [r3, #13]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	440b      	add	r3, r1
 8006fa8:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = qty * 2;
 8006fac:	897b      	ldrh	r3, [r7, #10]
 8006fae:	b2da      	uxtb	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8006fb6:	1c59      	adds	r1, r3, #1
 8006fb8:	b288      	uxth	r0, r1
 8006fba:	6879      	ldr	r1, [r7, #4]
 8006fbc:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	0053      	lsls	r3, r2, #1
 8006fc4:	b2da      	uxtb	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	440b      	add	r3, r1
 8006fca:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < qty; i++)
 8006fce:	2300      	movs	r3, #0
 8006fd0:	81fb      	strh	r3, [r7, #14]
 8006fd2:	e034      	b.n	800703e <slave_handle_read_input_regs+0x154>
            slave->tx_buf[slave->tx_len++] = slave->regs->inputs[i + addr] >> 8;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006fda:	89f9      	ldrh	r1, [r7, #14]
 8006fdc:	89ba      	ldrh	r2, [r7, #12]
 8006fde:	440a      	add	r2, r1
 8006fe0:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006fe4:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8006fe8:	121b      	asrs	r3, r3, #8
 8006fea:	b218      	sxth	r0, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8006ff2:	1c5a      	adds	r2, r3, #1
 8006ff4:	b291      	uxth	r1, r2
 8006ff6:	687a      	ldr	r2, [r7, #4]
 8006ff8:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	b2c2      	uxtb	r2, r0
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	440b      	add	r3, r1
 8007004:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
            slave->tx_buf[slave->tx_len++] = slave->regs->inputs[i + addr] & 0xFF;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800700e:	89f9      	ldrh	r1, [r7, #14]
 8007010:	89ba      	ldrh	r2, [r7, #12]
 8007012:	440a      	add	r2, r1
 8007014:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8007018:	f933 0012 	ldrsh.w	r0, [r3, r2, lsl #1]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007022:	1c5a      	adds	r2, r3, #1
 8007024:	b291      	uxth	r1, r2
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 800702c:	4619      	mov	r1, r3
 800702e:	b2c2      	uxtb	r2, r0
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	440b      	add	r3, r1
 8007034:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < qty; i++)
 8007038:	89fb      	ldrh	r3, [r7, #14]
 800703a:	3301      	adds	r3, #1
 800703c:	81fb      	strh	r3, [r7, #14]
 800703e:	89fa      	ldrh	r2, [r7, #14]
 8007040:	897b      	ldrh	r3, [r7, #10]
 8007042:	429a      	cmp	r2, r3
 8007044:	d3c6      	bcc.n	8006fd4 <slave_handle_read_input_regs+0xea>
}
 8007046:	bf00      	nop
 8007048:	3714      	adds	r7, #20
 800704a:	46bd      	mov	sp, r7
 800704c:	bc80      	pop	{r7}
 800704e:	4770      	bx	lr

08007050 <slave_handle_read_holding_regs>:

static void slave_handle_read_holding_regs(modbus_slave *slave)
{
 8007050:	b480      	push	{r7}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	7b9b      	ldrb	r3, [r3, #14]
 800705c:	b29b      	uxth	r3, r3
 800705e:	021b      	lsls	r3, r3, #8
 8007060:	b29a      	uxth	r2, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	7bdb      	ldrb	r3, [r3, #15]
 8007066:	b29b      	uxth	r3, r3
 8007068:	4413      	add	r3, r2
 800706a:	81bb      	strh	r3, [r7, #12]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	7c1b      	ldrb	r3, [r3, #16]
 8007070:	b29b      	uxth	r3, r3
 8007072:	021b      	lsls	r3, r3, #8
 8007074:	b29a      	uxth	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	7c5b      	ldrb	r3, [r3, #17]
 800707a:	b29b      	uxth	r3, r3
 800707c:	4413      	add	r3, r2
 800707e:	817b      	strh	r3, [r7, #10]
    slave->tx_len = 0;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800708e:	1c5a      	adds	r2, r3, #1
 8007090:	b291      	uxth	r1, r2
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007098:	4619      	mov	r1, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	791a      	ldrb	r2, [r3, #4]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	440b      	add	r3, r1
 80070a2:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    if (addr + qty > MODBUS_REG_LENGTH)
 80070a6:	89ba      	ldrh	r2, [r7, #12]
 80070a8:	897b      	ldrh	r3, [r7, #10]
 80070aa:	4413      	add	r3, r2
 80070ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070b0:	dd20      	ble.n	80070f4 <slave_handle_read_holding_regs+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	7b5a      	ldrb	r2, [r3, #13]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80070bc:	1c59      	adds	r1, r3, #1
 80070be:	b288      	uxth	r0, r1
 80070c0:	6879      	ldr	r1, [r7, #4]
 80070c2:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 80070c6:	4619      	mov	r1, r3
 80070c8:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 80070cc:	b2da      	uxtb	r2, r3
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	440b      	add	r3, r1
 80070d2:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x02;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80070dc:	1c5a      	adds	r2, r3, #1
 80070de:	b291      	uxth	r1, r2
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 80070e6:	461a      	mov	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4413      	add	r3, r2
 80070ec:	2202      	movs	r2, #2
 80070ee:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        {
            slave->tx_buf[slave->tx_len++] = slave->regs->holdings[i + addr] >> 8;
            slave->tx_buf[slave->tx_len++] = slave->regs->holdings[i + addr] & 0xFF;
        }
    }
}
 80070f2:	e05b      	b.n	80071ac <slave_handle_read_holding_regs+0x15c>
        slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80070fa:	1c5a      	adds	r2, r3, #1
 80070fc:	b291      	uxth	r1, r2
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007104:	4619      	mov	r1, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	7b5a      	ldrb	r2, [r3, #13]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	440b      	add	r3, r1
 800710e:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = qty * 2;
 8007112:	897b      	ldrh	r3, [r7, #10]
 8007114:	b2da      	uxtb	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800711c:	1c59      	adds	r1, r3, #1
 800711e:	b288      	uxth	r0, r1
 8007120:	6879      	ldr	r1, [r7, #4]
 8007122:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 8007126:	4619      	mov	r1, r3
 8007128:	0053      	lsls	r3, r2, #1
 800712a:	b2da      	uxtb	r2, r3
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	440b      	add	r3, r1
 8007130:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < qty; i++)
 8007134:	2300      	movs	r3, #0
 8007136:	81fb      	strh	r3, [r7, #14]
 8007138:	e034      	b.n	80071a4 <slave_handle_read_holding_regs+0x154>
            slave->tx_buf[slave->tx_len++] = slave->regs->holdings[i + addr] >> 8;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007140:	89f9      	ldrh	r1, [r7, #14]
 8007142:	89ba      	ldrh	r2, [r7, #12]
 8007144:	440a      	add	r2, r1
 8007146:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800714a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800714e:	121b      	asrs	r3, r3, #8
 8007150:	b218      	sxth	r0, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007158:	1c5a      	adds	r2, r3, #1
 800715a:	b291      	uxth	r1, r2
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007162:	4619      	mov	r1, r3
 8007164:	b2c2      	uxtb	r2, r0
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	440b      	add	r3, r1
 800716a:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
            slave->tx_buf[slave->tx_len++] = slave->regs->holdings[i + addr] & 0xFF;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007174:	89f9      	ldrh	r1, [r7, #14]
 8007176:	89ba      	ldrh	r2, [r7, #12]
 8007178:	440a      	add	r2, r1
 800717a:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800717e:	f933 0012 	ldrsh.w	r0, [r3, r2, lsl #1]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007188:	1c5a      	adds	r2, r3, #1
 800718a:	b291      	uxth	r1, r2
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007192:	4619      	mov	r1, r3
 8007194:	b2c2      	uxtb	r2, r0
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	440b      	add	r3, r1
 800719a:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < qty; i++)
 800719e:	89fb      	ldrh	r3, [r7, #14]
 80071a0:	3301      	adds	r3, #1
 80071a2:	81fb      	strh	r3, [r7, #14]
 80071a4:	89fa      	ldrh	r2, [r7, #14]
 80071a6:	897b      	ldrh	r3, [r7, #10]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d3c6      	bcc.n	800713a <slave_handle_read_holding_regs+0xea>
}
 80071ac:	bf00      	nop
 80071ae:	3714      	adds	r7, #20
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bc80      	pop	{r7}
 80071b4:	4770      	bx	lr

080071b6 <slave_compose_write_reply_tx_buffer>:

static void slave_compose_write_reply_tx_buffer(modbus_slave *slave)
{
 80071b6:	b480      	push	{r7}
 80071b8:	b083      	sub	sp, #12
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[1];
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80071c4:	1c5a      	adds	r2, r3, #1
 80071c6:	b291      	uxth	r1, r2
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 80071ce:	4619      	mov	r1, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	7b5a      	ldrb	r2, [r3, #13]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	440b      	add	r3, r1
 80071d8:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[2];
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80071e2:	1c5a      	adds	r2, r3, #1
 80071e4:	b291      	uxth	r1, r2
 80071e6:	687a      	ldr	r2, [r7, #4]
 80071e8:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 80071ec:	4619      	mov	r1, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	7b9a      	ldrb	r2, [r3, #14]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	440b      	add	r3, r1
 80071f6:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[3];
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007200:	1c5a      	adds	r2, r3, #1
 8007202:	b291      	uxth	r1, r2
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 800720a:	4619      	mov	r1, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	7bda      	ldrb	r2, [r3, #15]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	440b      	add	r3, r1
 8007214:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[4];
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800721e:	1c5a      	adds	r2, r3, #1
 8007220:	b291      	uxth	r1, r2
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007228:	4619      	mov	r1, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	7c1a      	ldrb	r2, [r3, #16]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	440b      	add	r3, r1
 8007232:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    slave->tx_buf[slave->tx_len++] = slave->rx_buf[5];
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800723c:	1c5a      	adds	r2, r3, #1
 800723e:	b291      	uxth	r1, r2
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007246:	4619      	mov	r1, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	7c5a      	ldrb	r2, [r3, #17]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	440b      	add	r3, r1
 8007250:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
}
 8007254:	bf00      	nop
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	bc80      	pop	{r7}
 800725c:	4770      	bx	lr

0800725e <slave_handle_write_single_coil>:

static void slave_handle_write_single_coil(modbus_slave *slave)
{
 800725e:	b580      	push	{r7, lr}
 8007260:	b084      	sub	sp, #16
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	7b9b      	ldrb	r3, [r3, #14]
 800726a:	b29b      	uxth	r3, r3
 800726c:	021b      	lsls	r3, r3, #8
 800726e:	b29a      	uxth	r2, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	7bdb      	ldrb	r3, [r3, #15]
 8007274:	b29b      	uxth	r3, r3
 8007276:	4413      	add	r3, r2
 8007278:	81fb      	strh	r3, [r7, #14]
    slave->tx_len = 0;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007288:	1c5a      	adds	r2, r3, #1
 800728a:	b291      	uxth	r1, r2
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007292:	4619      	mov	r1, r3
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	791a      	ldrb	r2, [r3, #4]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	440b      	add	r3, r1
 800729c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    if (addr + 1 > MODBUS_REG_LENGTH)
 80072a0:	89fb      	ldrh	r3, [r7, #14]
 80072a2:	2bff      	cmp	r3, #255	; 0xff
 80072a4:	d920      	bls.n	80072e8 <slave_handle_write_single_coil+0x8a>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	7b5a      	ldrb	r2, [r3, #13]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80072b0:	1c59      	adds	r1, r3, #1
 80072b2:	b288      	uxth	r0, r1
 80072b4:	6879      	ldr	r1, [r7, #4]
 80072b6:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 80072ba:	4619      	mov	r1, r3
 80072bc:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 80072c0:	b2da      	uxtb	r2, r3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	440b      	add	r3, r1
 80072c6:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x02;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80072d0:	1c5a      	adds	r2, r3, #1
 80072d2:	b291      	uxth	r1, r2
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 80072da:	461a      	mov	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4413      	add	r3, r2
 80072e0:	2202      	movs	r2, #2
 80072e2:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    else
    {
        slave_compose_write_reply_tx_buffer(slave);
        slave->regs->coils[addr] = (slave->rx_buf[4] == 0xFF) ? 1 : 0;
    }
}
 80072e6:	e011      	b.n	800730c <slave_handle_write_single_coil+0xae>
        slave_compose_write_reply_tx_buffer(slave);
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f7ff ff64 	bl	80071b6 <slave_compose_write_reply_tx_buffer>
        slave->regs->coils[addr] = (slave->rx_buf[4] == 0xFF) ? 1 : 0;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	7c1b      	ldrb	r3, [r3, #16]
 80072f2:	2bff      	cmp	r3, #255	; 0xff
 80072f4:	bf0c      	ite	eq
 80072f6:	2301      	moveq	r3, #1
 80072f8:	2300      	movne	r3, #0
 80072fa:	b2d9      	uxtb	r1, r3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007302:	89fb      	ldrh	r3, [r7, #14]
 8007304:	4413      	add	r3, r2
 8007306:	460a      	mov	r2, r1
 8007308:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
}
 800730c:	bf00      	nop
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <slave_handle_write_multi_coils>:

static void slave_handle_write_multi_coils(modbus_slave *slave)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	7b9b      	ldrb	r3, [r3, #14]
 8007320:	b29b      	uxth	r3, r3
 8007322:	021b      	lsls	r3, r3, #8
 8007324:	b29a      	uxth	r2, r3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	7bdb      	ldrb	r3, [r3, #15]
 800732a:	b29b      	uxth	r3, r3
 800732c:	4413      	add	r3, r2
 800732e:	81bb      	strh	r3, [r7, #12]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	7c1b      	ldrb	r3, [r3, #16]
 8007334:	b29b      	uxth	r3, r3
 8007336:	021b      	lsls	r3, r3, #8
 8007338:	b29a      	uxth	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	7c5b      	ldrb	r3, [r3, #17]
 800733e:	b29b      	uxth	r3, r3
 8007340:	4413      	add	r3, r2
 8007342:	817b      	strh	r3, [r7, #10]
    slave->tx_len = 0;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007352:	1c5a      	adds	r2, r3, #1
 8007354:	b291      	uxth	r1, r2
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 800735c:	4619      	mov	r1, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	791a      	ldrb	r2, [r3, #4]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	440b      	add	r3, r1
 8007366:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    if (addr + qty > MODBUS_REG_LENGTH)
 800736a:	89ba      	ldrh	r2, [r7, #12]
 800736c:	897b      	ldrh	r3, [r7, #10]
 800736e:	4413      	add	r3, r2
 8007370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007374:	dd20      	ble.n	80073b8 <slave_handle_write_multi_coils+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	7b5a      	ldrb	r2, [r3, #13]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007380:	1c59      	adds	r1, r3, #1
 8007382:	b288      	uxth	r0, r1
 8007384:	6879      	ldr	r1, [r7, #4]
 8007386:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 800738a:	4619      	mov	r1, r3
 800738c:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 8007390:	b2da      	uxtb	r2, r3
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	440b      	add	r3, r1
 8007396:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x02;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80073a0:	1c5a      	adds	r2, r3, #1
 80073a2:	b291      	uxth	r1, r2
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 80073aa:	461a      	mov	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4413      	add	r3, r2
 80073b0:	2202      	movs	r2, #2
 80073b2:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < qty; i++)
        {
            slave->regs->coils[addr + i] = (slave->rx_buf[7 + i / 8] >> (i % 8)) & 0x01;
        }
    }
}
 80073b6:	e027      	b.n	8007408 <slave_handle_write_multi_coils+0xf4>
        slave_compose_write_reply_tx_buffer(slave);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f7ff fefc 	bl	80071b6 <slave_compose_write_reply_tx_buffer>
        for (uint16_t i = 0; i < qty; i++)
 80073be:	2300      	movs	r3, #0
 80073c0:	81fb      	strh	r3, [r7, #14]
 80073c2:	e01d      	b.n	8007400 <slave_handle_write_multi_coils+0xec>
            slave->regs->coils[addr + i] = (slave->rx_buf[7 + i / 8] >> (i % 8)) & 0x01;
 80073c4:	89fb      	ldrh	r3, [r7, #14]
 80073c6:	08db      	lsrs	r3, r3, #3
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	3307      	adds	r3, #7
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	4413      	add	r3, r2
 80073d0:	7b1b      	ldrb	r3, [r3, #12]
 80073d2:	461a      	mov	r2, r3
 80073d4:	89fb      	ldrh	r3, [r7, #14]
 80073d6:	f003 0307 	and.w	r3, r3, #7
 80073da:	fa42 f303 	asr.w	r3, r2, r3
 80073de:	b2d9      	uxtb	r1, r3
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80073e6:	89b8      	ldrh	r0, [r7, #12]
 80073e8:	89fb      	ldrh	r3, [r7, #14]
 80073ea:	4403      	add	r3, r0
 80073ec:	f001 0101 	and.w	r1, r1, #1
 80073f0:	b2c9      	uxtb	r1, r1
 80073f2:	4413      	add	r3, r2
 80073f4:	460a      	mov	r2, r1
 80073f6:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
        for (uint16_t i = 0; i < qty; i++)
 80073fa:	89fb      	ldrh	r3, [r7, #14]
 80073fc:	3301      	adds	r3, #1
 80073fe:	81fb      	strh	r3, [r7, #14]
 8007400:	89fa      	ldrh	r2, [r7, #14]
 8007402:	897b      	ldrh	r3, [r7, #10]
 8007404:	429a      	cmp	r2, r3
 8007406:	d3dd      	bcc.n	80073c4 <slave_handle_write_multi_coils+0xb0>
}
 8007408:	bf00      	nop
 800740a:	3710      	adds	r7, #16
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <slave_handle_write_single_holding_reg>:

static void slave_handle_write_single_holding_reg(modbus_slave *slave)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	7b9b      	ldrb	r3, [r3, #14]
 800741c:	b29b      	uxth	r3, r3
 800741e:	021b      	lsls	r3, r3, #8
 8007420:	b29a      	uxth	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	7bdb      	ldrb	r3, [r3, #15]
 8007426:	b29b      	uxth	r3, r3
 8007428:	4413      	add	r3, r2
 800742a:	81fb      	strh	r3, [r7, #14]
    slave->tx_len = 0;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800743a:	1c5a      	adds	r2, r3, #1
 800743c:	b291      	uxth	r1, r2
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007444:	4619      	mov	r1, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	791a      	ldrb	r2, [r3, #4]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	440b      	add	r3, r1
 800744e:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    if (addr + 1 > MODBUS_REG_LENGTH)
 8007452:	89fb      	ldrh	r3, [r7, #14]
 8007454:	2bff      	cmp	r3, #255	; 0xff
 8007456:	d920      	bls.n	800749a <slave_handle_write_single_holding_reg+0x8a>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	7b5a      	ldrb	r2, [r3, #13]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007462:	1c59      	adds	r1, r3, #1
 8007464:	b288      	uxth	r0, r1
 8007466:	6879      	ldr	r1, [r7, #4]
 8007468:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 800746c:	4619      	mov	r1, r3
 800746e:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 8007472:	b2da      	uxtb	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	440b      	add	r3, r1
 8007478:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x02;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007482:	1c5a      	adds	r2, r3, #1
 8007484:	b291      	uxth	r1, r2
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 800748c:	461a      	mov	r2, r3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4413      	add	r3, r2
 8007492:	2202      	movs	r2, #2
 8007494:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    else
    {
        slave_compose_write_reply_tx_buffer(slave);
        slave->regs->holdings[addr] = slave->rx_buf[4] * 256 + slave->rx_buf[5];
    }
}
 8007498:	e015      	b.n	80074c6 <slave_handle_write_single_holding_reg+0xb6>
        slave_compose_write_reply_tx_buffer(slave);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f7ff fe8b 	bl	80071b6 <slave_compose_write_reply_tx_buffer>
        slave->regs->holdings[addr] = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	7c1b      	ldrb	r3, [r3, #16]
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	021b      	lsls	r3, r3, #8
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	7c5b      	ldrb	r3, [r3, #17]
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	4413      	add	r3, r2
 80074b2:	b299      	uxth	r1, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80074ba:	89fa      	ldrh	r2, [r7, #14]
 80074bc:	b209      	sxth	r1, r1
 80074be:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80074c2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
}
 80074c6:	bf00      	nop
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <slave_handle_write_multi_holding_regs>:

static void slave_handle_write_multi_holding_regs(modbus_slave *slave)
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b084      	sub	sp, #16
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
    uint16_t addr = slave->rx_buf[2] * 256 + slave->rx_buf[3];
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	7b9b      	ldrb	r3, [r3, #14]
 80074da:	b29b      	uxth	r3, r3
 80074dc:	021b      	lsls	r3, r3, #8
 80074de:	b29a      	uxth	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	7bdb      	ldrb	r3, [r3, #15]
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	4413      	add	r3, r2
 80074e8:	81bb      	strh	r3, [r7, #12]
    uint16_t qty = slave->rx_buf[4] * 256 + slave->rx_buf[5];
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	7c1b      	ldrb	r3, [r3, #16]
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	021b      	lsls	r3, r3, #8
 80074f2:	b29a      	uxth	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	7c5b      	ldrb	r3, [r3, #17]
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	4413      	add	r3, r2
 80074fc:	817b      	strh	r3, [r7, #10]
    slave->tx_len = 0;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
    slave->tx_buf[slave->tx_len++] = slave->slave_id;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800750c:	1c5a      	adds	r2, r3, #1
 800750e:	b291      	uxth	r1, r2
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007516:	4619      	mov	r1, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	791a      	ldrb	r2, [r3, #4]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	440b      	add	r3, r1
 8007520:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    if (addr + qty > MODBUS_REG_LENGTH)
 8007524:	89ba      	ldrh	r2, [r7, #12]
 8007526:	897b      	ldrh	r3, [r7, #10]
 8007528:	4413      	add	r3, r2
 800752a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800752e:	dd20      	ble.n	8007572 <slave_handle_write_multi_holding_regs+0xa4>
    {
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	7b5a      	ldrb	r2, [r3, #13]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800753a:	1c59      	adds	r1, r3, #1
 800753c:	b288      	uxth	r0, r1
 800753e:	6879      	ldr	r1, [r7, #4]
 8007540:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 8007544:	4619      	mov	r1, r3
 8007546:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 800754a:	b2da      	uxtb	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	440b      	add	r3, r1
 8007550:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x02;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800755a:	1c5a      	adds	r2, r3, #1
 800755c:	b291      	uxth	r1, r2
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007564:	461a      	mov	r2, r3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4413      	add	r3, r2
 800756a:	2202      	movs	r2, #2
 800756c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        for (uint16_t i = 0; i < qty; i++)
        {
            slave->regs->holdings[addr + i] = slave->rx_buf[7 + 2 * i] * 256 + slave->rx_buf[8 + 2 * i];
        }
    }
}
 8007570:	e029      	b.n	80075c6 <slave_handle_write_multi_holding_regs+0xf8>
        slave_compose_write_reply_tx_buffer(slave);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f7ff fe1f 	bl	80071b6 <slave_compose_write_reply_tx_buffer>
        for (uint16_t i = 0; i < qty; i++)
 8007578:	2300      	movs	r3, #0
 800757a:	81fb      	strh	r3, [r7, #14]
 800757c:	e01f      	b.n	80075be <slave_handle_write_multi_holding_regs+0xf0>
            slave->regs->holdings[addr + i] = slave->rx_buf[7 + 2 * i] * 256 + slave->rx_buf[8 + 2 * i];
 800757e:	89fb      	ldrh	r3, [r7, #14]
 8007580:	005b      	lsls	r3, r3, #1
 8007582:	3307      	adds	r3, #7
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	4413      	add	r3, r2
 8007588:	7b1b      	ldrb	r3, [r3, #12]
 800758a:	b29b      	uxth	r3, r3
 800758c:	021b      	lsls	r3, r3, #8
 800758e:	b29a      	uxth	r2, r3
 8007590:	89fb      	ldrh	r3, [r7, #14]
 8007592:	3304      	adds	r3, #4
 8007594:	005b      	lsls	r3, r3, #1
 8007596:	6879      	ldr	r1, [r7, #4]
 8007598:	440b      	add	r3, r1
 800759a:	7b1b      	ldrb	r3, [r3, #12]
 800759c:	b29b      	uxth	r3, r3
 800759e:	4413      	add	r3, r2
 80075a0:	b298      	uxth	r0, r3
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80075a8:	89b9      	ldrh	r1, [r7, #12]
 80075aa:	89fa      	ldrh	r2, [r7, #14]
 80075ac:	440a      	add	r2, r1
 80075ae:	b201      	sxth	r1, r0
 80075b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80075b4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        for (uint16_t i = 0; i < qty; i++)
 80075b8:	89fb      	ldrh	r3, [r7, #14]
 80075ba:	3301      	adds	r3, #1
 80075bc:	81fb      	strh	r3, [r7, #14]
 80075be:	89fa      	ldrh	r2, [r7, #14]
 80075c0:	897b      	ldrh	r3, [r7, #10]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d3db      	bcc.n	800757e <slave_handle_write_multi_holding_regs+0xb0>
}
 80075c6:	bf00      	nop
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <slave_response>:

static void slave_response(modbus_slave *slave)
{
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b082      	sub	sp, #8
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
    if (slave_validate_cmd(slave) != osOK)
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f7ff fab4 	bl	8006b44 <slave_validate_cmd>
 80075dc:	4603      	mov	r3, r0
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f040 80b2 	bne.w	8007748 <slave_response+0x17a>
    {
        return;
    }
    slave->func_code = slave->rx_buf[1];
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	7b5a      	ldrb	r2, [r3, #13]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	715a      	strb	r2, [r3, #5]
    if (slave->func_code == MODBUS_FC_READ_DISCRETE_INPUTS)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	795b      	ldrb	r3, [r3, #5]
 80075f0:	2b02      	cmp	r3, #2
 80075f2:	d103      	bne.n	80075fc <slave_response+0x2e>
    {
        slave_handle_read_discs(slave);
 80075f4:	6878      	ldr	r0, [r7, #4]
 80075f6:	f7ff fae2 	bl	8006bbe <slave_handle_read_discs>
 80075fa:	e06a      	b.n	80076d2 <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_READ_COILS)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	795b      	ldrb	r3, [r3, #5]
 8007600:	2b01      	cmp	r3, #1
 8007602:	d103      	bne.n	800760c <slave_response+0x3e>
    {
        slave_handle_read_coils(slave);
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f7ff fba4 	bl	8006d52 <slave_handle_read_coils>
 800760a:	e062      	b.n	80076d2 <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_READ_INPUT_REGISTERS)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	795b      	ldrb	r3, [r3, #5]
 8007610:	2b04      	cmp	r3, #4
 8007612:	d103      	bne.n	800761c <slave_response+0x4e>
    {
        slave_handle_read_input_regs(slave);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f7ff fc68 	bl	8006eea <slave_handle_read_input_regs>
 800761a:	e05a      	b.n	80076d2 <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_READ_HOLDING_REGISTERS)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	795b      	ldrb	r3, [r3, #5]
 8007620:	2b03      	cmp	r3, #3
 8007622:	d103      	bne.n	800762c <slave_response+0x5e>
    {
        slave_handle_read_holding_regs(slave);
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f7ff fd13 	bl	8007050 <slave_handle_read_holding_regs>
 800762a:	e052      	b.n	80076d2 <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_WRITE_SINGLE_COIL)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	795b      	ldrb	r3, [r3, #5]
 8007630:	2b05      	cmp	r3, #5
 8007632:	d103      	bne.n	800763c <slave_response+0x6e>
    {
        slave_handle_write_single_coil(slave);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f7ff fe12 	bl	800725e <slave_handle_write_single_coil>
 800763a:	e04a      	b.n	80076d2 <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_WRITE_MULTIPLE_COILS)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	795b      	ldrb	r3, [r3, #5]
 8007640:	2b0f      	cmp	r3, #15
 8007642:	d103      	bne.n	800764c <slave_response+0x7e>
    {
        slave_handle_write_multi_coils(slave);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f7ff fe65 	bl	8007314 <slave_handle_write_multi_coils>
 800764a:	e042      	b.n	80076d2 <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_WRITE_SINGLE_REGISTER)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	795b      	ldrb	r3, [r3, #5]
 8007650:	2b06      	cmp	r3, #6
 8007652:	d103      	bne.n	800765c <slave_response+0x8e>
    {
        slave_handle_write_single_holding_reg(slave);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f7ff fedb 	bl	8007410 <slave_handle_write_single_holding_reg>
 800765a:	e03a      	b.n	80076d2 <slave_response+0x104>
    }
    else if (slave->func_code == MODBUS_FC_WRITE_MULTIPLE_REGISTERS)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	795b      	ldrb	r3, [r3, #5]
 8007660:	2b10      	cmp	r3, #16
 8007662:	d103      	bne.n	800766c <slave_response+0x9e>
    {
        slave_handle_write_multi_holding_regs(slave);
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f7ff ff32 	bl	80074ce <slave_handle_write_multi_holding_regs>
 800766a:	e032      	b.n	80076d2 <slave_response+0x104>
    }
    else
    {
        slave->tx_len = 0;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	f8a3 220e 	strh.w	r2, [r3, #526]	; 0x20e
        slave->tx_buf[slave->tx_len++] = slave->slave_id;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800767a:	1c5a      	adds	r2, r3, #1
 800767c:	b291      	uxth	r1, r2
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007684:	4619      	mov	r1, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	791a      	ldrb	r2, [r3, #4]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	440b      	add	r3, r1
 800768e:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x80 + slave->rx_buf[1];
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	7b5a      	ldrb	r2, [r3, #13]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800769c:	1c59      	adds	r1, r3, #1
 800769e:	b288      	uxth	r0, r1
 80076a0:	6879      	ldr	r1, [r7, #4]
 80076a2:	f8a1 020e 	strh.w	r0, [r1, #526]	; 0x20e
 80076a6:	4619      	mov	r1, r3
 80076a8:	f1a2 0380 	sub.w	r3, r2, #128	; 0x80
 80076ac:	b2da      	uxtb	r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	440b      	add	r3, r1
 80076b2:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
        slave->tx_buf[slave->tx_len++] = 0x01;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80076bc:	1c5a      	adds	r2, r3, #1
 80076be:	b291      	uxth	r1, r2
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 80076c6:	461a      	mov	r2, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	4413      	add	r3, r2
 80076cc:	2201      	movs	r2, #1
 80076ce:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    }
    slave->buff_len = slave->tx_len;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8b3 220e 	ldrh.w	r2, [r3, #526]	; 0x20e
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	811a      	strh	r2, [r3, #8]
    slave_crc16(slave, slave->tx_buf);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 80076e2:	4619      	mov	r1, r3
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f7ff f9f1 	bl	8006acc <slave_crc16>
    slave->tx_buf[slave->tx_len++] = slave->crc_hi;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80076f0:	1c5a      	adds	r2, r3, #1
 80076f2:	b291      	uxth	r1, r2
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 80076fa:	4619      	mov	r1, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	799a      	ldrb	r2, [r3, #6]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	440b      	add	r3, r1
 8007704:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    slave->tx_buf[slave->tx_len++] = slave->crc_lo;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 800770e:	1c5a      	adds	r2, r3, #1
 8007710:	b291      	uxth	r1, r2
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	f8a2 120e 	strh.w	r1, [r2, #526]	; 0x20e
 8007718:	4619      	mov	r1, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	79da      	ldrb	r2, [r3, #7]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	440b      	add	r3, r1
 8007722:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
    slave_set_tx_rx(slave, tx);
 8007726:	2101      	movs	r1, #1
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 f8ab 	bl	8007884 <slave_set_tx_rx>
    HAL_UART_Transmit_DMA(slave->uart_port->uart, slave->tx_buf, slave->tx_len);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	6818      	ldr	r0, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f503 7187 	add.w	r1, r3, #270	; 0x10e
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 8007740:	461a      	mov	r2, r3
 8007742:	f7fa ff9b 	bl	800267c <HAL_UART_Transmit_DMA>
 8007746:	e000      	b.n	800774a <slave_response+0x17c>
        return;
 8007748:	bf00      	nop
}
 800774a:	3708      	adds	r7, #8
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <ostimer_callback>:

static void ostimer_callback(void *args)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
    modbus_slave *slave = args;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	60fb      	str	r3, [r7, #12]
    if (slave->rx_len == (MB_SLAVE_BUFFER_LENGTH - slave->uart_port->uart->hdmarx->Instance->CNDTR))
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f8b3 310c 	ldrh.w	r3, [r3, #268]	; 0x10c
 8007762:	461a      	mov	r2, r3
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8007774:	429a      	cmp	r2, r3
 8007776:	d109      	bne.n	800778c <ostimer_callback+0x3c>
    {
        slave->idle_timer_flag = 1;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
        osSemaphoreRelease(slave->idle_sem);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007786:	4618      	mov	r0, r3
 8007788:	f7fc f8a2 	bl	80038d0 <osSemaphoreRelease>
    }
}
 800778c:	bf00      	nop
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <slave_init>:

void slave_init(modbus_slave *slave, modbus_port *port, uint16_t slave_id, modbus_regs *regs_ptr)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	603b      	str	r3, [r7, #0]
 80077a0:	4613      	mov	r3, r2
 80077a2:	80fb      	strh	r3, [r7, #6]
    slave->idle_sem = osSemaphoreNew(1, 0, NULL);
 80077a4:	2200      	movs	r2, #0
 80077a6:	2100      	movs	r1, #0
 80077a8:	2001      	movs	r0, #1
 80077aa:	f7fb ff8f 	bl	80036cc <osSemaphoreNew>
 80077ae:	4602      	mov	r2, r0
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    slave->idle_timer = osTimerNew(ostimer_callback, osTimerOnce, (void *)slave, NULL);
 80077b6:	2300      	movs	r3, #0
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	2100      	movs	r1, #0
 80077bc:	4810      	ldr	r0, [pc, #64]	; (8007800 <slave_init+0x6c>)
 80077be:	f7fb fec1 	bl	8003544 <osTimerNew>
 80077c2:	4602      	mov	r2, r0
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    slave->uart_port = port;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	601a      	str	r2, [r3, #0]
    slave->slave_id = slave_id;
 80077d0:	88fb      	ldrh	r3, [r7, #6]
 80077d2:	b2da      	uxtb	r2, r3
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	711a      	strb	r2, [r3, #4]
    slave->regs = regs_ptr;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	683a      	ldr	r2, [r7, #0]
 80077dc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    __HAL_UART_ENABLE_IT(slave->uart_port->uart, UART_IT_IDLE);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68da      	ldr	r2, [r3, #12]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f042 0210 	orr.w	r2, r2, #16
 80077f6:	60da      	str	r2, [r3, #12]
}
 80077f8:	bf00      	nop
 80077fa:	3710      	adds	r7, #16
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	08007751 	.word	0x08007751

08007804 <slave_uart_idle>:

void slave_uart_idle(modbus_slave *slave)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
    if (((READ_REG(slave->uart_port->uart->Instance->SR) & USART_SR_IDLE) != RESET) && ((READ_REG(slave->uart_port->uart->Instance->CR1) & USART_CR1_IDLEIE) != RESET))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f003 0310 	and.w	r3, r3, #16
 800781a:	2b00      	cmp	r3, #0
 800781c:	d02e      	beq.n	800787c <slave_uart_idle+0x78>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	f003 0310 	and.w	r3, r3, #16
 800782c:	2b00      	cmp	r3, #0
 800782e:	d025      	beq.n	800787c <slave_uart_idle+0x78>
    {
        __HAL_UART_CLEAR_IDLEFLAG(slave->uart_port->uart);
 8007830:	2300      	movs	r3, #0
 8007832:	60fb      	str	r3, [r7, #12]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	60fb      	str	r3, [r7, #12]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	60fb      	str	r3, [r7, #12]
 800784c:	68fb      	ldr	r3, [r7, #12]
        slave->rx_len = MB_SLAVE_BUFFER_LENGTH - slave->uart_port->uart->hdmarx->Instance->CNDTR;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	b29b      	uxth	r3, r3
 800785c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8007860:	b29a      	uxth	r2, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
        slave->idle_timer_flag = 0;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
        osSemaphoreRelease(slave->idle_sem);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007876:	4618      	mov	r0, r3
 8007878:	f7fc f82a 	bl	80038d0 <osSemaphoreRelease>
    }
}
 800787c:	bf00      	nop
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <slave_set_tx_rx>:

void slave_set_tx_rx(modbus_slave *slave, uart_tx_rx_enum dir)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	460b      	mov	r3, r1
 800788e:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(slave->uart_port->gpio_port, slave->uart_port->gpio_pin, (dir == tx) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	6858      	ldr	r0, [r3, #4]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	8919      	ldrh	r1, [r3, #8]
 800789c:	78fb      	ldrb	r3, [r7, #3]
 800789e:	2b01      	cmp	r3, #1
 80078a0:	bf0c      	ite	eq
 80078a2:	2301      	moveq	r3, #1
 80078a4:	2300      	movne	r3, #0
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	461a      	mov	r2, r3
 80078aa:	f7f9 ffb2 	bl	8001812 <HAL_GPIO_WritePin>
}
 80078ae:	bf00      	nop
 80078b0:	3708      	adds	r7, #8
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <slave_wait_request>:

void slave_wait_request(modbus_slave *slave)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b082      	sub	sp, #8
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
    while (osSemaphoreAcquire(slave->idle_sem, osWaitForever) == osOK)
 80078be:	e024      	b.n	800790a <slave_wait_request+0x54>
    {
        if (slave->idle_timer_flag == 0)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d107      	bne.n	80078da <slave_wait_request+0x24>
        {
            osTimerStart(slave->idle_timer, 2);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80078d0:	2102      	movs	r1, #2
 80078d2:	4618      	mov	r0, r3
 80078d4:	f7fb feba 	bl	800364c <osTimerStart>
 80078d8:	e017      	b.n	800790a <slave_wait_request+0x54>
        }
        else if (slave->idle_timer_flag == 1)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d112      	bne.n	800790a <slave_wait_request+0x54>
        {
            HAL_UART_DMAStop(slave->uart_port->uart);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7fa ff62 	bl	80027b4 <HAL_UART_DMAStop>
            slave_response(slave);
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f7ff fe6c 	bl	80075ce <slave_response>
            HAL_UART_Receive_DMA(slave->uart_port->uart, slave->rx_buf, MB_SLAVE_BUFFER_LENGTH);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	6818      	ldr	r0, [r3, #0]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	330c      	adds	r3, #12
 8007900:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007904:	4619      	mov	r1, r3
 8007906:	f7fa ff25 	bl	8002754 <HAL_UART_Receive_DMA>
    while (osSemaphoreAcquire(slave->idle_sem, osWaitForever) == osOK)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007910:	f04f 31ff 	mov.w	r1, #4294967295
 8007914:	4618      	mov	r0, r3
 8007916:	f7fb ff75 	bl	8003804 <osSemaphoreAcquire>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d0cf      	beq.n	80078c0 <slave_wait_request+0xa>
        }
    }
}
 8007920:	bf00      	nop
 8007922:	bf00      	nop
 8007924:	3708      	adds	r7, #8
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
	...

0800792c <key_com_motor_ctrl_step>:

int16_T relay[8];
B_key_com_motor_ctrl_T key_com_motor_ctrl_B;
DW_key_com_motor_ctrl_T key_com_motor_ctrl_DW;
void key_com_motor_ctrl_step(void)
{
 800792c:	b590      	push	{r4, r7, lr}
 800792e:	b09b      	sub	sp, #108	; 0x6c
 8007930:	af0c      	add	r7, sp, #48	; 0x30
    int16_T rtb_ch4_com_short_up;
    int16_T rtb_ch4_com_long_up;
    int16_T rtb_ch4_com_stop;
    int16_T rtb_ch4_com_short_down;
    int16_T rtb_ch4_com_long_down;
    key_process((&(sys_regs.inputs[100])), (&(sys_regs.inputs[108])), (&(sys_regs.holdings[37])), &rtb_key1);
 8007932:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8007936:	4aa0      	ldr	r2, [pc, #640]	; (8007bb8 <key_com_motor_ctrl_step+0x28c>)
 8007938:	49a0      	ldr	r1, [pc, #640]	; (8007bbc <key_com_motor_ctrl_step+0x290>)
 800793a:	48a1      	ldr	r0, [pc, #644]	; (8007bc0 <key_com_motor_ctrl_step+0x294>)
 800793c:	f000 fafe 	bl	8007f3c <key_process>
    key_process((&(sys_regs.inputs[101])), (&(sys_regs.inputs[109])), (&(sys_regs.holdings[37])), &rtb_key2);
 8007940:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007944:	4a9c      	ldr	r2, [pc, #624]	; (8007bb8 <key_com_motor_ctrl_step+0x28c>)
 8007946:	499f      	ldr	r1, [pc, #636]	; (8007bc4 <key_com_motor_ctrl_step+0x298>)
 8007948:	489f      	ldr	r0, [pc, #636]	; (8007bc8 <key_com_motor_ctrl_step+0x29c>)
 800794a:	f000 faf7 	bl	8007f3c <key_process>
    com_process((&(sys_regs.holdings[110])), (&(sys_regs.holdings[130])), (&(sys_regs.inputs[120])), (&(sys_regs.inputs[140])),
 800794e:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8007952:	9301      	str	r3, [sp, #4]
 8007954:	4b98      	ldr	r3, [pc, #608]	; (8007bb8 <key_com_motor_ctrl_step+0x28c>)
 8007956:	9300      	str	r3, [sp, #0]
 8007958:	4b9c      	ldr	r3, [pc, #624]	; (8007bcc <key_com_motor_ctrl_step+0x2a0>)
 800795a:	4a9d      	ldr	r2, [pc, #628]	; (8007bd0 <key_com_motor_ctrl_step+0x2a4>)
 800795c:	499d      	ldr	r1, [pc, #628]	; (8007bd4 <key_com_motor_ctrl_step+0x2a8>)
 800795e:	489e      	ldr	r0, [pc, #632]	; (8007bd8 <key_com_motor_ctrl_step+0x2ac>)
 8007960:	f000 fa90 	bl	8007e84 <com_process>
                (&(sys_regs.holdings[37])), &rtb_ch1_com_short_up);
    com_process((&(sys_regs.holdings[111])), (&(sys_regs.holdings[131])), (&(sys_regs.inputs[121])), (&(sys_regs.inputs[141])),
 8007964:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007968:	9301      	str	r3, [sp, #4]
 800796a:	4b93      	ldr	r3, [pc, #588]	; (8007bb8 <key_com_motor_ctrl_step+0x28c>)
 800796c:	9300      	str	r3, [sp, #0]
 800796e:	4b9b      	ldr	r3, [pc, #620]	; (8007bdc <key_com_motor_ctrl_step+0x2b0>)
 8007970:	4a9b      	ldr	r2, [pc, #620]	; (8007be0 <key_com_motor_ctrl_step+0x2b4>)
 8007972:	499c      	ldr	r1, [pc, #624]	; (8007be4 <key_com_motor_ctrl_step+0x2b8>)
 8007974:	489c      	ldr	r0, [pc, #624]	; (8007be8 <key_com_motor_ctrl_step+0x2bc>)
 8007976:	f000 fa85 	bl	8007e84 <com_process>
                (&(sys_regs.holdings[37])), &rtb_ch1_com_long_up);
    com_process((&(sys_regs.holdings[112])), (&(sys_regs.holdings[132])), (&(sys_regs.inputs[122])), (&(sys_regs.inputs[142])),
 800797a:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800797e:	9301      	str	r3, [sp, #4]
 8007980:	4b8d      	ldr	r3, [pc, #564]	; (8007bb8 <key_com_motor_ctrl_step+0x28c>)
 8007982:	9300      	str	r3, [sp, #0]
 8007984:	4b99      	ldr	r3, [pc, #612]	; (8007bec <key_com_motor_ctrl_step+0x2c0>)
 8007986:	4a9a      	ldr	r2, [pc, #616]	; (8007bf0 <key_com_motor_ctrl_step+0x2c4>)
 8007988:	499a      	ldr	r1, [pc, #616]	; (8007bf4 <key_com_motor_ctrl_step+0x2c8>)
 800798a:	489b      	ldr	r0, [pc, #620]	; (8007bf8 <key_com_motor_ctrl_step+0x2cc>)
 800798c:	f000 fa7a 	bl	8007e84 <com_process>
                (&(sys_regs.holdings[37])), &rtb_ch1_com_stop);
    com_process((&(sys_regs.holdings[113])), (&(sys_regs.holdings[133])), (&(sys_regs.inputs[123])), (&(sys_regs.inputs[143])),
 8007990:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007994:	9301      	str	r3, [sp, #4]
 8007996:	4b88      	ldr	r3, [pc, #544]	; (8007bb8 <key_com_motor_ctrl_step+0x28c>)
 8007998:	9300      	str	r3, [sp, #0]
 800799a:	4b98      	ldr	r3, [pc, #608]	; (8007bfc <key_com_motor_ctrl_step+0x2d0>)
 800799c:	4a98      	ldr	r2, [pc, #608]	; (8007c00 <key_com_motor_ctrl_step+0x2d4>)
 800799e:	4999      	ldr	r1, [pc, #612]	; (8007c04 <key_com_motor_ctrl_step+0x2d8>)
 80079a0:	4899      	ldr	r0, [pc, #612]	; (8007c08 <key_com_motor_ctrl_step+0x2dc>)
 80079a2:	f000 fa6f 	bl	8007e84 <com_process>
                (&(sys_regs.holdings[37])), &rtb_ch1_com_short_down);
    com_process((&(sys_regs.holdings[114])), (&(sys_regs.holdings[134])), (&(sys_regs.inputs[124])), (&(sys_regs.inputs[144])),
 80079a6:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 80079aa:	9301      	str	r3, [sp, #4]
 80079ac:	4b82      	ldr	r3, [pc, #520]	; (8007bb8 <key_com_motor_ctrl_step+0x28c>)
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	4b96      	ldr	r3, [pc, #600]	; (8007c0c <key_com_motor_ctrl_step+0x2e0>)
 80079b2:	4a97      	ldr	r2, [pc, #604]	; (8007c10 <key_com_motor_ctrl_step+0x2e4>)
 80079b4:	4997      	ldr	r1, [pc, #604]	; (8007c14 <key_com_motor_ctrl_step+0x2e8>)
 80079b6:	4898      	ldr	r0, [pc, #608]	; (8007c18 <key_com_motor_ctrl_step+0x2ec>)
 80079b8:	f000 fa64 	bl	8007e84 <com_process>
                (&(sys_regs.holdings[37])), &rtb_ch1_com_long_down);
    motor_ctrl(&rtb_key1, &rtb_key2, &rtb_ch1_com_short_up, &rtb_ch1_com_long_up, &rtb_ch1_com_stop, &rtb_ch1_com_short_down,
 80079bc:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80079c0:	f107 0232 	add.w	r2, r7, #50	; 0x32
 80079c4:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80079c8:	f107 0036 	add.w	r0, r7, #54	; 0x36
 80079cc:	4b93      	ldr	r3, [pc, #588]	; (8007c1c <key_com_motor_ctrl_step+0x2f0>)
 80079ce:	930a      	str	r3, [sp, #40]	; 0x28
 80079d0:	4b93      	ldr	r3, [pc, #588]	; (8007c20 <key_com_motor_ctrl_step+0x2f4>)
 80079d2:	9309      	str	r3, [sp, #36]	; 0x24
 80079d4:	4b93      	ldr	r3, [pc, #588]	; (8007c24 <key_com_motor_ctrl_step+0x2f8>)
 80079d6:	9308      	str	r3, [sp, #32]
 80079d8:	4b93      	ldr	r3, [pc, #588]	; (8007c28 <key_com_motor_ctrl_step+0x2fc>)
 80079da:	9307      	str	r3, [sp, #28]
 80079dc:	4b93      	ldr	r3, [pc, #588]	; (8007c2c <key_com_motor_ctrl_step+0x300>)
 80079de:	9306      	str	r3, [sp, #24]
 80079e0:	4b93      	ldr	r3, [pc, #588]	; (8007c30 <key_com_motor_ctrl_step+0x304>)
 80079e2:	9305      	str	r3, [sp, #20]
 80079e4:	4b93      	ldr	r3, [pc, #588]	; (8007c34 <key_com_motor_ctrl_step+0x308>)
 80079e6:	9304      	str	r3, [sp, #16]
 80079e8:	4b93      	ldr	r3, [pc, #588]	; (8007c38 <key_com_motor_ctrl_step+0x30c>)
 80079ea:	9303      	str	r3, [sp, #12]
 80079ec:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 80079f0:	9302      	str	r3, [sp, #8]
 80079f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80079f6:	9301      	str	r3, [sp, #4]
 80079f8:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 80079fc:	9300      	str	r3, [sp, #0]
 80079fe:	4623      	mov	r3, r4
 8007a00:	f000 fc00 	bl	8008204 <motor_ctrl>
               &rtb_ch1_com_long_down, (&(sys_regs.holdings[100])), (&(sys_regs.holdings[101])), (&(sys_regs.holdings[102])),
               (&(sys_regs.holdings[103])), (&(sys_regs.holdings[104])), &key_com_motor_ctrl_B.relay1, &key_com_motor_ctrl_B.relay2,
               &(key_com_motor_ctrl_DW.channel1_InstanceData.rtdw));
    relay[0] = key_com_motor_ctrl_B.relay1;
 8007a04:	4b87      	ldr	r3, [pc, #540]	; (8007c24 <key_com_motor_ctrl_step+0x2f8>)
 8007a06:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007a0a:	4b8c      	ldr	r3, [pc, #560]	; (8007c3c <key_com_motor_ctrl_step+0x310>)
 8007a0c:	801a      	strh	r2, [r3, #0]
    relay[1] = key_com_motor_ctrl_B.relay2;
 8007a0e:	4b85      	ldr	r3, [pc, #532]	; (8007c24 <key_com_motor_ctrl_step+0x2f8>)
 8007a10:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8007a14:	4b89      	ldr	r3, [pc, #548]	; (8007c3c <key_com_motor_ctrl_step+0x310>)
 8007a16:	805a      	strh	r2, [r3, #2]
    key_process((&(sys_regs.inputs[102])), (&(sys_regs.inputs[108])), (&(sys_regs.holdings[37])), &rtb_key3);
 8007a18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007a1c:	4a66      	ldr	r2, [pc, #408]	; (8007bb8 <key_com_motor_ctrl_step+0x28c>)
 8007a1e:	4967      	ldr	r1, [pc, #412]	; (8007bbc <key_com_motor_ctrl_step+0x290>)
 8007a20:	4887      	ldr	r0, [pc, #540]	; (8007c40 <key_com_motor_ctrl_step+0x314>)
 8007a22:	f000 fa8b 	bl	8007f3c <key_process>
    key_process((&(sys_regs.inputs[103])), (&(sys_regs.inputs[109])), (&(sys_regs.holdings[37])), &rtb_key4);
 8007a26:	f107 0326 	add.w	r3, r7, #38	; 0x26
 8007a2a:	4a63      	ldr	r2, [pc, #396]	; (8007bb8 <key_com_motor_ctrl_step+0x28c>)
 8007a2c:	4965      	ldr	r1, [pc, #404]	; (8007bc4 <key_com_motor_ctrl_step+0x298>)
 8007a2e:	4885      	ldr	r0, [pc, #532]	; (8007c44 <key_com_motor_ctrl_step+0x318>)
 8007a30:	f000 fa84 	bl	8007f3c <key_process>
    com_process((&(sys_regs.holdings[115])), (&(sys_regs.holdings[130])), (&(sys_regs.inputs[125])), (&(sys_regs.inputs[140])),
 8007a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a38:	9301      	str	r3, [sp, #4]
 8007a3a:	4b5f      	ldr	r3, [pc, #380]	; (8007bb8 <key_com_motor_ctrl_step+0x28c>)
 8007a3c:	9300      	str	r3, [sp, #0]
 8007a3e:	4b63      	ldr	r3, [pc, #396]	; (8007bcc <key_com_motor_ctrl_step+0x2a0>)
 8007a40:	4a81      	ldr	r2, [pc, #516]	; (8007c48 <key_com_motor_ctrl_step+0x31c>)
 8007a42:	4964      	ldr	r1, [pc, #400]	; (8007bd4 <key_com_motor_ctrl_step+0x2a8>)
 8007a44:	4881      	ldr	r0, [pc, #516]	; (8007c4c <key_com_motor_ctrl_step+0x320>)
 8007a46:	f000 fa1d 	bl	8007e84 <com_process>
                (&(sys_regs.holdings[37])), &rtb_ch2_com_short_up);
    com_process((&(sys_regs.holdings[116])), (&(sys_regs.holdings[131])), (&(sys_regs.inputs[126])), (&(sys_regs.inputs[141])),
 8007a4a:	f107 0322 	add.w	r3, r7, #34	; 0x22
 8007a4e:	9301      	str	r3, [sp, #4]
 8007a50:	4b59      	ldr	r3, [pc, #356]	; (8007bb8 <key_com_motor_ctrl_step+0x28c>)
 8007a52:	9300      	str	r3, [sp, #0]
 8007a54:	4b61      	ldr	r3, [pc, #388]	; (8007bdc <key_com_motor_ctrl_step+0x2b0>)
 8007a56:	4a7e      	ldr	r2, [pc, #504]	; (8007c50 <key_com_motor_ctrl_step+0x324>)
 8007a58:	4962      	ldr	r1, [pc, #392]	; (8007be4 <key_com_motor_ctrl_step+0x2b8>)
 8007a5a:	487e      	ldr	r0, [pc, #504]	; (8007c54 <key_com_motor_ctrl_step+0x328>)
 8007a5c:	f000 fa12 	bl	8007e84 <com_process>
                (&(sys_regs.holdings[37])), &rtb_ch2_com_long_up);
    com_process((&(sys_regs.holdings[117])), (&(sys_regs.holdings[132])), (&(sys_regs.inputs[127])), (&(sys_regs.inputs[142])),
 8007a60:	f107 0320 	add.w	r3, r7, #32
 8007a64:	9301      	str	r3, [sp, #4]
 8007a66:	4b54      	ldr	r3, [pc, #336]	; (8007bb8 <key_com_motor_ctrl_step+0x28c>)
 8007a68:	9300      	str	r3, [sp, #0]
 8007a6a:	4b60      	ldr	r3, [pc, #384]	; (8007bec <key_com_motor_ctrl_step+0x2c0>)
 8007a6c:	4a7a      	ldr	r2, [pc, #488]	; (8007c58 <key_com_motor_ctrl_step+0x32c>)
 8007a6e:	4961      	ldr	r1, [pc, #388]	; (8007bf4 <key_com_motor_ctrl_step+0x2c8>)
 8007a70:	487a      	ldr	r0, [pc, #488]	; (8007c5c <key_com_motor_ctrl_step+0x330>)
 8007a72:	f000 fa07 	bl	8007e84 <com_process>
                (&(sys_regs.holdings[37])), &rtb_ch2_com_stop);
    com_process((&(sys_regs.holdings[118])), (&(sys_regs.holdings[133])), (&(sys_regs.inputs[128])), (&(sys_regs.inputs[143])),
 8007a76:	f107 031e 	add.w	r3, r7, #30
 8007a7a:	9301      	str	r3, [sp, #4]
 8007a7c:	4b4e      	ldr	r3, [pc, #312]	; (8007bb8 <key_com_motor_ctrl_step+0x28c>)
 8007a7e:	9300      	str	r3, [sp, #0]
 8007a80:	4b5e      	ldr	r3, [pc, #376]	; (8007bfc <key_com_motor_ctrl_step+0x2d0>)
 8007a82:	4a77      	ldr	r2, [pc, #476]	; (8007c60 <key_com_motor_ctrl_step+0x334>)
 8007a84:	495f      	ldr	r1, [pc, #380]	; (8007c04 <key_com_motor_ctrl_step+0x2d8>)
 8007a86:	4877      	ldr	r0, [pc, #476]	; (8007c64 <key_com_motor_ctrl_step+0x338>)
 8007a88:	f000 f9fc 	bl	8007e84 <com_process>
                (&(sys_regs.holdings[37])), &rtb_ch2_com_short_down);
    com_process((&(sys_regs.holdings[119])), (&(sys_regs.holdings[134])), (&(sys_regs.inputs[129])), (&(sys_regs.inputs[144])),
 8007a8c:	f107 031c 	add.w	r3, r7, #28
 8007a90:	9301      	str	r3, [sp, #4]
 8007a92:	4b49      	ldr	r3, [pc, #292]	; (8007bb8 <key_com_motor_ctrl_step+0x28c>)
 8007a94:	9300      	str	r3, [sp, #0]
 8007a96:	4b5d      	ldr	r3, [pc, #372]	; (8007c0c <key_com_motor_ctrl_step+0x2e0>)
 8007a98:	4a73      	ldr	r2, [pc, #460]	; (8007c68 <key_com_motor_ctrl_step+0x33c>)
 8007a9a:	495e      	ldr	r1, [pc, #376]	; (8007c14 <key_com_motor_ctrl_step+0x2e8>)
 8007a9c:	4873      	ldr	r0, [pc, #460]	; (8007c6c <key_com_motor_ctrl_step+0x340>)
 8007a9e:	f000 f9f1 	bl	8007e84 <com_process>
                (&(sys_regs.holdings[37])), &rtb_ch2_com_long_down);
    motor_ctrl(&rtb_key3, &rtb_key4, &rtb_ch2_com_short_up, &rtb_ch2_com_long_up, &rtb_ch2_com_stop, &rtb_ch2_com_short_down,
 8007aa2:	f107 0422 	add.w	r4, r7, #34	; 0x22
 8007aa6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007aaa:	f107 0126 	add.w	r1, r7, #38	; 0x26
 8007aae:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8007ab2:	4b6f      	ldr	r3, [pc, #444]	; (8007c70 <key_com_motor_ctrl_step+0x344>)
 8007ab4:	930a      	str	r3, [sp, #40]	; 0x28
 8007ab6:	4b6f      	ldr	r3, [pc, #444]	; (8007c74 <key_com_motor_ctrl_step+0x348>)
 8007ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8007aba:	4b6f      	ldr	r3, [pc, #444]	; (8007c78 <key_com_motor_ctrl_step+0x34c>)
 8007abc:	9308      	str	r3, [sp, #32]
 8007abe:	4b5a      	ldr	r3, [pc, #360]	; (8007c28 <key_com_motor_ctrl_step+0x2fc>)
 8007ac0:	9307      	str	r3, [sp, #28]
 8007ac2:	4b5a      	ldr	r3, [pc, #360]	; (8007c2c <key_com_motor_ctrl_step+0x300>)
 8007ac4:	9306      	str	r3, [sp, #24]
 8007ac6:	4b5a      	ldr	r3, [pc, #360]	; (8007c30 <key_com_motor_ctrl_step+0x304>)
 8007ac8:	9305      	str	r3, [sp, #20]
 8007aca:	4b5a      	ldr	r3, [pc, #360]	; (8007c34 <key_com_motor_ctrl_step+0x308>)
 8007acc:	9304      	str	r3, [sp, #16]
 8007ace:	4b5a      	ldr	r3, [pc, #360]	; (8007c38 <key_com_motor_ctrl_step+0x30c>)
 8007ad0:	9303      	str	r3, [sp, #12]
 8007ad2:	f107 031c 	add.w	r3, r7, #28
 8007ad6:	9302      	str	r3, [sp, #8]
 8007ad8:	f107 031e 	add.w	r3, r7, #30
 8007adc:	9301      	str	r3, [sp, #4]
 8007ade:	f107 0320 	add.w	r3, r7, #32
 8007ae2:	9300      	str	r3, [sp, #0]
 8007ae4:	4623      	mov	r3, r4
 8007ae6:	f000 fb8d 	bl	8008204 <motor_ctrl>
               &rtb_ch2_com_long_down, (&(sys_regs.holdings[100])), (&(sys_regs.holdings[101])), (&(sys_regs.holdings[102])),
               (&(sys_regs.holdings[103])), (&(sys_regs.holdings[104])), &key_com_motor_ctrl_B.relay3, &key_com_motor_ctrl_B.relay4,
               &(key_com_motor_ctrl_DW.channel2_InstanceData.rtdw));
    relay[2] = key_com_motor_ctrl_B.relay3;
 8007aea:	4b4e      	ldr	r3, [pc, #312]	; (8007c24 <key_com_motor_ctrl_step+0x2f8>)
 8007aec:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8007af0:	4b52      	ldr	r3, [pc, #328]	; (8007c3c <key_com_motor_ctrl_step+0x310>)
 8007af2:	809a      	strh	r2, [r3, #4]
    relay[3] = key_com_motor_ctrl_B.relay4;
 8007af4:	4b4b      	ldr	r3, [pc, #300]	; (8007c24 <key_com_motor_ctrl_step+0x2f8>)
 8007af6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 8007afa:	4b50      	ldr	r3, [pc, #320]	; (8007c3c <key_com_motor_ctrl_step+0x310>)
 8007afc:	80da      	strh	r2, [r3, #6]
    key_process((&(sys_regs.inputs[104])), (&(sys_regs.inputs[108])), (&(sys_regs.holdings[37])), &rtb_key5);
 8007afe:	f107 031a 	add.w	r3, r7, #26
 8007b02:	4a2d      	ldr	r2, [pc, #180]	; (8007bb8 <key_com_motor_ctrl_step+0x28c>)
 8007b04:	492d      	ldr	r1, [pc, #180]	; (8007bbc <key_com_motor_ctrl_step+0x290>)
 8007b06:	485d      	ldr	r0, [pc, #372]	; (8007c7c <key_com_motor_ctrl_step+0x350>)
 8007b08:	f000 fa18 	bl	8007f3c <key_process>
    key_process((&(sys_regs.inputs[105])), (&(sys_regs.inputs[109])), (&(sys_regs.holdings[37])), &rtb_key6);
 8007b0c:	f107 0318 	add.w	r3, r7, #24
 8007b10:	4a29      	ldr	r2, [pc, #164]	; (8007bb8 <key_com_motor_ctrl_step+0x28c>)
 8007b12:	492c      	ldr	r1, [pc, #176]	; (8007bc4 <key_com_motor_ctrl_step+0x298>)
 8007b14:	485a      	ldr	r0, [pc, #360]	; (8007c80 <key_com_motor_ctrl_step+0x354>)
 8007b16:	f000 fa11 	bl	8007f3c <key_process>
    com_process((&(sys_regs.holdings[120])), (&(sys_regs.holdings[130])), (&(sys_regs.inputs[130])), (&(sys_regs.inputs[140])),
 8007b1a:	f107 0316 	add.w	r3, r7, #22
 8007b1e:	9301      	str	r3, [sp, #4]
 8007b20:	4b25      	ldr	r3, [pc, #148]	; (8007bb8 <key_com_motor_ctrl_step+0x28c>)
 8007b22:	9300      	str	r3, [sp, #0]
 8007b24:	4b29      	ldr	r3, [pc, #164]	; (8007bcc <key_com_motor_ctrl_step+0x2a0>)
 8007b26:	4a57      	ldr	r2, [pc, #348]	; (8007c84 <key_com_motor_ctrl_step+0x358>)
 8007b28:	492a      	ldr	r1, [pc, #168]	; (8007bd4 <key_com_motor_ctrl_step+0x2a8>)
 8007b2a:	4857      	ldr	r0, [pc, #348]	; (8007c88 <key_com_motor_ctrl_step+0x35c>)
 8007b2c:	f000 f9aa 	bl	8007e84 <com_process>
                (&(sys_regs.holdings[37])), &rtb_ch3_com_short_up);
    com_process((&(sys_regs.holdings[121])), (&(sys_regs.holdings[131])), (&(sys_regs.inputs[131])), (&(sys_regs.inputs[141])),
 8007b30:	f107 0314 	add.w	r3, r7, #20
 8007b34:	9301      	str	r3, [sp, #4]
 8007b36:	4b20      	ldr	r3, [pc, #128]	; (8007bb8 <key_com_motor_ctrl_step+0x28c>)
 8007b38:	9300      	str	r3, [sp, #0]
 8007b3a:	4b28      	ldr	r3, [pc, #160]	; (8007bdc <key_com_motor_ctrl_step+0x2b0>)
 8007b3c:	4a53      	ldr	r2, [pc, #332]	; (8007c8c <key_com_motor_ctrl_step+0x360>)
 8007b3e:	4929      	ldr	r1, [pc, #164]	; (8007be4 <key_com_motor_ctrl_step+0x2b8>)
 8007b40:	4853      	ldr	r0, [pc, #332]	; (8007c90 <key_com_motor_ctrl_step+0x364>)
 8007b42:	f000 f99f 	bl	8007e84 <com_process>
                (&(sys_regs.holdings[37])), &rtb_ch3_com_long_up);
    com_process((&(sys_regs.holdings[122])), (&(sys_regs.holdings[132])), (&(sys_regs.inputs[132])), (&(sys_regs.inputs[142])),
 8007b46:	f107 0312 	add.w	r3, r7, #18
 8007b4a:	9301      	str	r3, [sp, #4]
 8007b4c:	4b1a      	ldr	r3, [pc, #104]	; (8007bb8 <key_com_motor_ctrl_step+0x28c>)
 8007b4e:	9300      	str	r3, [sp, #0]
 8007b50:	4b26      	ldr	r3, [pc, #152]	; (8007bec <key_com_motor_ctrl_step+0x2c0>)
 8007b52:	4a50      	ldr	r2, [pc, #320]	; (8007c94 <key_com_motor_ctrl_step+0x368>)
 8007b54:	4927      	ldr	r1, [pc, #156]	; (8007bf4 <key_com_motor_ctrl_step+0x2c8>)
 8007b56:	4850      	ldr	r0, [pc, #320]	; (8007c98 <key_com_motor_ctrl_step+0x36c>)
 8007b58:	f000 f994 	bl	8007e84 <com_process>
                (&(sys_regs.holdings[37])), &rtb_ch3_com_stop);
    com_process((&(sys_regs.holdings[123])), (&(sys_regs.holdings[133])), (&(sys_regs.inputs[133])), (&(sys_regs.inputs[143])),
 8007b5c:	f107 0310 	add.w	r3, r7, #16
 8007b60:	9301      	str	r3, [sp, #4]
 8007b62:	4b15      	ldr	r3, [pc, #84]	; (8007bb8 <key_com_motor_ctrl_step+0x28c>)
 8007b64:	9300      	str	r3, [sp, #0]
 8007b66:	4b25      	ldr	r3, [pc, #148]	; (8007bfc <key_com_motor_ctrl_step+0x2d0>)
 8007b68:	4a4c      	ldr	r2, [pc, #304]	; (8007c9c <key_com_motor_ctrl_step+0x370>)
 8007b6a:	4926      	ldr	r1, [pc, #152]	; (8007c04 <key_com_motor_ctrl_step+0x2d8>)
 8007b6c:	484c      	ldr	r0, [pc, #304]	; (8007ca0 <key_com_motor_ctrl_step+0x374>)
 8007b6e:	f000 f989 	bl	8007e84 <com_process>
                (&(sys_regs.holdings[37])), &rtb_ch3_com_short_down);
    com_process((&(sys_regs.holdings[124])), (&(sys_regs.holdings[134])), (&(sys_regs.inputs[134])), (&(sys_regs.inputs[144])),
 8007b72:	f107 030e 	add.w	r3, r7, #14
 8007b76:	9301      	str	r3, [sp, #4]
 8007b78:	4b0f      	ldr	r3, [pc, #60]	; (8007bb8 <key_com_motor_ctrl_step+0x28c>)
 8007b7a:	9300      	str	r3, [sp, #0]
 8007b7c:	4b23      	ldr	r3, [pc, #140]	; (8007c0c <key_com_motor_ctrl_step+0x2e0>)
 8007b7e:	4a49      	ldr	r2, [pc, #292]	; (8007ca4 <key_com_motor_ctrl_step+0x378>)
 8007b80:	4924      	ldr	r1, [pc, #144]	; (8007c14 <key_com_motor_ctrl_step+0x2e8>)
 8007b82:	4849      	ldr	r0, [pc, #292]	; (8007ca8 <key_com_motor_ctrl_step+0x37c>)
 8007b84:	f000 f97e 	bl	8007e84 <com_process>
                (&(sys_regs.holdings[37])), &rtb_ch3_com_long_down);
    motor_ctrl(&rtb_key5, &rtb_key6, &rtb_ch3_com_short_up, &rtb_ch3_com_long_up, &rtb_ch3_com_stop, &rtb_ch3_com_short_down,
 8007b88:	f107 0414 	add.w	r4, r7, #20
 8007b8c:	f107 0216 	add.w	r2, r7, #22
 8007b90:	f107 0118 	add.w	r1, r7, #24
 8007b94:	f107 001a 	add.w	r0, r7, #26
 8007b98:	4b44      	ldr	r3, [pc, #272]	; (8007cac <key_com_motor_ctrl_step+0x380>)
 8007b9a:	930a      	str	r3, [sp, #40]	; 0x28
 8007b9c:	4b44      	ldr	r3, [pc, #272]	; (8007cb0 <key_com_motor_ctrl_step+0x384>)
 8007b9e:	9309      	str	r3, [sp, #36]	; 0x24
 8007ba0:	4b44      	ldr	r3, [pc, #272]	; (8007cb4 <key_com_motor_ctrl_step+0x388>)
 8007ba2:	9308      	str	r3, [sp, #32]
 8007ba4:	4b20      	ldr	r3, [pc, #128]	; (8007c28 <key_com_motor_ctrl_step+0x2fc>)
 8007ba6:	9307      	str	r3, [sp, #28]
 8007ba8:	4b20      	ldr	r3, [pc, #128]	; (8007c2c <key_com_motor_ctrl_step+0x300>)
 8007baa:	9306      	str	r3, [sp, #24]
 8007bac:	4b20      	ldr	r3, [pc, #128]	; (8007c30 <key_com_motor_ctrl_step+0x304>)
 8007bae:	9305      	str	r3, [sp, #20]
 8007bb0:	4b20      	ldr	r3, [pc, #128]	; (8007c34 <key_com_motor_ctrl_step+0x308>)
 8007bb2:	9304      	str	r3, [sp, #16]
 8007bb4:	e080      	b.n	8007cb8 <key_com_motor_ctrl_step+0x38c>
 8007bb6:	bf00      	nop
 8007bb8:	20002d66 	.word	0x20002d66
 8007bbc:	20002bf4 	.word	0x20002bf4
 8007bc0:	20002be4 	.word	0x20002be4
 8007bc4:	20002bf6 	.word	0x20002bf6
 8007bc8:	20002be6 	.word	0x20002be6
 8007bcc:	20002c34 	.word	0x20002c34
 8007bd0:	20002c0c 	.word	0x20002c0c
 8007bd4:	20002e20 	.word	0x20002e20
 8007bd8:	20002df8 	.word	0x20002df8
 8007bdc:	20002c36 	.word	0x20002c36
 8007be0:	20002c0e 	.word	0x20002c0e
 8007be4:	20002e22 	.word	0x20002e22
 8007be8:	20002dfa 	.word	0x20002dfa
 8007bec:	20002c38 	.word	0x20002c38
 8007bf0:	20002c10 	.word	0x20002c10
 8007bf4:	20002e24 	.word	0x20002e24
 8007bf8:	20002dfc 	.word	0x20002dfc
 8007bfc:	20002c3a 	.word	0x20002c3a
 8007c00:	20002c12 	.word	0x20002c12
 8007c04:	20002e26 	.word	0x20002e26
 8007c08:	20002dfe 	.word	0x20002dfe
 8007c0c:	20002c3c 	.word	0x20002c3c
 8007c10:	20002c14 	.word	0x20002c14
 8007c14:	20002e28 	.word	0x20002e28
 8007c18:	20002e00 	.word	0x20002e00
 8007c1c:	20002fe0 	.word	0x20002fe0
 8007c20:	20003042 	.word	0x20003042
 8007c24:	20003040 	.word	0x20003040
 8007c28:	20002dec 	.word	0x20002dec
 8007c2c:	20002dea 	.word	0x20002dea
 8007c30:	20002de8 	.word	0x20002de8
 8007c34:	20002de6 	.word	0x20002de6
 8007c38:	20002de4 	.word	0x20002de4
 8007c3c:	20003030 	.word	0x20003030
 8007c40:	20002be8 	.word	0x20002be8
 8007c44:	20002bea 	.word	0x20002bea
 8007c48:	20002c16 	.word	0x20002c16
 8007c4c:	20002e02 	.word	0x20002e02
 8007c50:	20002c18 	.word	0x20002c18
 8007c54:	20002e04 	.word	0x20002e04
 8007c58:	20002c1a 	.word	0x20002c1a
 8007c5c:	20002e06 	.word	0x20002e06
 8007c60:	20002c1c 	.word	0x20002c1c
 8007c64:	20002e08 	.word	0x20002e08
 8007c68:	20002c1e 	.word	0x20002c1e
 8007c6c:	20002e0a 	.word	0x20002e0a
 8007c70:	20002ff4 	.word	0x20002ff4
 8007c74:	20003046 	.word	0x20003046
 8007c78:	20003044 	.word	0x20003044
 8007c7c:	20002bec 	.word	0x20002bec
 8007c80:	20002bee 	.word	0x20002bee
 8007c84:	20002c20 	.word	0x20002c20
 8007c88:	20002e0c 	.word	0x20002e0c
 8007c8c:	20002c22 	.word	0x20002c22
 8007c90:	20002e0e 	.word	0x20002e0e
 8007c94:	20002c24 	.word	0x20002c24
 8007c98:	20002e10 	.word	0x20002e10
 8007c9c:	20002c26 	.word	0x20002c26
 8007ca0:	20002e12 	.word	0x20002e12
 8007ca4:	20002c28 	.word	0x20002c28
 8007ca8:	20002e14 	.word	0x20002e14
 8007cac:	20003008 	.word	0x20003008
 8007cb0:	2000304a 	.word	0x2000304a
 8007cb4:	20003048 	.word	0x20003048
 8007cb8:	4b43      	ldr	r3, [pc, #268]	; (8007dc8 <key_com_motor_ctrl_step+0x49c>)
 8007cba:	9303      	str	r3, [sp, #12]
 8007cbc:	f107 030e 	add.w	r3, r7, #14
 8007cc0:	9302      	str	r3, [sp, #8]
 8007cc2:	f107 0310 	add.w	r3, r7, #16
 8007cc6:	9301      	str	r3, [sp, #4]
 8007cc8:	f107 0312 	add.w	r3, r7, #18
 8007ccc:	9300      	str	r3, [sp, #0]
 8007cce:	4623      	mov	r3, r4
 8007cd0:	f000 fa98 	bl	8008204 <motor_ctrl>
               &rtb_ch3_com_long_down, (&(sys_regs.holdings[100])), (&(sys_regs.holdings[101])), (&(sys_regs.holdings[102])),
               (&(sys_regs.holdings[103])), (&(sys_regs.holdings[104])), &key_com_motor_ctrl_B.relay5, &key_com_motor_ctrl_B.relay6,
               &(key_com_motor_ctrl_DW.channel3_InstanceData.rtdw));
    relay[4] = key_com_motor_ctrl_B.relay5;
 8007cd4:	4b3d      	ldr	r3, [pc, #244]	; (8007dcc <key_com_motor_ctrl_step+0x4a0>)
 8007cd6:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8007cda:	4b3d      	ldr	r3, [pc, #244]	; (8007dd0 <key_com_motor_ctrl_step+0x4a4>)
 8007cdc:	811a      	strh	r2, [r3, #8]
    relay[5] = key_com_motor_ctrl_B.relay6;
 8007cde:	4b3b      	ldr	r3, [pc, #236]	; (8007dcc <key_com_motor_ctrl_step+0x4a0>)
 8007ce0:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8007ce4:	4b3a      	ldr	r3, [pc, #232]	; (8007dd0 <key_com_motor_ctrl_step+0x4a4>)
 8007ce6:	815a      	strh	r2, [r3, #10]
    key_process((&(sys_regs.inputs[106])), (&(sys_regs.inputs[108])), (&(sys_regs.holdings[37])), &rtb_key7);
 8007ce8:	f107 030c 	add.w	r3, r7, #12
 8007cec:	4a39      	ldr	r2, [pc, #228]	; (8007dd4 <key_com_motor_ctrl_step+0x4a8>)
 8007cee:	493a      	ldr	r1, [pc, #232]	; (8007dd8 <key_com_motor_ctrl_step+0x4ac>)
 8007cf0:	483a      	ldr	r0, [pc, #232]	; (8007ddc <key_com_motor_ctrl_step+0x4b0>)
 8007cf2:	f000 f923 	bl	8007f3c <key_process>
    key_process((&(sys_regs.inputs[107])), (&(sys_regs.inputs[109])), (&(sys_regs.holdings[37])), &rtb_key8);
 8007cf6:	f107 030a 	add.w	r3, r7, #10
 8007cfa:	4a36      	ldr	r2, [pc, #216]	; (8007dd4 <key_com_motor_ctrl_step+0x4a8>)
 8007cfc:	4938      	ldr	r1, [pc, #224]	; (8007de0 <key_com_motor_ctrl_step+0x4b4>)
 8007cfe:	4839      	ldr	r0, [pc, #228]	; (8007de4 <key_com_motor_ctrl_step+0x4b8>)
 8007d00:	f000 f91c 	bl	8007f3c <key_process>
    com_process((&(sys_regs.holdings[125])), (&(sys_regs.holdings[130])), (&(sys_regs.inputs[135])), (&(sys_regs.inputs[140])),
 8007d04:	f107 0308 	add.w	r3, r7, #8
 8007d08:	9301      	str	r3, [sp, #4]
 8007d0a:	4b32      	ldr	r3, [pc, #200]	; (8007dd4 <key_com_motor_ctrl_step+0x4a8>)
 8007d0c:	9300      	str	r3, [sp, #0]
 8007d0e:	4b36      	ldr	r3, [pc, #216]	; (8007de8 <key_com_motor_ctrl_step+0x4bc>)
 8007d10:	4a36      	ldr	r2, [pc, #216]	; (8007dec <key_com_motor_ctrl_step+0x4c0>)
 8007d12:	4937      	ldr	r1, [pc, #220]	; (8007df0 <key_com_motor_ctrl_step+0x4c4>)
 8007d14:	4837      	ldr	r0, [pc, #220]	; (8007df4 <key_com_motor_ctrl_step+0x4c8>)
 8007d16:	f000 f8b5 	bl	8007e84 <com_process>
                (&(sys_regs.holdings[37])), &rtb_ch4_com_short_up);
    com_process((&(sys_regs.holdings[126])), (&(sys_regs.holdings[131])), (&(sys_regs.inputs[136])), (&(sys_regs.inputs[141])),
 8007d1a:	1dbb      	adds	r3, r7, #6
 8007d1c:	9301      	str	r3, [sp, #4]
 8007d1e:	4b2d      	ldr	r3, [pc, #180]	; (8007dd4 <key_com_motor_ctrl_step+0x4a8>)
 8007d20:	9300      	str	r3, [sp, #0]
 8007d22:	4b35      	ldr	r3, [pc, #212]	; (8007df8 <key_com_motor_ctrl_step+0x4cc>)
 8007d24:	4a35      	ldr	r2, [pc, #212]	; (8007dfc <key_com_motor_ctrl_step+0x4d0>)
 8007d26:	4936      	ldr	r1, [pc, #216]	; (8007e00 <key_com_motor_ctrl_step+0x4d4>)
 8007d28:	4836      	ldr	r0, [pc, #216]	; (8007e04 <key_com_motor_ctrl_step+0x4d8>)
 8007d2a:	f000 f8ab 	bl	8007e84 <com_process>
                (&(sys_regs.holdings[37])), &rtb_ch4_com_long_up);
    com_process((&(sys_regs.holdings[127])), (&(sys_regs.holdings[132])), (&(sys_regs.inputs[137])), (&(sys_regs.inputs[142])),
 8007d2e:	1d3b      	adds	r3, r7, #4
 8007d30:	9301      	str	r3, [sp, #4]
 8007d32:	4b28      	ldr	r3, [pc, #160]	; (8007dd4 <key_com_motor_ctrl_step+0x4a8>)
 8007d34:	9300      	str	r3, [sp, #0]
 8007d36:	4b34      	ldr	r3, [pc, #208]	; (8007e08 <key_com_motor_ctrl_step+0x4dc>)
 8007d38:	4a34      	ldr	r2, [pc, #208]	; (8007e0c <key_com_motor_ctrl_step+0x4e0>)
 8007d3a:	4935      	ldr	r1, [pc, #212]	; (8007e10 <key_com_motor_ctrl_step+0x4e4>)
 8007d3c:	4835      	ldr	r0, [pc, #212]	; (8007e14 <key_com_motor_ctrl_step+0x4e8>)
 8007d3e:	f000 f8a1 	bl	8007e84 <com_process>
                (&(sys_regs.holdings[37])), &rtb_ch4_com_stop);
    com_process((&(sys_regs.holdings[128])), (&(sys_regs.holdings[133])), (&(sys_regs.inputs[138])), (&(sys_regs.inputs[143])),
 8007d42:	1cbb      	adds	r3, r7, #2
 8007d44:	9301      	str	r3, [sp, #4]
 8007d46:	4b23      	ldr	r3, [pc, #140]	; (8007dd4 <key_com_motor_ctrl_step+0x4a8>)
 8007d48:	9300      	str	r3, [sp, #0]
 8007d4a:	4b33      	ldr	r3, [pc, #204]	; (8007e18 <key_com_motor_ctrl_step+0x4ec>)
 8007d4c:	4a33      	ldr	r2, [pc, #204]	; (8007e1c <key_com_motor_ctrl_step+0x4f0>)
 8007d4e:	4934      	ldr	r1, [pc, #208]	; (8007e20 <key_com_motor_ctrl_step+0x4f4>)
 8007d50:	4834      	ldr	r0, [pc, #208]	; (8007e24 <key_com_motor_ctrl_step+0x4f8>)
 8007d52:	f000 f897 	bl	8007e84 <com_process>
                (&(sys_regs.holdings[37])), &rtb_ch4_com_short_down);
    com_process((&(sys_regs.holdings[129])), (&(sys_regs.holdings[134])), (&(sys_regs.inputs[139])), (&(sys_regs.inputs[144])),
 8007d56:	463b      	mov	r3, r7
 8007d58:	9301      	str	r3, [sp, #4]
 8007d5a:	4b1e      	ldr	r3, [pc, #120]	; (8007dd4 <key_com_motor_ctrl_step+0x4a8>)
 8007d5c:	9300      	str	r3, [sp, #0]
 8007d5e:	4b32      	ldr	r3, [pc, #200]	; (8007e28 <key_com_motor_ctrl_step+0x4fc>)
 8007d60:	4a32      	ldr	r2, [pc, #200]	; (8007e2c <key_com_motor_ctrl_step+0x500>)
 8007d62:	4933      	ldr	r1, [pc, #204]	; (8007e30 <key_com_motor_ctrl_step+0x504>)
 8007d64:	4833      	ldr	r0, [pc, #204]	; (8007e34 <key_com_motor_ctrl_step+0x508>)
 8007d66:	f000 f88d 	bl	8007e84 <com_process>
                (&(sys_regs.holdings[37])), &rtb_ch4_com_long_down);
    motor_ctrl(&rtb_key7, &rtb_key8, &rtb_ch4_com_short_up, &rtb_ch4_com_long_up, &rtb_ch4_com_stop, &rtb_ch4_com_short_down,
 8007d6a:	1dbc      	adds	r4, r7, #6
 8007d6c:	f107 0208 	add.w	r2, r7, #8
 8007d70:	f107 010a 	add.w	r1, r7, #10
 8007d74:	f107 000c 	add.w	r0, r7, #12
 8007d78:	4b2f      	ldr	r3, [pc, #188]	; (8007e38 <key_com_motor_ctrl_step+0x50c>)
 8007d7a:	930a      	str	r3, [sp, #40]	; 0x28
 8007d7c:	4b2f      	ldr	r3, [pc, #188]	; (8007e3c <key_com_motor_ctrl_step+0x510>)
 8007d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8007d80:	4b2f      	ldr	r3, [pc, #188]	; (8007e40 <key_com_motor_ctrl_step+0x514>)
 8007d82:	9308      	str	r3, [sp, #32]
 8007d84:	4b2f      	ldr	r3, [pc, #188]	; (8007e44 <key_com_motor_ctrl_step+0x518>)
 8007d86:	9307      	str	r3, [sp, #28]
 8007d88:	4b2f      	ldr	r3, [pc, #188]	; (8007e48 <key_com_motor_ctrl_step+0x51c>)
 8007d8a:	9306      	str	r3, [sp, #24]
 8007d8c:	4b2f      	ldr	r3, [pc, #188]	; (8007e4c <key_com_motor_ctrl_step+0x520>)
 8007d8e:	9305      	str	r3, [sp, #20]
 8007d90:	4b2f      	ldr	r3, [pc, #188]	; (8007e50 <key_com_motor_ctrl_step+0x524>)
 8007d92:	9304      	str	r3, [sp, #16]
 8007d94:	4b0c      	ldr	r3, [pc, #48]	; (8007dc8 <key_com_motor_ctrl_step+0x49c>)
 8007d96:	9303      	str	r3, [sp, #12]
 8007d98:	463b      	mov	r3, r7
 8007d9a:	9302      	str	r3, [sp, #8]
 8007d9c:	1cbb      	adds	r3, r7, #2
 8007d9e:	9301      	str	r3, [sp, #4]
 8007da0:	1d3b      	adds	r3, r7, #4
 8007da2:	9300      	str	r3, [sp, #0]
 8007da4:	4623      	mov	r3, r4
 8007da6:	f000 fa2d 	bl	8008204 <motor_ctrl>
               &rtb_ch4_com_long_down, (&(sys_regs.holdings[100])), (&(sys_regs.holdings[101])), (&(sys_regs.holdings[102])),
               (&(sys_regs.holdings[103])), (&(sys_regs.holdings[104])), &key_com_motor_ctrl_B.relay7, &key_com_motor_ctrl_B.relay8,
               &(key_com_motor_ctrl_DW.channel4_InstanceData.rtdw));
    relay[6] = key_com_motor_ctrl_B.relay7;
 8007daa:	4b08      	ldr	r3, [pc, #32]	; (8007dcc <key_com_motor_ctrl_step+0x4a0>)
 8007dac:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8007db0:	4b07      	ldr	r3, [pc, #28]	; (8007dd0 <key_com_motor_ctrl_step+0x4a4>)
 8007db2:	819a      	strh	r2, [r3, #12]
    relay[7] = key_com_motor_ctrl_B.relay8;
 8007db4:	4b05      	ldr	r3, [pc, #20]	; (8007dcc <key_com_motor_ctrl_step+0x4a0>)
 8007db6:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8007dba:	4b05      	ldr	r3, [pc, #20]	; (8007dd0 <key_com_motor_ctrl_step+0x4a4>)
 8007dbc:	81da      	strh	r2, [r3, #14]
}
 8007dbe:	bf00      	nop
 8007dc0:	373c      	adds	r7, #60	; 0x3c
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd90      	pop	{r4, r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	20002de4 	.word	0x20002de4
 8007dcc:	20003040 	.word	0x20003040
 8007dd0:	20003030 	.word	0x20003030
 8007dd4:	20002d66 	.word	0x20002d66
 8007dd8:	20002bf4 	.word	0x20002bf4
 8007ddc:	20002bf0 	.word	0x20002bf0
 8007de0:	20002bf6 	.word	0x20002bf6
 8007de4:	20002bf2 	.word	0x20002bf2
 8007de8:	20002c34 	.word	0x20002c34
 8007dec:	20002c2a 	.word	0x20002c2a
 8007df0:	20002e20 	.word	0x20002e20
 8007df4:	20002e16 	.word	0x20002e16
 8007df8:	20002c36 	.word	0x20002c36
 8007dfc:	20002c2c 	.word	0x20002c2c
 8007e00:	20002e22 	.word	0x20002e22
 8007e04:	20002e18 	.word	0x20002e18
 8007e08:	20002c38 	.word	0x20002c38
 8007e0c:	20002c2e 	.word	0x20002c2e
 8007e10:	20002e24 	.word	0x20002e24
 8007e14:	20002e1a 	.word	0x20002e1a
 8007e18:	20002c3a 	.word	0x20002c3a
 8007e1c:	20002c30 	.word	0x20002c30
 8007e20:	20002e26 	.word	0x20002e26
 8007e24:	20002e1c 	.word	0x20002e1c
 8007e28:	20002c3c 	.word	0x20002c3c
 8007e2c:	20002c32 	.word	0x20002c32
 8007e30:	20002e28 	.word	0x20002e28
 8007e34:	20002e1e 	.word	0x20002e1e
 8007e38:	2000301c 	.word	0x2000301c
 8007e3c:	2000304e 	.word	0x2000304e
 8007e40:	2000304c 	.word	0x2000304c
 8007e44:	20002dec 	.word	0x20002dec
 8007e48:	20002dea 	.word	0x20002dea
 8007e4c:	20002de8 	.word	0x20002de8
 8007e50:	20002de6 	.word	0x20002de6

08007e54 <key_com_motor_ctrl_initialize>:

void key_com_motor_ctrl_initialize(void)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	af00      	add	r7, sp, #0
    motor_ctrl_Init(&(key_com_motor_ctrl_DW.channel1_InstanceData.rtdw));
 8007e58:	4806      	ldr	r0, [pc, #24]	; (8007e74 <key_com_motor_ctrl_initialize+0x20>)
 8007e5a:	f000 f9c5 	bl	80081e8 <motor_ctrl_Init>
    motor_ctrl_Init(&(key_com_motor_ctrl_DW.channel2_InstanceData.rtdw));
 8007e5e:	4806      	ldr	r0, [pc, #24]	; (8007e78 <key_com_motor_ctrl_initialize+0x24>)
 8007e60:	f000 f9c2 	bl	80081e8 <motor_ctrl_Init>
    motor_ctrl_Init(&(key_com_motor_ctrl_DW.channel3_InstanceData.rtdw));
 8007e64:	4805      	ldr	r0, [pc, #20]	; (8007e7c <key_com_motor_ctrl_initialize+0x28>)
 8007e66:	f000 f9bf 	bl	80081e8 <motor_ctrl_Init>
    motor_ctrl_Init(&(key_com_motor_ctrl_DW.channel4_InstanceData.rtdw));
 8007e6a:	4805      	ldr	r0, [pc, #20]	; (8007e80 <key_com_motor_ctrl_initialize+0x2c>)
 8007e6c:	f000 f9bc 	bl	80081e8 <motor_ctrl_Init>
}
 8007e70:	bf00      	nop
 8007e72:	bd80      	pop	{r7, pc}
 8007e74:	20002fe0 	.word	0x20002fe0
 8007e78:	20002ff4 	.word	0x20002ff4
 8007e7c:	20003008 	.word	0x20003008
 8007e80:	2000301c 	.word	0x2000301c

08007e84 <com_process>:
#include "com_process.h"

void com_process(const int16_T *rtu_ch_com, const int16_T *rtu_group_com, const int16_T *rtu_ch_rmt, const int16_T *rtu_group_rmt, const
                 int16_T *rtu_com_only, int16_T *rty_ch_com_signal)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b087      	sub	sp, #28
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	607a      	str	r2, [r7, #4]
 8007e90:	603b      	str	r3, [r7, #0]
    boolean_T rtb_AND2;
    boolean_T rtb_AND5;
    boolean_T rtb_DataTypeConversion4;
    rtb_DataTypeConversion4 = (*rtu_ch_com != 0);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	bf14      	ite	ne
 8007e9c:	2301      	movne	r3, #1
 8007e9e:	2300      	moveq	r3, #0
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	75fb      	strb	r3, [r7, #23]
    rtb_AND5 = (*rtu_group_com != 0);
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	bf14      	ite	ne
 8007eae:	2301      	movne	r3, #1
 8007eb0:	2300      	moveq	r3, #0
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	75bb      	strb	r3, [r7, #22]
    rtb_AND2 = (rtb_DataTypeConversion4 || rtb_AND5);
 8007eb6:	7dfb      	ldrb	r3, [r7, #23]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d102      	bne.n	8007ec2 <com_process+0x3e>
 8007ebc:	7dbb      	ldrb	r3, [r7, #22]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d001      	beq.n	8007ec6 <com_process+0x42>
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e000      	b.n	8007ec8 <com_process+0x44>
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	757b      	strb	r3, [r7, #21]
    rtb_AND5 = (*rtu_ch_rmt != 0);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	bf14      	ite	ne
 8007ed4:	2301      	movne	r3, #1
 8007ed6:	2300      	moveq	r3, #0
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	75bb      	strb	r3, [r7, #22]
    rtb_DataTypeConversion4 = (*rtu_group_rmt != 0);
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	bf14      	ite	ne
 8007ee6:	2301      	movne	r3, #1
 8007ee8:	2300      	moveq	r3, #0
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	75fb      	strb	r3, [r7, #23]
    rtb_DataTypeConversion4 = (rtb_AND5 || rtb_DataTypeConversion4);
 8007eee:	7dbb      	ldrb	r3, [r7, #22]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d102      	bne.n	8007efa <com_process+0x76>
 8007ef4:	7dfb      	ldrb	r3, [r7, #23]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d001      	beq.n	8007efe <com_process+0x7a>
 8007efa:	2301      	movs	r3, #1
 8007efc:	e000      	b.n	8007f00 <com_process+0x7c>
 8007efe:	2300      	movs	r3, #0
 8007f00:	75fb      	strb	r3, [r7, #23]
    rtb_AND5 = (*rtu_com_only != 0);
 8007f02:	6a3b      	ldr	r3, [r7, #32]
 8007f04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	bf14      	ite	ne
 8007f0c:	2301      	movne	r3, #1
 8007f0e:	2300      	moveq	r3, #0
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	75bb      	strb	r3, [r7, #22]
    *rty_ch_com_signal = (int16_T)(rtb_AND2 || (rtb_DataTypeConversion4 && (!rtb_AND5)));
 8007f14:	7d7b      	ldrb	r3, [r7, #21]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d105      	bne.n	8007f26 <com_process+0xa2>
 8007f1a:	7dfb      	ldrb	r3, [r7, #23]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d004      	beq.n	8007f2a <com_process+0xa6>
 8007f20:	7dbb      	ldrb	r3, [r7, #22]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d101      	bne.n	8007f2a <com_process+0xa6>
 8007f26:	2301      	movs	r3, #1
 8007f28:	e000      	b.n	8007f2c <com_process+0xa8>
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	b21a      	sxth	r2, r3
 8007f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f30:	801a      	strh	r2, [r3, #0]
}
 8007f32:	bf00      	nop
 8007f34:	371c      	adds	r7, #28
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bc80      	pop	{r7}
 8007f3a:	4770      	bx	lr

08007f3c <key_process>:
#include "key_process.h"

void key_process(const int16_T *rtu_ch_key, const int16_T *rtu_group_key, const int16_T *rtu_com_only, int16_T *rty_key_signal)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b087      	sub	sp, #28
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	607a      	str	r2, [r7, #4]
 8007f48:	603b      	str	r3, [r7, #0]
    boolean_T rtb_AND;
    boolean_T rtb_DataTypeConversion38;
    rtb_DataTypeConversion38 = (*rtu_ch_key != 0);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	bf14      	ite	ne
 8007f54:	2301      	movne	r3, #1
 8007f56:	2300      	moveq	r3, #0
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	75fb      	strb	r3, [r7, #23]
    rtb_AND = (*rtu_group_key != 0);
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	bf14      	ite	ne
 8007f66:	2301      	movne	r3, #1
 8007f68:	2300      	moveq	r3, #0
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	75bb      	strb	r3, [r7, #22]
    rtb_DataTypeConversion38 = (rtb_DataTypeConversion38 || rtb_AND);
 8007f6e:	7dfb      	ldrb	r3, [r7, #23]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d102      	bne.n	8007f7a <key_process+0x3e>
 8007f74:	7dbb      	ldrb	r3, [r7, #22]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d001      	beq.n	8007f7e <key_process+0x42>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e000      	b.n	8007f80 <key_process+0x44>
 8007f7e:	2300      	movs	r3, #0
 8007f80:	75fb      	strb	r3, [r7, #23]
    rtb_AND = (*rtu_com_only != 0);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	bf14      	ite	ne
 8007f8c:	2301      	movne	r3, #1
 8007f8e:	2300      	moveq	r3, #0
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	75bb      	strb	r3, [r7, #22]
    *rty_key_signal = (int16_T)(rtb_DataTypeConversion38 && (!rtb_AND));
 8007f94:	7dfb      	ldrb	r3, [r7, #23]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d004      	beq.n	8007fa4 <key_process+0x68>
 8007f9a:	7dbb      	ldrb	r3, [r7, #22]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d101      	bne.n	8007fa4 <key_process+0x68>
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e000      	b.n	8007fa6 <key_process+0x6a>
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	b21a      	sxth	r2, r3
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	801a      	strh	r2, [r3, #0]
}
 8007fac:	bf00      	nop
 8007fae:	371c      	adds	r7, #28
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	bc80      	pop	{r7}
 8007fb4:	4770      	bx	lr
	...

08007fb8 <motor_ctrl_MOTOR>:

static void motor_ctrl_MOTOR(const int16_T *Saturation9, const int16_T *Saturation10, const int16_T *Saturation11, int16_T *rty_up_relay,
    int16_T *rty_down_relay, DW_motor_ctrl_f_T *localDW);
static void motor_ctrl_MOTOR(const int16_T *Saturation9, const int16_T *Saturation10, const int16_T *Saturation11, int16_T *rty_up_relay,
    int16_T *rty_down_relay, DW_motor_ctrl_f_T *localDW)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	607a      	str	r2, [r7, #4]
 8007fc4:	603b      	str	r3, [r7, #0]
    switch (localDW->is_MOTOR)
 8007fc6:	69fb      	ldr	r3, [r7, #28]
 8007fc8:	7c9b      	ldrb	r3, [r3, #18]
 8007fca:	3b01      	subs	r3, #1
 8007fcc:	2b06      	cmp	r3, #6
 8007fce:	f200 8106 	bhi.w	80081de <motor_ctrl_MOTOR+0x226>
 8007fd2:	a201      	add	r2, pc, #4	; (adr r2, 8007fd8 <motor_ctrl_MOTOR+0x20>)
 8007fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd8:	08007ff5 	.word	0x08007ff5
 8007fdc:	0800801b 	.word	0x0800801b
 8007fe0:	08008077 	.word	0x08008077
 8007fe4:	080080d3 	.word	0x080080d3
 8007fe8:	08008165 	.word	0x08008165
 8007fec:	08008183 	.word	0x08008183
 8007ff0:	080081a1 	.word	0x080081a1
    {
      case motor_ctrl_IN_DOWN_TO_LONGUP:
        if (localDW->temporalCounter_i3 >= (uint16_T)*Saturation11)
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	891a      	ldrh	r2, [r3, #8]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	429a      	cmp	r2, r3
 8008002:	f0c0 80df 	bcc.w	80081c4 <motor_ctrl_MOTOR+0x20c>
        {
            localDW->is_MOTOR = motor_ctrl_IN_LONG_UP;
 8008006:	69fb      	ldr	r3, [r7, #28]
 8008008:	2203      	movs	r2, #3
 800800a:	749a      	strb	r2, [r3, #18]
            localDW->temporalCounter_i3 = 0U;
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	2200      	movs	r2, #0
 8008010:	811a      	strh	r2, [r3, #8]
            *rty_up_relay = 1;
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	2201      	movs	r2, #1
 8008016:	801a      	strh	r2, [r3, #0]
        }
        break;
 8008018:	e0d4      	b.n	80081c4 <motor_ctrl_MOTOR+0x20c>

      case motor_ctrl_IN_LONG_DOWN:
        if ((localDW->sfEvent == motor_ctrl_event_down_key_click) || (localDW->sfEvent == motor_ctrl_event_up_key_click) ||
 800801a:	69fb      	ldr	r3, [r7, #28]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00f      	beq.n	8008042 <motor_ctrl_MOTOR+0x8a>
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	2b07      	cmp	r3, #7
 8008028:	d00b      	beq.n	8008042 <motor_ctrl_MOTOR+0x8a>
                (localDW->sfEvent == motor_ctrl_event_stop_event) || (localDW->temporalCounter_i3 >= (uint16_T)*Saturation9))
 800802a:	69fb      	ldr	r3, [r7, #28]
 800802c:	681b      	ldr	r3, [r3, #0]
        if ((localDW->sfEvent == motor_ctrl_event_down_key_click) || (localDW->sfEvent == motor_ctrl_event_up_key_click) ||
 800802e:	2b06      	cmp	r3, #6
 8008030:	d007      	beq.n	8008042 <motor_ctrl_MOTOR+0x8a>
                (localDW->sfEvent == motor_ctrl_event_stop_event) || (localDW->temporalCounter_i3 >= (uint16_T)*Saturation9))
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	891a      	ldrh	r2, [r3, #8]
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f9b3 3000 	ldrsh.w	r3, [r3]
 800803c:	b29b      	uxth	r3, r3
 800803e:	429a      	cmp	r2, r3
 8008040:	d306      	bcc.n	8008050 <motor_ctrl_MOTOR+0x98>
        {
            *rty_down_relay = 0;
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	2200      	movs	r2, #0
 8008046:	801a      	strh	r2, [r3, #0]
            localDW->is_MOTOR = motor_ctrl_IN_OFF;
 8008048:	69fb      	ldr	r3, [r7, #28]
 800804a:	2204      	movs	r2, #4
 800804c:	749a      	strb	r2, [r3, #18]
        {
            *rty_down_relay = 0;
            localDW->is_MOTOR = motor_ctrl_IN_DOWN_TO_LONGUP;
            localDW->temporalCounter_i3 = 0U;
        }
        break;
 800804e:	e0bb      	b.n	80081c8 <motor_ctrl_MOTOR+0x210>
        else if ((localDW->sfEvent == motor_c_event_up_key_long_press) || (localDW->sfEvent == motor_ctrl_event_long_up_event))
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	2b08      	cmp	r3, #8
 8008056:	d004      	beq.n	8008062 <motor_ctrl_MOTOR+0xaa>
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2b03      	cmp	r3, #3
 800805e:	f040 80b3 	bne.w	80081c8 <motor_ctrl_MOTOR+0x210>
            *rty_down_relay = 0;
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	2200      	movs	r2, #0
 8008066:	801a      	strh	r2, [r3, #0]
            localDW->is_MOTOR = motor_ctrl_IN_DOWN_TO_LONGUP;
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	2201      	movs	r2, #1
 800806c:	749a      	strb	r2, [r3, #18]
            localDW->temporalCounter_i3 = 0U;
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	2200      	movs	r2, #0
 8008072:	811a      	strh	r2, [r3, #8]
        break;
 8008074:	e0a8      	b.n	80081c8 <motor_ctrl_MOTOR+0x210>

      case motor_ctrl_IN_LONG_UP:
        if ((localDW->sfEvent == motor_event_down_key_long_press) || (localDW->sfEvent == motor_ctr_event_long_down_event))
 8008076:	69fb      	ldr	r3, [r7, #28]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2b01      	cmp	r3, #1
 800807c:	d003      	beq.n	8008086 <motor_ctrl_MOTOR+0xce>
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2b02      	cmp	r3, #2
 8008084:	d109      	bne.n	800809a <motor_ctrl_MOTOR+0xe2>
        {
            *rty_up_relay = 0;
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	2200      	movs	r2, #0
 800808a:	801a      	strh	r2, [r3, #0]
            localDW->is_MOTOR = motor_ctrl_IN_UP_TO_LONGDOWN;
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	2207      	movs	r2, #7
 8008090:	749a      	strb	r2, [r3, #18]
            localDW->temporalCounter_i3 = 0U;
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	2200      	movs	r2, #0
 8008096:	811a      	strh	r2, [r3, #8]
                 (localDW->sfEvent == motor_ctrl_event_stop_event) || (localDW->temporalCounter_i3 >= (uint16_T)*Saturation9))
        {
            *rty_up_relay = 0;
            localDW->is_MOTOR = motor_ctrl_IN_OFF;
        }
        break;
 8008098:	e098      	b.n	80081cc <motor_ctrl_MOTOR+0x214>
        else if ((localDW->sfEvent == motor_ctrl_event_up_key_click) || (localDW->sfEvent == motor_ctrl_event_down_key_click) ||
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2b07      	cmp	r3, #7
 80080a0:	d010      	beq.n	80080c4 <motor_ctrl_MOTOR+0x10c>
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d00c      	beq.n	80080c4 <motor_ctrl_MOTOR+0x10c>
                 (localDW->sfEvent == motor_ctrl_event_stop_event) || (localDW->temporalCounter_i3 >= (uint16_T)*Saturation9))
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	681b      	ldr	r3, [r3, #0]
        else if ((localDW->sfEvent == motor_ctrl_event_up_key_click) || (localDW->sfEvent == motor_ctrl_event_down_key_click) ||
 80080ae:	2b06      	cmp	r3, #6
 80080b0:	d008      	beq.n	80080c4 <motor_ctrl_MOTOR+0x10c>
                 (localDW->sfEvent == motor_ctrl_event_stop_event) || (localDW->temporalCounter_i3 >= (uint16_T)*Saturation9))
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	891a      	ldrh	r2, [r3, #8]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80080bc:	b29b      	uxth	r3, r3
 80080be:	429a      	cmp	r2, r3
 80080c0:	f0c0 8084 	bcc.w	80081cc <motor_ctrl_MOTOR+0x214>
            *rty_up_relay = 0;
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	2200      	movs	r2, #0
 80080c8:	801a      	strh	r2, [r3, #0]
            localDW->is_MOTOR = motor_ctrl_IN_OFF;
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	2204      	movs	r2, #4
 80080ce:	749a      	strb	r2, [r3, #18]
        break;
 80080d0:	e07c      	b.n	80081cc <motor_ctrl_MOTOR+0x214>

      case motor_ctrl_IN_OFF:
        if ((localDW->sfEvent == motor_ctrl_event_up_key_click) || (localDW->sfEvent == motor_ctrl_event_short_up_event))
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	2b07      	cmp	r3, #7
 80080d8:	d003      	beq.n	80080e2 <motor_ctrl_MOTOR+0x12a>
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	2b05      	cmp	r3, #5
 80080e0:	d109      	bne.n	80080f6 <motor_ctrl_MOTOR+0x13e>
        {
            localDW->is_MOTOR = motor_ctrl_IN_SHORT_UP_g;
 80080e2:	69fb      	ldr	r3, [r7, #28]
 80080e4:	2206      	movs	r2, #6
 80080e6:	749a      	strb	r2, [r3, #18]
            localDW->temporalCounter_i3 = 0U;
 80080e8:	69fb      	ldr	r3, [r7, #28]
 80080ea:	2200      	movs	r2, #0
 80080ec:	811a      	strh	r2, [r3, #8]
            *rty_up_relay = 1;
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	2201      	movs	r2, #1
 80080f2:	801a      	strh	r2, [r3, #0]
 80080f4:	e035      	b.n	8008162 <motor_ctrl_MOTOR+0x1aa>
        }
        else if ((localDW->sfEvent == motor_c_event_up_key_long_press) || (localDW->sfEvent == motor_ctrl_event_long_up_event))
 80080f6:	69fb      	ldr	r3, [r7, #28]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	2b08      	cmp	r3, #8
 80080fc:	d003      	beq.n	8008106 <motor_ctrl_MOTOR+0x14e>
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2b03      	cmp	r3, #3
 8008104:	d109      	bne.n	800811a <motor_ctrl_MOTOR+0x162>
        {
            localDW->is_MOTOR = motor_ctrl_IN_LONG_UP;
 8008106:	69fb      	ldr	r3, [r7, #28]
 8008108:	2203      	movs	r2, #3
 800810a:	749a      	strb	r2, [r3, #18]
            localDW->temporalCounter_i3 = 0U;
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	2200      	movs	r2, #0
 8008110:	811a      	strh	r2, [r3, #8]
            *rty_up_relay = 1;
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	2201      	movs	r2, #1
 8008116:	801a      	strh	r2, [r3, #0]
 8008118:	e023      	b.n	8008162 <motor_ctrl_MOTOR+0x1aa>
        }
        else if ((localDW->sfEvent == motor_ctrl_event_down_key_click) || (localDW->sfEvent == motor_ct_event_short_down_event))
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d003      	beq.n	800812a <motor_ctrl_MOTOR+0x172>
 8008122:	69fb      	ldr	r3, [r7, #28]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	2b04      	cmp	r3, #4
 8008128:	d109      	bne.n	800813e <motor_ctrl_MOTOR+0x186>
        {
            localDW->is_MOTOR = motor_ctrl_IN_SHORT_DOWN_c;
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	2205      	movs	r2, #5
 800812e:	749a      	strb	r2, [r3, #18]
            localDW->temporalCounter_i3 = 0U;
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	2200      	movs	r2, #0
 8008134:	811a      	strh	r2, [r3, #8]
            *rty_down_relay = 1;
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	2201      	movs	r2, #1
 800813a:	801a      	strh	r2, [r3, #0]
 800813c:	e011      	b.n	8008162 <motor_ctrl_MOTOR+0x1aa>
        }
        else if ((localDW->sfEvent == motor_event_down_key_long_press) || (localDW->sfEvent == motor_ctr_event_long_down_event))
 800813e:	69fb      	ldr	r3, [r7, #28]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2b01      	cmp	r3, #1
 8008144:	d003      	beq.n	800814e <motor_ctrl_MOTOR+0x196>
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2b02      	cmp	r3, #2
 800814c:	d140      	bne.n	80081d0 <motor_ctrl_MOTOR+0x218>
        {
            localDW->is_MOTOR = motor_ctrl_IN_LONG_DOWN;
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	2202      	movs	r2, #2
 8008152:	749a      	strb	r2, [r3, #18]
            localDW->temporalCounter_i3 = 0U;
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	2200      	movs	r2, #0
 8008158:	811a      	strh	r2, [r3, #8]
            *rty_down_relay = 1;
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	2201      	movs	r2, #1
 800815e:	801a      	strh	r2, [r3, #0]
        }
        break;
 8008160:	e036      	b.n	80081d0 <motor_ctrl_MOTOR+0x218>
 8008162:	e035      	b.n	80081d0 <motor_ctrl_MOTOR+0x218>

      case motor_ctrl_IN_SHORT_DOWN_c:
        if (localDW->temporalCounter_i3 >= (uint16_T)*Saturation10)
 8008164:	69fb      	ldr	r3, [r7, #28]
 8008166:	891a      	ldrh	r2, [r3, #8]
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800816e:	b29b      	uxth	r3, r3
 8008170:	429a      	cmp	r2, r3
 8008172:	d32f      	bcc.n	80081d4 <motor_ctrl_MOTOR+0x21c>
        {
            *rty_down_relay = 0;
 8008174:	69bb      	ldr	r3, [r7, #24]
 8008176:	2200      	movs	r2, #0
 8008178:	801a      	strh	r2, [r3, #0]
            localDW->is_MOTOR = motor_ctrl_IN_OFF;
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	2204      	movs	r2, #4
 800817e:	749a      	strb	r2, [r3, #18]
        }
        break;
 8008180:	e028      	b.n	80081d4 <motor_ctrl_MOTOR+0x21c>

      case motor_ctrl_IN_SHORT_UP_g:
        if (localDW->temporalCounter_i3 >= (uint16_T)*Saturation10)
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	891a      	ldrh	r2, [r3, #8]
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	f9b3 3000 	ldrsh.w	r3, [r3]
 800818c:	b29b      	uxth	r3, r3
 800818e:	429a      	cmp	r2, r3
 8008190:	d322      	bcc.n	80081d8 <motor_ctrl_MOTOR+0x220>
        {
            *rty_up_relay = 0;
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	2200      	movs	r2, #0
 8008196:	801a      	strh	r2, [r3, #0]
            localDW->is_MOTOR = motor_ctrl_IN_OFF;
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	2204      	movs	r2, #4
 800819c:	749a      	strb	r2, [r3, #18]
        }
        break;
 800819e:	e01b      	b.n	80081d8 <motor_ctrl_MOTOR+0x220>

      case motor_ctrl_IN_UP_TO_LONGDOWN:
        if (localDW->temporalCounter_i3 >= (uint16_T)*Saturation11)
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	891a      	ldrh	r2, [r3, #8]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d315      	bcc.n	80081dc <motor_ctrl_MOTOR+0x224>
        {
            localDW->is_MOTOR = motor_ctrl_IN_LONG_DOWN;
 80081b0:	69fb      	ldr	r3, [r7, #28]
 80081b2:	2202      	movs	r2, #2
 80081b4:	749a      	strb	r2, [r3, #18]
            localDW->temporalCounter_i3 = 0U;
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	2200      	movs	r2, #0
 80081ba:	811a      	strh	r2, [r3, #8]
            *rty_down_relay = 1;
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	2201      	movs	r2, #1
 80081c0:	801a      	strh	r2, [r3, #0]
        }
        break;
 80081c2:	e00b      	b.n	80081dc <motor_ctrl_MOTOR+0x224>
        break;
 80081c4:	bf00      	nop
 80081c6:	e00a      	b.n	80081de <motor_ctrl_MOTOR+0x226>
        break;
 80081c8:	bf00      	nop
 80081ca:	e008      	b.n	80081de <motor_ctrl_MOTOR+0x226>
        break;
 80081cc:	bf00      	nop
 80081ce:	e006      	b.n	80081de <motor_ctrl_MOTOR+0x226>
        break;
 80081d0:	bf00      	nop
 80081d2:	e004      	b.n	80081de <motor_ctrl_MOTOR+0x226>
        break;
 80081d4:	bf00      	nop
 80081d6:	e002      	b.n	80081de <motor_ctrl_MOTOR+0x226>
        break;
 80081d8:	bf00      	nop
 80081da:	e000      	b.n	80081de <motor_ctrl_MOTOR+0x226>
        break;
 80081dc:	bf00      	nop
    }
}
 80081de:	bf00      	nop
 80081e0:	3714      	adds	r7, #20
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bc80      	pop	{r7}
 80081e6:	4770      	bx	lr

080081e8 <motor_ctrl_Init>:

void motor_ctrl_Init(DW_motor_ctrl_f_T *localDW)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
    localDW->sfEvent = motor_ctrl_CALL_EVENT;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f04f 32ff 	mov.w	r2, #4294967295
 80081f6:	601a      	str	r2, [r3, #0]
}
 80081f8:	bf00      	nop
 80081fa:	370c      	adds	r7, #12
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bc80      	pop	{r7}
 8008200:	4770      	bx	lr
	...

08008204 <motor_ctrl>:

void motor_ctrl(const int16_T *rtu_up_key, const int16_T *rtu_down_key, const int16_T *rtu_com_short_up, const int16_T *rtu_com_long_up,
                const int16_T *rtu_com_stop, const int16_T *rtu_com_short_down, const int16_T *rtu_com_long_down, const int16_T
                *rtu_debounce_cnt, const int16_T *rtu_longpress_cnt, const int16_T *rtu_long_cnt, const int16_T *rtu_short_cnt, const
                int16_T *rtu_transfer_cnt, int16_T *rty_up_relay, int16_T *rty_down_relay, DW_motor_ctrl_f_T *localDW)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b08e      	sub	sp, #56	; 0x38
 8008208:	af02      	add	r7, sp, #8
 800820a:	60f8      	str	r0, [r7, #12]
 800820c:	60b9      	str	r1, [r7, #8]
 800820e:	607a      	str	r2, [r7, #4]
 8008210:	603b      	str	r3, [r7, #0]
    int16_T u0;
    int16_T u0_0;
    int16_T u0_1;
    int16_T u0_2;
    int16_T u0_3;
    Saturation = *rtu_up_key;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	881b      	ldrh	r3, [r3, #0]
 8008216:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if (Saturation > 1)
 8008218:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800821c:	2b01      	cmp	r3, #1
 800821e:	dd02      	ble.n	8008226 <motor_ctrl+0x22>
    {
        Saturation = 1;
 8008220:	2301      	movs	r3, #1
 8008222:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8008224:	e005      	b.n	8008232 <motor_ctrl+0x2e>
    }
    else if (Saturation < 0)
 8008226:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800822a:	2b00      	cmp	r3, #0
 800822c:	da01      	bge.n	8008232 <motor_ctrl+0x2e>
    {
        Saturation = 0;
 800822e:	2300      	movs	r3, #0
 8008230:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    u0 = *rtu_com_short_up;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	881b      	ldrh	r3, [r3, #0]
 8008236:	84fb      	strh	r3, [r7, #38]	; 0x26
    u0_0 = *rtu_com_long_up;
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	881b      	ldrh	r3, [r3, #0]
 800823c:	84bb      	strh	r3, [r7, #36]	; 0x24
    u0_1 = *rtu_com_stop;
 800823e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008240:	881b      	ldrh	r3, [r3, #0]
 8008242:	847b      	strh	r3, [r7, #34]	; 0x22
    u0_2 = *rtu_com_short_down;
 8008244:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008246:	881b      	ldrh	r3, [r3, #0]
 8008248:	843b      	strh	r3, [r7, #32]
    Saturation1 = *rtu_down_key;
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	881b      	ldrh	r3, [r3, #0]
 800824e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if (Saturation1 > 1)
 8008250:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8008254:	2b01      	cmp	r3, #1
 8008256:	dd02      	ble.n	800825e <motor_ctrl+0x5a>
    {
        Saturation1 = 1;
 8008258:	2301      	movs	r3, #1
 800825a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800825c:	e005      	b.n	800826a <motor_ctrl+0x66>
    }
    else if (Saturation1 < 0)
 800825e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8008262:	2b00      	cmp	r3, #0
 8008264:	da01      	bge.n	800826a <motor_ctrl+0x66>
    {
        Saturation1 = 0;
 8008266:	2300      	movs	r3, #0
 8008268:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }

    u0_3 = *rtu_com_long_down;
 800826a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800826c:	881b      	ldrh	r3, [r3, #0]
 800826e:	83fb      	strh	r3, [r7, #30]
    Saturation7 = *rtu_debounce_cnt;
 8008270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008272:	881b      	ldrh	r3, [r3, #0]
 8008274:	857b      	strh	r3, [r7, #42]	; 0x2a
    if (Saturation7 > 4)
 8008276:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800827a:	2b04      	cmp	r3, #4
 800827c:	dd02      	ble.n	8008284 <motor_ctrl+0x80>
    {
        Saturation7 = 4;
 800827e:	2304      	movs	r3, #4
 8008280:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008282:	e005      	b.n	8008290 <motor_ctrl+0x8c>
    }
    else if (Saturation7 < 1)
 8008284:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8008288:	2b00      	cmp	r3, #0
 800828a:	dc01      	bgt.n	8008290 <motor_ctrl+0x8c>
    {
        Saturation7 = 1;
 800828c:	2301      	movs	r3, #1
 800828e:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    Saturation8 = *rtu_longpress_cnt;
 8008290:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008292:	881b      	ldrh	r3, [r3, #0]
 8008294:	853b      	strh	r3, [r7, #40]	; 0x28
    if (Saturation8 > 200)
 8008296:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800829a:	2bc8      	cmp	r3, #200	; 0xc8
 800829c:	dd02      	ble.n	80082a4 <motor_ctrl+0xa0>
    {
        Saturation8 = 200;
 800829e:	23c8      	movs	r3, #200	; 0xc8
 80082a0:	853b      	strh	r3, [r7, #40]	; 0x28
 80082a2:	e005      	b.n	80082b0 <motor_ctrl+0xac>
    }
    else if (Saturation8 < 50)
 80082a4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80082a8:	2b31      	cmp	r3, #49	; 0x31
 80082aa:	dc01      	bgt.n	80082b0 <motor_ctrl+0xac>
    {
        Saturation8 = 50;
 80082ac:	2332      	movs	r3, #50	; 0x32
 80082ae:	853b      	strh	r3, [r7, #40]	; 0x28
    }

    Saturation9 = *rtu_long_cnt;
 80082b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80082b6:	827b      	strh	r3, [r7, #18]
    if (Saturation9 > 6000)
 80082b8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80082bc:	f241 7270 	movw	r2, #6000	; 0x1770
 80082c0:	4293      	cmp	r3, r2
 80082c2:	dd03      	ble.n	80082cc <motor_ctrl+0xc8>
    {
        Saturation9 = 6000;
 80082c4:	f241 7370 	movw	r3, #6000	; 0x1770
 80082c8:	827b      	strh	r3, [r7, #18]
 80082ca:	e007      	b.n	80082dc <motor_ctrl+0xd8>
    }
    else if (Saturation9 < 1000)
 80082cc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80082d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082d4:	da02      	bge.n	80082dc <motor_ctrl+0xd8>
    {
        Saturation9 = 1000;
 80082d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80082da:	827b      	strh	r3, [r7, #18]
    }

    Saturation10 = *rtu_short_cnt;
 80082dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80082e2:	82fb      	strh	r3, [r7, #22]
    if (Saturation10 > 50)
 80082e4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80082e8:	2b32      	cmp	r3, #50	; 0x32
 80082ea:	dd02      	ble.n	80082f2 <motor_ctrl+0xee>
    {
        Saturation10 = 50;
 80082ec:	2332      	movs	r3, #50	; 0x32
 80082ee:	82fb      	strh	r3, [r7, #22]
 80082f0:	e005      	b.n	80082fe <motor_ctrl+0xfa>
    }
    else if (Saturation10 < 20)
 80082f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80082f6:	2b13      	cmp	r3, #19
 80082f8:	dc01      	bgt.n	80082fe <motor_ctrl+0xfa>
    {
        Saturation10 = 20;
 80082fa:	2314      	movs	r3, #20
 80082fc:	82fb      	strh	r3, [r7, #22]
    }

    Saturation11 = *rtu_transfer_cnt;
 80082fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008300:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008304:	82bb      	strh	r3, [r7, #20]
    if (Saturation11 > 50)
 8008306:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800830a:	2b32      	cmp	r3, #50	; 0x32
 800830c:	dd02      	ble.n	8008314 <motor_ctrl+0x110>
    {
        Saturation11 = 50;
 800830e:	2332      	movs	r3, #50	; 0x32
 8008310:	82bb      	strh	r3, [r7, #20]
 8008312:	e005      	b.n	8008320 <motor_ctrl+0x11c>
    }
    else if (Saturation11 < 20)
 8008314:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8008318:	2b13      	cmp	r3, #19
 800831a:	dc01      	bgt.n	8008320 <motor_ctrl+0x11c>
    {
        Saturation11 = 20;
 800831c:	2314      	movs	r3, #20
 800831e:	82bb      	strh	r3, [r7, #20]
    }

    localDW->sfEvent = motor_ctrl_CALL_EVENT;
 8008320:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008322:	f04f 32ff 	mov.w	r2, #4294967295
 8008326:	601a      	str	r2, [r3, #0]
    if (localDW->temporalCounter_i1 < 32767U)
 8008328:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800832a:	889b      	ldrh	r3, [r3, #4]
 800832c:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008330:	4293      	cmp	r3, r2
 8008332:	d805      	bhi.n	8008340 <motor_ctrl+0x13c>
    {
        localDW->temporalCounter_i1++;
 8008334:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008336:	889b      	ldrh	r3, [r3, #4]
 8008338:	3301      	adds	r3, #1
 800833a:	b29a      	uxth	r2, r3
 800833c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800833e:	809a      	strh	r2, [r3, #4]
    }

    if (localDW->temporalCounter_i2 < 32767U)
 8008340:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008342:	88db      	ldrh	r3, [r3, #6]
 8008344:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008348:	4293      	cmp	r3, r2
 800834a:	d805      	bhi.n	8008358 <motor_ctrl+0x154>
    {
        localDW->temporalCounter_i2++;
 800834c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800834e:	88db      	ldrh	r3, [r3, #6]
 8008350:	3301      	adds	r3, #1
 8008352:	b29a      	uxth	r2, r3
 8008354:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008356:	80da      	strh	r2, [r3, #6]
    }

    if (localDW->temporalCounter_i3 < 32767U)
 8008358:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800835a:	891b      	ldrh	r3, [r3, #8]
 800835c:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8008360:	4293      	cmp	r3, r2
 8008362:	d805      	bhi.n	8008370 <motor_ctrl+0x16c>
    {
        localDW->temporalCounter_i3++;
 8008364:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008366:	891b      	ldrh	r3, [r3, #8]
 8008368:	3301      	adds	r3, #1
 800836a:	b29a      	uxth	r2, r3
 800836c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800836e:	811a      	strh	r2, [r3, #8]
    }

    if (localDW->is_active_c3_motor_ctrl == 0U)
 8008370:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008372:	7a9b      	ldrb	r3, [r3, #10]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d118      	bne.n	80083aa <motor_ctrl+0x1a6>
    {
        localDW->is_active_c3_motor_ctrl = 1U;
 8008378:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800837a:	2201      	movs	r2, #1
 800837c:	729a      	strb	r2, [r3, #10]
        localDW->is_c3_motor_ctrl = motor_ctrl_IN_MOTOR_CTRL;
 800837e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008380:	2201      	movs	r2, #1
 8008382:	72da      	strb	r2, [r3, #11]
        localDW->is_active_COM_CMD = 1U;
 8008384:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008386:	2201      	movs	r2, #1
 8008388:	735a      	strb	r2, [r3, #13]
        localDW->is_COM_CMD = motor_ctrl_IN_IDLE;
 800838a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800838c:	2201      	movs	r2, #1
 800838e:	731a      	strb	r2, [r3, #12]
        localDW->is_active_KEY_CMD = 1U;
 8008390:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008392:	2201      	movs	r2, #1
 8008394:	73da      	strb	r2, [r3, #15]
        localDW->is_KEY_CMD = motor_ctrl_IN_IDLE_f;
 8008396:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008398:	2202      	movs	r2, #2
 800839a:	739a      	strb	r2, [r3, #14]
        localDW->is_active_MOTOR = 1U;
 800839c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800839e:	2201      	movs	r2, #1
 80083a0:	74da      	strb	r2, [r3, #19]
        localDW->is_MOTOR = motor_ctrl_IN_OFF;
 80083a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083a4:	2204      	movs	r2, #4
 80083a6:	749a      	strb	r2, [r3, #18]
        if (localDW->is_active_MOTOR != 0U)
        {
            motor_ctrl_MOTOR(&Saturation9, &Saturation10, &Saturation11, rty_up_relay, rty_down_relay, localDW);
        }
    }
}
 80083a8:	e2a3      	b.n	80088f2 <motor_ctrl+0x6ee>
    else if (localDW->is_c3_motor_ctrl == 1)
 80083aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083ac:	7adb      	ldrb	r3, [r3, #11]
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	f040 829f 	bne.w	80088f2 <motor_ctrl+0x6ee>
        if (localDW->is_active_COM_CMD != 0U)
 80083b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083b6:	7b5b      	ldrb	r3, [r3, #13]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	f000 8146 	beq.w	800864a <motor_ctrl+0x446>
            switch (localDW->is_COM_CMD)
 80083be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083c0:	7b1b      	ldrb	r3, [r3, #12]
 80083c2:	3b01      	subs	r3, #1
 80083c4:	2b05      	cmp	r3, #5
 80083c6:	f200 814d 	bhi.w	8008664 <motor_ctrl+0x460>
 80083ca:	a201      	add	r2, pc, #4	; (adr r2, 80083d0 <motor_ctrl+0x1cc>)
 80083cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d0:	080083e9 	.word	0x080083e9
 80083d4:	080085dd 	.word	0x080085dd
 80083d8:	080085f3 	.word	0x080085f3
 80083dc:	08008609 	.word	0x08008609
 80083e0:	0800861f 	.word	0x0800861f
 80083e4:	08008635 	.word	0x08008635
                if (u0_3 > 1)
 80083e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	dd02      	ble.n	80083f6 <motor_ctrl+0x1f2>
                    u0_3 = 1;
 80083f0:	2301      	movs	r3, #1
 80083f2:	83fb      	strh	r3, [r7, #30]
 80083f4:	e005      	b.n	8008402 <motor_ctrl+0x1fe>
                else if (u0_3 < 0)
 80083f6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	da01      	bge.n	8008402 <motor_ctrl+0x1fe>
                    u0_3 = 0;
 80083fe:	2300      	movs	r3, #0
 8008400:	83fb      	strh	r3, [r7, #30]
                if (u0_3 == 1)
 8008402:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008406:	2b01      	cmp	r3, #1
 8008408:	d120      	bne.n	800844c <motor_ctrl+0x248>
                    localDW->is_COM_CMD = motor_ctrl_IN_LONG_DOWN;
 800840a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800840c:	2202      	movs	r2, #2
 800840e:	731a      	strb	r2, [r3, #12]
                    localDW->temporalCounter_i1 = 0U;
 8008410:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008412:	2200      	movs	r2, #0
 8008414:	809a      	strh	r2, [r3, #4]
                    h_previousEvent = localDW->sfEvent;
 8008416:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	61bb      	str	r3, [r7, #24]
                    localDW->sfEvent = motor_ctr_event_long_down_event;
 800841c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800841e:	2202      	movs	r2, #2
 8008420:	601a      	str	r2, [r3, #0]
                    if (localDW->is_active_MOTOR != 0U)
 8008422:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008424:	7cdb      	ldrb	r3, [r3, #19]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00c      	beq.n	8008444 <motor_ctrl+0x240>
                        motor_ctrl_MOTOR(&Saturation9, &Saturation10, &Saturation11, rty_up_relay, rty_down_relay, localDW);
 800842a:	f107 0214 	add.w	r2, r7, #20
 800842e:	f107 0116 	add.w	r1, r7, #22
 8008432:	f107 0012 	add.w	r0, r7, #18
 8008436:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008438:	9301      	str	r3, [sp, #4]
 800843a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800843c:	9300      	str	r3, [sp, #0]
 800843e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008440:	f7ff fdba 	bl	8007fb8 <motor_ctrl_MOTOR>
                    localDW->sfEvent = h_previousEvent;
 8008444:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008446:	69ba      	ldr	r2, [r7, #24]
 8008448:	601a      	str	r2, [r3, #0]
                break;
 800844a:	e100      	b.n	800864e <motor_ctrl+0x44a>
                    if (u0_1 > 1)
 800844c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8008450:	2b01      	cmp	r3, #1
 8008452:	dd02      	ble.n	800845a <motor_ctrl+0x256>
                        u0_1 = 1;
 8008454:	2301      	movs	r3, #1
 8008456:	847b      	strh	r3, [r7, #34]	; 0x22
 8008458:	e005      	b.n	8008466 <motor_ctrl+0x262>
                    else if (u0_1 < 0)
 800845a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800845e:	2b00      	cmp	r3, #0
 8008460:	da01      	bge.n	8008466 <motor_ctrl+0x262>
                        u0_1 = 0;
 8008462:	2300      	movs	r3, #0
 8008464:	847b      	strh	r3, [r7, #34]	; 0x22
                    if (u0_1 == 1)
 8008466:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800846a:	2b01      	cmp	r3, #1
 800846c:	d120      	bne.n	80084b0 <motor_ctrl+0x2ac>
                        localDW->is_COM_CMD = motor_ctrl_IN_STOP;
 800846e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008470:	2206      	movs	r2, #6
 8008472:	731a      	strb	r2, [r3, #12]
                        localDW->temporalCounter_i1 = 0U;
 8008474:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008476:	2200      	movs	r2, #0
 8008478:	809a      	strh	r2, [r3, #4]
                        h_previousEvent = localDW->sfEvent;
 800847a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	61bb      	str	r3, [r7, #24]
                        localDW->sfEvent = motor_ctrl_event_stop_event;
 8008480:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008482:	2206      	movs	r2, #6
 8008484:	601a      	str	r2, [r3, #0]
                        if (localDW->is_active_MOTOR != 0U)
 8008486:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008488:	7cdb      	ldrb	r3, [r3, #19]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d00c      	beq.n	80084a8 <motor_ctrl+0x2a4>
                            motor_ctrl_MOTOR(&Saturation9, &Saturation10, &Saturation11, rty_up_relay, rty_down_relay, localDW);
 800848e:	f107 0214 	add.w	r2, r7, #20
 8008492:	f107 0116 	add.w	r1, r7, #22
 8008496:	f107 0012 	add.w	r0, r7, #18
 800849a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800849c:	9301      	str	r3, [sp, #4]
 800849e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084a0:	9300      	str	r3, [sp, #0]
 80084a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084a4:	f7ff fd88 	bl	8007fb8 <motor_ctrl_MOTOR>
                        localDW->sfEvent = h_previousEvent;
 80084a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084aa:	69ba      	ldr	r2, [r7, #24]
 80084ac:	601a      	str	r2, [r3, #0]
                break;
 80084ae:	e0ce      	b.n	800864e <motor_ctrl+0x44a>
                        if (u0 > 1)
 80084b0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	dd02      	ble.n	80084be <motor_ctrl+0x2ba>
                            u0 = 1;
 80084b8:	2301      	movs	r3, #1
 80084ba:	84fb      	strh	r3, [r7, #38]	; 0x26
 80084bc:	e005      	b.n	80084ca <motor_ctrl+0x2c6>
                        else if (u0 < 0)
 80084be:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	da01      	bge.n	80084ca <motor_ctrl+0x2c6>
                            u0 = 0;
 80084c6:	2300      	movs	r3, #0
 80084c8:	84fb      	strh	r3, [r7, #38]	; 0x26
                        if (u0 == 1)
 80084ca:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80084ce:	2b01      	cmp	r3, #1
 80084d0:	d120      	bne.n	8008514 <motor_ctrl+0x310>
                            localDW->is_COM_CMD = motor_ctrl_IN_SHORT_UP;
 80084d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084d4:	2205      	movs	r2, #5
 80084d6:	731a      	strb	r2, [r3, #12]
                            localDW->temporalCounter_i1 = 0U;
 80084d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084da:	2200      	movs	r2, #0
 80084dc:	809a      	strh	r2, [r3, #4]
                            h_previousEvent = localDW->sfEvent;
 80084de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	61bb      	str	r3, [r7, #24]
                            localDW->sfEvent = motor_ctrl_event_short_up_event;
 80084e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084e6:	2205      	movs	r2, #5
 80084e8:	601a      	str	r2, [r3, #0]
                            if (localDW->is_active_MOTOR != 0U)
 80084ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084ec:	7cdb      	ldrb	r3, [r3, #19]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d00c      	beq.n	800850c <motor_ctrl+0x308>
                                motor_ctrl_MOTOR(&Saturation9, &Saturation10, &Saturation11, rty_up_relay, rty_down_relay, localDW);
 80084f2:	f107 0214 	add.w	r2, r7, #20
 80084f6:	f107 0116 	add.w	r1, r7, #22
 80084fa:	f107 0012 	add.w	r0, r7, #18
 80084fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008500:	9301      	str	r3, [sp, #4]
 8008502:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008504:	9300      	str	r3, [sp, #0]
 8008506:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008508:	f7ff fd56 	bl	8007fb8 <motor_ctrl_MOTOR>
                            localDW->sfEvent = h_previousEvent;
 800850c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800850e:	69ba      	ldr	r2, [r7, #24]
 8008510:	601a      	str	r2, [r3, #0]
                break;
 8008512:	e09c      	b.n	800864e <motor_ctrl+0x44a>
                            if (u0_0 > 1)
 8008514:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8008518:	2b01      	cmp	r3, #1
 800851a:	dd02      	ble.n	8008522 <motor_ctrl+0x31e>
                                u0_0 = 1;
 800851c:	2301      	movs	r3, #1
 800851e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008520:	e005      	b.n	800852e <motor_ctrl+0x32a>
                            else if (u0_0 < 0)
 8008522:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8008526:	2b00      	cmp	r3, #0
 8008528:	da01      	bge.n	800852e <motor_ctrl+0x32a>
                                u0_0 = 0;
 800852a:	2300      	movs	r3, #0
 800852c:	84bb      	strh	r3, [r7, #36]	; 0x24
                            if (u0_0 == 1)
 800852e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8008532:	2b01      	cmp	r3, #1
 8008534:	d120      	bne.n	8008578 <motor_ctrl+0x374>
                                localDW->is_COM_CMD = motor_ctrl_IN_LONG_UP;
 8008536:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008538:	2203      	movs	r2, #3
 800853a:	731a      	strb	r2, [r3, #12]
                                localDW->temporalCounter_i1 = 0U;
 800853c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800853e:	2200      	movs	r2, #0
 8008540:	809a      	strh	r2, [r3, #4]
                                h_previousEvent = localDW->sfEvent;
 8008542:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	61bb      	str	r3, [r7, #24]
                                localDW->sfEvent = motor_ctrl_event_long_up_event;
 8008548:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800854a:	2203      	movs	r2, #3
 800854c:	601a      	str	r2, [r3, #0]
                                if (localDW->is_active_MOTOR != 0U)
 800854e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008550:	7cdb      	ldrb	r3, [r3, #19]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d00c      	beq.n	8008570 <motor_ctrl+0x36c>
                                    motor_ctrl_MOTOR(&Saturation9, &Saturation10, &Saturation11, rty_up_relay, rty_down_relay, localDW);
 8008556:	f107 0214 	add.w	r2, r7, #20
 800855a:	f107 0116 	add.w	r1, r7, #22
 800855e:	f107 0012 	add.w	r0, r7, #18
 8008562:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008564:	9301      	str	r3, [sp, #4]
 8008566:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008568:	9300      	str	r3, [sp, #0]
 800856a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800856c:	f7ff fd24 	bl	8007fb8 <motor_ctrl_MOTOR>
                                localDW->sfEvent = h_previousEvent;
 8008570:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008572:	69ba      	ldr	r2, [r7, #24]
 8008574:	601a      	str	r2, [r3, #0]
                break;
 8008576:	e06a      	b.n	800864e <motor_ctrl+0x44a>
                                if (u0_2 > 1)
 8008578:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800857c:	2b01      	cmp	r3, #1
 800857e:	dd02      	ble.n	8008586 <motor_ctrl+0x382>
                                    u0_2 = 1;
 8008580:	2301      	movs	r3, #1
 8008582:	843b      	strh	r3, [r7, #32]
 8008584:	e005      	b.n	8008592 <motor_ctrl+0x38e>
                                else if (u0_2 < 0)
 8008586:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800858a:	2b00      	cmp	r3, #0
 800858c:	da01      	bge.n	8008592 <motor_ctrl+0x38e>
                                    u0_2 = 0;
 800858e:	2300      	movs	r3, #0
 8008590:	843b      	strh	r3, [r7, #32]
                                if (u0_2 == 1)
 8008592:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8008596:	2b01      	cmp	r3, #1
 8008598:	d159      	bne.n	800864e <motor_ctrl+0x44a>
                                    localDW->is_COM_CMD = motor_ctrl_IN_SHORT_DOWN;
 800859a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800859c:	2204      	movs	r2, #4
 800859e:	731a      	strb	r2, [r3, #12]
                                    localDW->temporalCounter_i1 = 0U;
 80085a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085a2:	2200      	movs	r2, #0
 80085a4:	809a      	strh	r2, [r3, #4]
                                    h_previousEvent = localDW->sfEvent;
 80085a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	61bb      	str	r3, [r7, #24]
                                    localDW->sfEvent = motor_ct_event_short_down_event;
 80085ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085ae:	2204      	movs	r2, #4
 80085b0:	601a      	str	r2, [r3, #0]
                                    if (localDW->is_active_MOTOR != 0U)
 80085b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085b4:	7cdb      	ldrb	r3, [r3, #19]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00c      	beq.n	80085d4 <motor_ctrl+0x3d0>
                                        motor_ctrl_MOTOR(&Saturation9, &Saturation10, &Saturation11, rty_up_relay, rty_down_relay, localDW);
 80085ba:	f107 0214 	add.w	r2, r7, #20
 80085be:	f107 0116 	add.w	r1, r7, #22
 80085c2:	f107 0012 	add.w	r0, r7, #18
 80085c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085c8:	9301      	str	r3, [sp, #4]
 80085ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085cc:	9300      	str	r3, [sp, #0]
 80085ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80085d0:	f7ff fcf2 	bl	8007fb8 <motor_ctrl_MOTOR>
                                    localDW->sfEvent = h_previousEvent;
 80085d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085d6:	69ba      	ldr	r2, [r7, #24]
 80085d8:	601a      	str	r2, [r3, #0]
                break;
 80085da:	e038      	b.n	800864e <motor_ctrl+0x44a>
                if (localDW->temporalCounter_i1 >= Saturation10)
 80085dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085de:	889b      	ldrh	r3, [r3, #4]
 80085e0:	461a      	mov	r2, r3
 80085e2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	db33      	blt.n	8008652 <motor_ctrl+0x44e>
                    localDW->is_COM_CMD = motor_ctrl_IN_IDLE;
 80085ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085ec:	2201      	movs	r2, #1
 80085ee:	731a      	strb	r2, [r3, #12]
                break;
 80085f0:	e02f      	b.n	8008652 <motor_ctrl+0x44e>
                if (localDW->temporalCounter_i1 >= Saturation10)
 80085f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085f4:	889b      	ldrh	r3, [r3, #4]
 80085f6:	461a      	mov	r2, r3
 80085f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	db2a      	blt.n	8008656 <motor_ctrl+0x452>
                    localDW->is_COM_CMD = motor_ctrl_IN_IDLE;
 8008600:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008602:	2201      	movs	r2, #1
 8008604:	731a      	strb	r2, [r3, #12]
                break;
 8008606:	e026      	b.n	8008656 <motor_ctrl+0x452>
                if (localDW->temporalCounter_i1 >= Saturation10)
 8008608:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800860a:	889b      	ldrh	r3, [r3, #4]
 800860c:	461a      	mov	r2, r3
 800860e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008612:	429a      	cmp	r2, r3
 8008614:	db21      	blt.n	800865a <motor_ctrl+0x456>
                    localDW->is_COM_CMD = motor_ctrl_IN_IDLE;
 8008616:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008618:	2201      	movs	r2, #1
 800861a:	731a      	strb	r2, [r3, #12]
                break;
 800861c:	e01d      	b.n	800865a <motor_ctrl+0x456>
                if (localDW->temporalCounter_i1 >= Saturation10)
 800861e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008620:	889b      	ldrh	r3, [r3, #4]
 8008622:	461a      	mov	r2, r3
 8008624:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008628:	429a      	cmp	r2, r3
 800862a:	db18      	blt.n	800865e <motor_ctrl+0x45a>
                    localDW->is_COM_CMD = motor_ctrl_IN_IDLE;
 800862c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800862e:	2201      	movs	r2, #1
 8008630:	731a      	strb	r2, [r3, #12]
                break;
 8008632:	e014      	b.n	800865e <motor_ctrl+0x45a>
                if (localDW->temporalCounter_i1 >= Saturation10)
 8008634:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008636:	889b      	ldrh	r3, [r3, #4]
 8008638:	461a      	mov	r2, r3
 800863a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800863e:	429a      	cmp	r2, r3
 8008640:	db0f      	blt.n	8008662 <motor_ctrl+0x45e>
                    localDW->is_COM_CMD = motor_ctrl_IN_IDLE;
 8008642:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008644:	2201      	movs	r2, #1
 8008646:	731a      	strb	r2, [r3, #12]
                break;
 8008648:	e00b      	b.n	8008662 <motor_ctrl+0x45e>
        }
 800864a:	bf00      	nop
 800864c:	e00a      	b.n	8008664 <motor_ctrl+0x460>
                break;
 800864e:	bf00      	nop
 8008650:	e008      	b.n	8008664 <motor_ctrl+0x460>
                break;
 8008652:	bf00      	nop
 8008654:	e006      	b.n	8008664 <motor_ctrl+0x460>
                break;
 8008656:	bf00      	nop
 8008658:	e004      	b.n	8008664 <motor_ctrl+0x460>
                break;
 800865a:	bf00      	nop
 800865c:	e002      	b.n	8008664 <motor_ctrl+0x460>
                break;
 800865e:	bf00      	nop
 8008660:	e000      	b.n	8008664 <motor_ctrl+0x460>
                break;
 8008662:	bf00      	nop
        if (localDW->is_active_KEY_CMD != 0U)
 8008664:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008666:	7bdb      	ldrb	r3, [r3, #15]
 8008668:	2b00      	cmp	r3, #0
 800866a:	f000 812a 	beq.w	80088c2 <motor_ctrl+0x6be>
            switch (localDW->is_KEY_CMD)
 800866e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008670:	7b9b      	ldrb	r3, [r3, #14]
 8008672:	2b03      	cmp	r3, #3
 8008674:	f000 80a6 	beq.w	80087c4 <motor_ctrl+0x5c0>
 8008678:	2b03      	cmp	r3, #3
 800867a:	f300 8129 	bgt.w	80088d0 <motor_ctrl+0x6cc>
 800867e:	2b01      	cmp	r3, #1
 8008680:	d003      	beq.n	800868a <motor_ctrl+0x486>
 8008682:	2b02      	cmp	r3, #2
 8008684:	f000 8081 	beq.w	800878a <motor_ctrl+0x586>
 8008688:	e122      	b.n	80088d0 <motor_ctrl+0x6cc>
                switch (localDW->is_DOWN_KEY_PRESSED)
 800868a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800868c:	7c1b      	ldrb	r3, [r3, #16]
 800868e:	2b03      	cmp	r3, #3
 8008690:	d06a      	beq.n	8008768 <motor_ctrl+0x564>
 8008692:	2b03      	cmp	r3, #3
 8008694:	f300 8117 	bgt.w	80088c6 <motor_ctrl+0x6c2>
 8008698:	2b01      	cmp	r3, #1
 800869a:	d002      	beq.n	80086a2 <motor_ctrl+0x49e>
 800869c:	2b02      	cmp	r3, #2
 800869e:	d04a      	beq.n	8008736 <motor_ctrl+0x532>
                break;
 80086a0:	e111      	b.n	80088c6 <motor_ctrl+0x6c2>
                    if (Saturation1 != 1)
 80086a2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d020      	beq.n	80086ec <motor_ctrl+0x4e8>
                        h_previousEvent = localDW->sfEvent;
 80086aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	61bb      	str	r3, [r7, #24]
                        localDW->sfEvent = motor_ctrl_event_down_key_click;
 80086b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086b2:	2200      	movs	r2, #0
 80086b4:	601a      	str	r2, [r3, #0]
                        if (localDW->is_active_MOTOR != 0U)
 80086b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086b8:	7cdb      	ldrb	r3, [r3, #19]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d00c      	beq.n	80086d8 <motor_ctrl+0x4d4>
                            motor_ctrl_MOTOR(&Saturation9, &Saturation10, &Saturation11, rty_up_relay, rty_down_relay, localDW);
 80086be:	f107 0214 	add.w	r2, r7, #20
 80086c2:	f107 0116 	add.w	r1, r7, #22
 80086c6:	f107 0012 	add.w	r0, r7, #18
 80086ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086cc:	9301      	str	r3, [sp, #4]
 80086ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086d0:	9300      	str	r3, [sp, #0]
 80086d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80086d4:	f7ff fc70 	bl	8007fb8 <motor_ctrl_MOTOR>
                        localDW->sfEvent = h_previousEvent;
 80086d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086da:	69ba      	ldr	r2, [r7, #24]
 80086dc:	601a      	str	r2, [r3, #0]
                        localDW->is_DOWN_KEY_PRESSED = motor_ctrl_IN_NO_ACTIVE_CHILD;
 80086de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086e0:	2200      	movs	r2, #0
 80086e2:	741a      	strb	r2, [r3, #16]
                        localDW->is_KEY_CMD = motor_ctrl_IN_IDLE_f;
 80086e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086e6:	2202      	movs	r2, #2
 80086e8:	739a      	strb	r2, [r3, #14]
                    break;
 80086ea:	e048      	b.n	800877e <motor_ctrl+0x57a>
                    else if (localDW->temporalCounter_i2 >= Saturation8)
 80086ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086ee:	88db      	ldrh	r3, [r3, #6]
 80086f0:	461a      	mov	r2, r3
 80086f2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80086f6:	429a      	cmp	r2, r3
 80086f8:	db41      	blt.n	800877e <motor_ctrl+0x57a>
                        localDW->is_DOWN_KEY_PRESSED = motor_ctrl_IN_DOWN_LONGPRESS;
 80086fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086fc:	2203      	movs	r2, #3
 80086fe:	741a      	strb	r2, [r3, #16]
                        h_previousEvent = localDW->sfEvent;
 8008700:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	61bb      	str	r3, [r7, #24]
                        localDW->sfEvent = motor_event_down_key_long_press;
 8008706:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008708:	2201      	movs	r2, #1
 800870a:	601a      	str	r2, [r3, #0]
                        if (localDW->is_active_MOTOR != 0U)
 800870c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800870e:	7cdb      	ldrb	r3, [r3, #19]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d00c      	beq.n	800872e <motor_ctrl+0x52a>
                            motor_ctrl_MOTOR(&Saturation9, &Saturation10, &Saturation11, rty_up_relay, rty_down_relay, localDW);
 8008714:	f107 0214 	add.w	r2, r7, #20
 8008718:	f107 0116 	add.w	r1, r7, #22
 800871c:	f107 0012 	add.w	r0, r7, #18
 8008720:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008722:	9301      	str	r3, [sp, #4]
 8008724:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008726:	9300      	str	r3, [sp, #0]
 8008728:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800872a:	f7ff fc45 	bl	8007fb8 <motor_ctrl_MOTOR>
                        localDW->sfEvent = h_previousEvent;
 800872e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008730:	69ba      	ldr	r2, [r7, #24]
 8008732:	601a      	str	r2, [r3, #0]
                    break;
 8008734:	e023      	b.n	800877e <motor_ctrl+0x57a>
                    if (localDW->temporalCounter_i2 >= Saturation7)
 8008736:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008738:	88db      	ldrh	r3, [r3, #6]
 800873a:	461a      	mov	r2, r3
 800873c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8008740:	429a      	cmp	r2, r3
 8008742:	db06      	blt.n	8008752 <motor_ctrl+0x54e>
                        localDW->is_DOWN_KEY_PRESSED = motor_ctrl_IN_DOWN_CLICK;
 8008744:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008746:	2201      	movs	r2, #1
 8008748:	741a      	strb	r2, [r3, #16]
                        localDW->temporalCounter_i2 = 0U;
 800874a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800874c:	2200      	movs	r2, #0
 800874e:	80da      	strh	r2, [r3, #6]
                    break;
 8008750:	e017      	b.n	8008782 <motor_ctrl+0x57e>
                    else if (Saturation1 != 1)
 8008752:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8008756:	2b01      	cmp	r3, #1
 8008758:	d013      	beq.n	8008782 <motor_ctrl+0x57e>
                        localDW->is_DOWN_KEY_PRESSED = motor_ctrl_IN_NO_ACTIVE_CHILD;
 800875a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800875c:	2200      	movs	r2, #0
 800875e:	741a      	strb	r2, [r3, #16]
                        localDW->is_KEY_CMD = motor_ctrl_IN_IDLE_f;
 8008760:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008762:	2202      	movs	r2, #2
 8008764:	739a      	strb	r2, [r3, #14]
                    break;
 8008766:	e00c      	b.n	8008782 <motor_ctrl+0x57e>
                    if (Saturation1 != 1)
 8008768:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800876c:	2b01      	cmp	r3, #1
 800876e:	d00a      	beq.n	8008786 <motor_ctrl+0x582>
                        localDW->is_DOWN_KEY_PRESSED = motor_ctrl_IN_NO_ACTIVE_CHILD;
 8008770:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008772:	2200      	movs	r2, #0
 8008774:	741a      	strb	r2, [r3, #16]
                        localDW->is_KEY_CMD = motor_ctrl_IN_IDLE_f;
 8008776:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008778:	2202      	movs	r2, #2
 800877a:	739a      	strb	r2, [r3, #14]
                    break;
 800877c:	e003      	b.n	8008786 <motor_ctrl+0x582>
                    break;
 800877e:	bf00      	nop
 8008780:	e0a1      	b.n	80088c6 <motor_ctrl+0x6c2>
                    break;
 8008782:	bf00      	nop
 8008784:	e09f      	b.n	80088c6 <motor_ctrl+0x6c2>
                    break;
 8008786:	bf00      	nop
                break;
 8008788:	e09d      	b.n	80088c6 <motor_ctrl+0x6c2>
                if (Saturation == 1)
 800878a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800878e:	2b01      	cmp	r3, #1
 8008790:	d109      	bne.n	80087a6 <motor_ctrl+0x5a2>
                    localDW->is_KEY_CMD = motor_ctrl_IN_UP_KEY_PRESSED;
 8008792:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008794:	2203      	movs	r2, #3
 8008796:	739a      	strb	r2, [r3, #14]
                    localDW->is_UP_KEY_PRESSED = motor_ctrl_IN_UP_DEBOUNCE;
 8008798:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800879a:	2202      	movs	r2, #2
 800879c:	745a      	strb	r2, [r3, #17]
                    localDW->temporalCounter_i2 = 0U;
 800879e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087a0:	2200      	movs	r2, #0
 80087a2:	80da      	strh	r2, [r3, #6]
                break;
 80087a4:	e091      	b.n	80088ca <motor_ctrl+0x6c6>
                else if (Saturation1 == 1)
 80087a6:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80087aa:	2b01      	cmp	r3, #1
 80087ac:	f040 808d 	bne.w	80088ca <motor_ctrl+0x6c6>
                    localDW->is_KEY_CMD = motor_ctrl_IN_DOWN_KEY_PRESSED;
 80087b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087b2:	2201      	movs	r2, #1
 80087b4:	739a      	strb	r2, [r3, #14]
                    localDW->is_DOWN_KEY_PRESSED = motor_ctrl_IN_DOWN_DEBOUNCE;
 80087b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087b8:	2202      	movs	r2, #2
 80087ba:	741a      	strb	r2, [r3, #16]
                    localDW->temporalCounter_i2 = 0U;
 80087bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087be:	2200      	movs	r2, #0
 80087c0:	80da      	strh	r2, [r3, #6]
                break;
 80087c2:	e082      	b.n	80088ca <motor_ctrl+0x6c6>
                switch (localDW->is_UP_KEY_PRESSED)
 80087c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087c6:	7c5b      	ldrb	r3, [r3, #17]
 80087c8:	2b03      	cmp	r3, #3
 80087ca:	d069      	beq.n	80088a0 <motor_ctrl+0x69c>
 80087cc:	2b03      	cmp	r3, #3
 80087ce:	dc7e      	bgt.n	80088ce <motor_ctrl+0x6ca>
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d002      	beq.n	80087da <motor_ctrl+0x5d6>
 80087d4:	2b02      	cmp	r3, #2
 80087d6:	d04a      	beq.n	800886e <motor_ctrl+0x66a>
                break;
 80087d8:	e079      	b.n	80088ce <motor_ctrl+0x6ca>
                    if (Saturation != 1)
 80087da:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d020      	beq.n	8008824 <motor_ctrl+0x620>
                        h_previousEvent = localDW->sfEvent;
 80087e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	61bb      	str	r3, [r7, #24]
                        localDW->sfEvent = motor_ctrl_event_up_key_click;
 80087e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087ea:	2207      	movs	r2, #7
 80087ec:	601a      	str	r2, [r3, #0]
                        if (localDW->is_active_MOTOR != 0U)
 80087ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087f0:	7cdb      	ldrb	r3, [r3, #19]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d00c      	beq.n	8008810 <motor_ctrl+0x60c>
                            motor_ctrl_MOTOR(&Saturation9, &Saturation10, &Saturation11, rty_up_relay, rty_down_relay, localDW);
 80087f6:	f107 0214 	add.w	r2, r7, #20
 80087fa:	f107 0116 	add.w	r1, r7, #22
 80087fe:	f107 0012 	add.w	r0, r7, #18
 8008802:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008804:	9301      	str	r3, [sp, #4]
 8008806:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008808:	9300      	str	r3, [sp, #0]
 800880a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800880c:	f7ff fbd4 	bl	8007fb8 <motor_ctrl_MOTOR>
                        localDW->sfEvent = h_previousEvent;
 8008810:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008812:	69ba      	ldr	r2, [r7, #24]
 8008814:	601a      	str	r2, [r3, #0]
                        localDW->is_UP_KEY_PRESSED = motor_ctrl_IN_NO_ACTIVE_CHILD;
 8008816:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008818:	2200      	movs	r2, #0
 800881a:	745a      	strb	r2, [r3, #17]
                        localDW->is_KEY_CMD = motor_ctrl_IN_IDLE_f;
 800881c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800881e:	2202      	movs	r2, #2
 8008820:	739a      	strb	r2, [r3, #14]
                    break;
 8008822:	e048      	b.n	80088b6 <motor_ctrl+0x6b2>
                    else if (localDW->temporalCounter_i2 >= Saturation8)
 8008824:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008826:	88db      	ldrh	r3, [r3, #6]
 8008828:	461a      	mov	r2, r3
 800882a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800882e:	429a      	cmp	r2, r3
 8008830:	db41      	blt.n	80088b6 <motor_ctrl+0x6b2>
                        localDW->is_UP_KEY_PRESSED = motor_ctrl_IN_UP_LONGPRESS;
 8008832:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008834:	2203      	movs	r2, #3
 8008836:	745a      	strb	r2, [r3, #17]
                        h_previousEvent = localDW->sfEvent;
 8008838:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	61bb      	str	r3, [r7, #24]
                        localDW->sfEvent = motor_c_event_up_key_long_press;
 800883e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008840:	2208      	movs	r2, #8
 8008842:	601a      	str	r2, [r3, #0]
                        if (localDW->is_active_MOTOR != 0U)
 8008844:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008846:	7cdb      	ldrb	r3, [r3, #19]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d00c      	beq.n	8008866 <motor_ctrl+0x662>
                            motor_ctrl_MOTOR(&Saturation9, &Saturation10, &Saturation11, rty_up_relay, rty_down_relay, localDW);
 800884c:	f107 0214 	add.w	r2, r7, #20
 8008850:	f107 0116 	add.w	r1, r7, #22
 8008854:	f107 0012 	add.w	r0, r7, #18
 8008858:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800885a:	9301      	str	r3, [sp, #4]
 800885c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800885e:	9300      	str	r3, [sp, #0]
 8008860:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008862:	f7ff fba9 	bl	8007fb8 <motor_ctrl_MOTOR>
                        localDW->sfEvent = h_previousEvent;
 8008866:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008868:	69ba      	ldr	r2, [r7, #24]
 800886a:	601a      	str	r2, [r3, #0]
                    break;
 800886c:	e023      	b.n	80088b6 <motor_ctrl+0x6b2>
                    if (localDW->temporalCounter_i2 >= Saturation7)
 800886e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008870:	88db      	ldrh	r3, [r3, #6]
 8008872:	461a      	mov	r2, r3
 8008874:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8008878:	429a      	cmp	r2, r3
 800887a:	db06      	blt.n	800888a <motor_ctrl+0x686>
                        localDW->is_UP_KEY_PRESSED = motor_ctrl_IN_UP_CLICK;
 800887c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800887e:	2201      	movs	r2, #1
 8008880:	745a      	strb	r2, [r3, #17]
                        localDW->temporalCounter_i2 = 0U;
 8008882:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008884:	2200      	movs	r2, #0
 8008886:	80da      	strh	r2, [r3, #6]
                    break;
 8008888:	e017      	b.n	80088ba <motor_ctrl+0x6b6>
                    else if (Saturation != 1)
 800888a:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800888e:	2b01      	cmp	r3, #1
 8008890:	d013      	beq.n	80088ba <motor_ctrl+0x6b6>
                        localDW->is_UP_KEY_PRESSED = motor_ctrl_IN_NO_ACTIVE_CHILD;
 8008892:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008894:	2200      	movs	r2, #0
 8008896:	745a      	strb	r2, [r3, #17]
                        localDW->is_KEY_CMD = motor_ctrl_IN_IDLE_f;
 8008898:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800889a:	2202      	movs	r2, #2
 800889c:	739a      	strb	r2, [r3, #14]
                    break;
 800889e:	e00c      	b.n	80088ba <motor_ctrl+0x6b6>
                    if (Saturation != 1)
 80088a0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d00a      	beq.n	80088be <motor_ctrl+0x6ba>
                        localDW->is_UP_KEY_PRESSED = motor_ctrl_IN_NO_ACTIVE_CHILD;
 80088a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088aa:	2200      	movs	r2, #0
 80088ac:	745a      	strb	r2, [r3, #17]
                        localDW->is_KEY_CMD = motor_ctrl_IN_IDLE_f;
 80088ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088b0:	2202      	movs	r2, #2
 80088b2:	739a      	strb	r2, [r3, #14]
                    break;
 80088b4:	e003      	b.n	80088be <motor_ctrl+0x6ba>
                    break;
 80088b6:	bf00      	nop
 80088b8:	e009      	b.n	80088ce <motor_ctrl+0x6ca>
                    break;
 80088ba:	bf00      	nop
 80088bc:	e007      	b.n	80088ce <motor_ctrl+0x6ca>
                    break;
 80088be:	bf00      	nop
                break;
 80088c0:	e005      	b.n	80088ce <motor_ctrl+0x6ca>
        }
 80088c2:	bf00      	nop
 80088c4:	e004      	b.n	80088d0 <motor_ctrl+0x6cc>
                break;
 80088c6:	bf00      	nop
 80088c8:	e002      	b.n	80088d0 <motor_ctrl+0x6cc>
                break;
 80088ca:	bf00      	nop
 80088cc:	e000      	b.n	80088d0 <motor_ctrl+0x6cc>
                break;
 80088ce:	bf00      	nop
        if (localDW->is_active_MOTOR != 0U)
 80088d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088d2:	7cdb      	ldrb	r3, [r3, #19]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d00c      	beq.n	80088f2 <motor_ctrl+0x6ee>
            motor_ctrl_MOTOR(&Saturation9, &Saturation10, &Saturation11, rty_up_relay, rty_down_relay, localDW);
 80088d8:	f107 0214 	add.w	r2, r7, #20
 80088dc:	f107 0116 	add.w	r1, r7, #22
 80088e0:	f107 0012 	add.w	r0, r7, #18
 80088e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088e6:	9301      	str	r3, [sp, #4]
 80088e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088ea:	9300      	str	r3, [sp, #0]
 80088ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088ee:	f7ff fb63 	bl	8007fb8 <motor_ctrl_MOTOR>
}
 80088f2:	bf00      	nop
 80088f4:	3730      	adds	r7, #48	; 0x30
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop

080088fc <__libc_init_array>:
 80088fc:	b570      	push	{r4, r5, r6, lr}
 80088fe:	2600      	movs	r6, #0
 8008900:	4d0c      	ldr	r5, [pc, #48]	; (8008934 <__libc_init_array+0x38>)
 8008902:	4c0d      	ldr	r4, [pc, #52]	; (8008938 <__libc_init_array+0x3c>)
 8008904:	1b64      	subs	r4, r4, r5
 8008906:	10a4      	asrs	r4, r4, #2
 8008908:	42a6      	cmp	r6, r4
 800890a:	d109      	bne.n	8008920 <__libc_init_array+0x24>
 800890c:	f000 f8f4 	bl	8008af8 <_init>
 8008910:	2600      	movs	r6, #0
 8008912:	4d0a      	ldr	r5, [pc, #40]	; (800893c <__libc_init_array+0x40>)
 8008914:	4c0a      	ldr	r4, [pc, #40]	; (8008940 <__libc_init_array+0x44>)
 8008916:	1b64      	subs	r4, r4, r5
 8008918:	10a4      	asrs	r4, r4, #2
 800891a:	42a6      	cmp	r6, r4
 800891c:	d105      	bne.n	800892a <__libc_init_array+0x2e>
 800891e:	bd70      	pop	{r4, r5, r6, pc}
 8008920:	f855 3b04 	ldr.w	r3, [r5], #4
 8008924:	4798      	blx	r3
 8008926:	3601      	adds	r6, #1
 8008928:	e7ee      	b.n	8008908 <__libc_init_array+0xc>
 800892a:	f855 3b04 	ldr.w	r3, [r5], #4
 800892e:	4798      	blx	r3
 8008930:	3601      	adds	r6, #1
 8008932:	e7f2      	b.n	800891a <__libc_init_array+0x1e>
 8008934:	08008e60 	.word	0x08008e60
 8008938:	08008e60 	.word	0x08008e60
 800893c:	08008e60 	.word	0x08008e60
 8008940:	08008e64 	.word	0x08008e64

08008944 <__retarget_lock_acquire_recursive>:
 8008944:	4770      	bx	lr

08008946 <__retarget_lock_release_recursive>:
 8008946:	4770      	bx	lr

08008948 <memcpy>:
 8008948:	440a      	add	r2, r1
 800894a:	4291      	cmp	r1, r2
 800894c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008950:	d100      	bne.n	8008954 <memcpy+0xc>
 8008952:	4770      	bx	lr
 8008954:	b510      	push	{r4, lr}
 8008956:	f811 4b01 	ldrb.w	r4, [r1], #1
 800895a:	4291      	cmp	r1, r2
 800895c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008960:	d1f9      	bne.n	8008956 <memcpy+0xe>
 8008962:	bd10      	pop	{r4, pc}

08008964 <memset>:
 8008964:	4603      	mov	r3, r0
 8008966:	4402      	add	r2, r0
 8008968:	4293      	cmp	r3, r2
 800896a:	d100      	bne.n	800896e <memset+0xa>
 800896c:	4770      	bx	lr
 800896e:	f803 1b01 	strb.w	r1, [r3], #1
 8008972:	e7f9      	b.n	8008968 <memset+0x4>

08008974 <cleanup_glue>:
 8008974:	b538      	push	{r3, r4, r5, lr}
 8008976:	460c      	mov	r4, r1
 8008978:	6809      	ldr	r1, [r1, #0]
 800897a:	4605      	mov	r5, r0
 800897c:	b109      	cbz	r1, 8008982 <cleanup_glue+0xe>
 800897e:	f7ff fff9 	bl	8008974 <cleanup_glue>
 8008982:	4621      	mov	r1, r4
 8008984:	4628      	mov	r0, r5
 8008986:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800898a:	f000 b869 	b.w	8008a60 <_free_r>
	...

08008990 <_reclaim_reent>:
 8008990:	4b2c      	ldr	r3, [pc, #176]	; (8008a44 <_reclaim_reent+0xb4>)
 8008992:	b570      	push	{r4, r5, r6, lr}
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4604      	mov	r4, r0
 8008998:	4283      	cmp	r3, r0
 800899a:	d051      	beq.n	8008a40 <_reclaim_reent+0xb0>
 800899c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800899e:	b143      	cbz	r3, 80089b2 <_reclaim_reent+0x22>
 80089a0:	68db      	ldr	r3, [r3, #12]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d14a      	bne.n	8008a3c <_reclaim_reent+0xac>
 80089a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80089a8:	6819      	ldr	r1, [r3, #0]
 80089aa:	b111      	cbz	r1, 80089b2 <_reclaim_reent+0x22>
 80089ac:	4620      	mov	r0, r4
 80089ae:	f000 f857 	bl	8008a60 <_free_r>
 80089b2:	6961      	ldr	r1, [r4, #20]
 80089b4:	b111      	cbz	r1, 80089bc <_reclaim_reent+0x2c>
 80089b6:	4620      	mov	r0, r4
 80089b8:	f000 f852 	bl	8008a60 <_free_r>
 80089bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80089be:	b111      	cbz	r1, 80089c6 <_reclaim_reent+0x36>
 80089c0:	4620      	mov	r0, r4
 80089c2:	f000 f84d 	bl	8008a60 <_free_r>
 80089c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80089c8:	b111      	cbz	r1, 80089d0 <_reclaim_reent+0x40>
 80089ca:	4620      	mov	r0, r4
 80089cc:	f000 f848 	bl	8008a60 <_free_r>
 80089d0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80089d2:	b111      	cbz	r1, 80089da <_reclaim_reent+0x4a>
 80089d4:	4620      	mov	r0, r4
 80089d6:	f000 f843 	bl	8008a60 <_free_r>
 80089da:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80089dc:	b111      	cbz	r1, 80089e4 <_reclaim_reent+0x54>
 80089de:	4620      	mov	r0, r4
 80089e0:	f000 f83e 	bl	8008a60 <_free_r>
 80089e4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80089e6:	b111      	cbz	r1, 80089ee <_reclaim_reent+0x5e>
 80089e8:	4620      	mov	r0, r4
 80089ea:	f000 f839 	bl	8008a60 <_free_r>
 80089ee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80089f0:	b111      	cbz	r1, 80089f8 <_reclaim_reent+0x68>
 80089f2:	4620      	mov	r0, r4
 80089f4:	f000 f834 	bl	8008a60 <_free_r>
 80089f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089fa:	b111      	cbz	r1, 8008a02 <_reclaim_reent+0x72>
 80089fc:	4620      	mov	r0, r4
 80089fe:	f000 f82f 	bl	8008a60 <_free_r>
 8008a02:	69a3      	ldr	r3, [r4, #24]
 8008a04:	b1e3      	cbz	r3, 8008a40 <_reclaim_reent+0xb0>
 8008a06:	4620      	mov	r0, r4
 8008a08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008a0a:	4798      	blx	r3
 8008a0c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008a0e:	b1b9      	cbz	r1, 8008a40 <_reclaim_reent+0xb0>
 8008a10:	4620      	mov	r0, r4
 8008a12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008a16:	f7ff bfad 	b.w	8008974 <cleanup_glue>
 8008a1a:	5949      	ldr	r1, [r1, r5]
 8008a1c:	b941      	cbnz	r1, 8008a30 <_reclaim_reent+0xa0>
 8008a1e:	3504      	adds	r5, #4
 8008a20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a22:	2d80      	cmp	r5, #128	; 0x80
 8008a24:	68d9      	ldr	r1, [r3, #12]
 8008a26:	d1f8      	bne.n	8008a1a <_reclaim_reent+0x8a>
 8008a28:	4620      	mov	r0, r4
 8008a2a:	f000 f819 	bl	8008a60 <_free_r>
 8008a2e:	e7ba      	b.n	80089a6 <_reclaim_reent+0x16>
 8008a30:	680e      	ldr	r6, [r1, #0]
 8008a32:	4620      	mov	r0, r4
 8008a34:	f000 f814 	bl	8008a60 <_free_r>
 8008a38:	4631      	mov	r1, r6
 8008a3a:	e7ef      	b.n	8008a1c <_reclaim_reent+0x8c>
 8008a3c:	2500      	movs	r5, #0
 8008a3e:	e7ef      	b.n	8008a20 <_reclaim_reent+0x90>
 8008a40:	bd70      	pop	{r4, r5, r6, pc}
 8008a42:	bf00      	nop
 8008a44:	200000a0 	.word	0x200000a0

08008a48 <__malloc_lock>:
 8008a48:	4801      	ldr	r0, [pc, #4]	; (8008a50 <__malloc_lock+0x8>)
 8008a4a:	f7ff bf7b 	b.w	8008944 <__retarget_lock_acquire_recursive>
 8008a4e:	bf00      	nop
 8008a50:	20003054 	.word	0x20003054

08008a54 <__malloc_unlock>:
 8008a54:	4801      	ldr	r0, [pc, #4]	; (8008a5c <__malloc_unlock+0x8>)
 8008a56:	f7ff bf76 	b.w	8008946 <__retarget_lock_release_recursive>
 8008a5a:	bf00      	nop
 8008a5c:	20003054 	.word	0x20003054

08008a60 <_free_r>:
 8008a60:	b538      	push	{r3, r4, r5, lr}
 8008a62:	4605      	mov	r5, r0
 8008a64:	2900      	cmp	r1, #0
 8008a66:	d043      	beq.n	8008af0 <_free_r+0x90>
 8008a68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a6c:	1f0c      	subs	r4, r1, #4
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	bfb8      	it	lt
 8008a72:	18e4      	addlt	r4, r4, r3
 8008a74:	f7ff ffe8 	bl	8008a48 <__malloc_lock>
 8008a78:	4a1e      	ldr	r2, [pc, #120]	; (8008af4 <_free_r+0x94>)
 8008a7a:	6813      	ldr	r3, [r2, #0]
 8008a7c:	4610      	mov	r0, r2
 8008a7e:	b933      	cbnz	r3, 8008a8e <_free_r+0x2e>
 8008a80:	6063      	str	r3, [r4, #4]
 8008a82:	6014      	str	r4, [r2, #0]
 8008a84:	4628      	mov	r0, r5
 8008a86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a8a:	f7ff bfe3 	b.w	8008a54 <__malloc_unlock>
 8008a8e:	42a3      	cmp	r3, r4
 8008a90:	d90a      	bls.n	8008aa8 <_free_r+0x48>
 8008a92:	6821      	ldr	r1, [r4, #0]
 8008a94:	1862      	adds	r2, r4, r1
 8008a96:	4293      	cmp	r3, r2
 8008a98:	bf01      	itttt	eq
 8008a9a:	681a      	ldreq	r2, [r3, #0]
 8008a9c:	685b      	ldreq	r3, [r3, #4]
 8008a9e:	1852      	addeq	r2, r2, r1
 8008aa0:	6022      	streq	r2, [r4, #0]
 8008aa2:	6063      	str	r3, [r4, #4]
 8008aa4:	6004      	str	r4, [r0, #0]
 8008aa6:	e7ed      	b.n	8008a84 <_free_r+0x24>
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	b10b      	cbz	r3, 8008ab2 <_free_r+0x52>
 8008aae:	42a3      	cmp	r3, r4
 8008ab0:	d9fa      	bls.n	8008aa8 <_free_r+0x48>
 8008ab2:	6811      	ldr	r1, [r2, #0]
 8008ab4:	1850      	adds	r0, r2, r1
 8008ab6:	42a0      	cmp	r0, r4
 8008ab8:	d10b      	bne.n	8008ad2 <_free_r+0x72>
 8008aba:	6820      	ldr	r0, [r4, #0]
 8008abc:	4401      	add	r1, r0
 8008abe:	1850      	adds	r0, r2, r1
 8008ac0:	4283      	cmp	r3, r0
 8008ac2:	6011      	str	r1, [r2, #0]
 8008ac4:	d1de      	bne.n	8008a84 <_free_r+0x24>
 8008ac6:	6818      	ldr	r0, [r3, #0]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	4401      	add	r1, r0
 8008acc:	6011      	str	r1, [r2, #0]
 8008ace:	6053      	str	r3, [r2, #4]
 8008ad0:	e7d8      	b.n	8008a84 <_free_r+0x24>
 8008ad2:	d902      	bls.n	8008ada <_free_r+0x7a>
 8008ad4:	230c      	movs	r3, #12
 8008ad6:	602b      	str	r3, [r5, #0]
 8008ad8:	e7d4      	b.n	8008a84 <_free_r+0x24>
 8008ada:	6820      	ldr	r0, [r4, #0]
 8008adc:	1821      	adds	r1, r4, r0
 8008ade:	428b      	cmp	r3, r1
 8008ae0:	bf01      	itttt	eq
 8008ae2:	6819      	ldreq	r1, [r3, #0]
 8008ae4:	685b      	ldreq	r3, [r3, #4]
 8008ae6:	1809      	addeq	r1, r1, r0
 8008ae8:	6021      	streq	r1, [r4, #0]
 8008aea:	6063      	str	r3, [r4, #4]
 8008aec:	6054      	str	r4, [r2, #4]
 8008aee:	e7c9      	b.n	8008a84 <_free_r+0x24>
 8008af0:	bd38      	pop	{r3, r4, r5, pc}
 8008af2:	bf00      	nop
 8008af4:	200022e8 	.word	0x200022e8

08008af8 <_init>:
 8008af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008afa:	bf00      	nop
 8008afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008afe:	bc08      	pop	{r3}
 8008b00:	469e      	mov	lr, r3
 8008b02:	4770      	bx	lr

08008b04 <_fini>:
 8008b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b06:	bf00      	nop
 8008b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b0a:	bc08      	pop	{r3}
 8008b0c:	469e      	mov	lr, r3
 8008b0e:	4770      	bx	lr
